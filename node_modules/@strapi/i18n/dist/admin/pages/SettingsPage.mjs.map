{"version":3,"file":"SettingsPage.mjs","sources":["../../../admin/src/pages/SettingsPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useRBAC,\n  Layouts,\n  BaseQueryError,\n} from '@strapi/admin/strapi-admin';\nimport { useAIAvailability } from '@strapi/admin/strapi-admin/ee';\nimport {\n  Box,\n  EmptyStateLayout,\n  Field,\n  Flex,\n  Tooltip,\n  Toggle,\n  Typography,\n} from '@strapi/design-system';\nimport { Sparkle } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { CreateLocale } from '../components/CreateLocale';\nimport { LocaleTable } from '../components/LocaleTable';\nimport { PERMISSIONS } from '../constants';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { useGetSettingsQuery, useUpdatei18nSettingsMutation } from '../services/settings';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst SettingsErrrorTooltip = ({\n  children,\n  error,\n}: {\n  children: React.ReactNode;\n  error: BaseQueryError | SerializedError | undefined;\n}) => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  if (error) {\n    return (\n      <Tooltip label={formatAPIError(error)} style={{ maxWidth: '200px' }}>\n        {children}\n      </Tooltip>\n    );\n  }\n\n  return children;\n};\n\nconst SettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { data: locales, isLoading: isLoadingLocales, error } = useGetLocalesQuery();\n  const {\n    isLoading: isLoadingRBAC,\n    allowedActions: { canUpdate, canCreate, canDelete },\n  } = useRBAC(PERMISSIONS);\n  const isAIAvailable = useAIAvailability();\n\n  // Settings state management\n  const {\n    data: settings,\n    isLoading: isLoadingSettings,\n    error: settingsError,\n  } = useGetSettingsQuery();\n  const [updateSettings] = useUpdatei18nSettingsMutation();\n\n  const handleToggleChange = async (checked: boolean) => {\n    try {\n      await updateSettings({ aiLocalizations: checked }).unwrap();\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.form.success.fields' }),\n      });\n    } catch (err) {\n      console.error(err);\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const isLoading = isLoadingLocales || isLoadingRBAC || isLoadingSettings;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !Array.isArray(locales)) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main tabIndex={-1}>\n      <Layouts.Header\n        primaryAction={<CreateLocale disabled={!canCreate} />}\n        title={formatMessage({\n          id: getTranslation('plugin.name'),\n          defaultMessage: 'Internationalization',\n        })}\n        subtitle={formatMessage({\n          id: getTranslation('Settings.list.description'),\n          defaultMessage: 'Configure the settings',\n        })}\n      />\n      <Layouts.Content>\n        {isAIAvailable && window.strapi.future.isEnabled('unstableAILocalizations') && (\n          <Flex background=\"neutral0\" padding={6} marginBottom={6} shadow=\"filterShadow\" hasRadius>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={1} flex={1}>\n              <Flex gap={1}>\n                <Box color=\"alternative700\">\n                  <Sparkle />\n                </Box>\n                <Typography variant=\"delta\" tag=\"h2\">\n                  {formatMessage({\n                    id: getTranslation('Settings.aiLocalizations.label'),\n                    defaultMessage: 'AI Translations',\n                  })}\n                </Typography>\n              </Flex>\n              <Typography variant=\"pi\" textColor=\"neutral600\" fontSize=\"14px\">\n                {formatMessage({\n                  id: getTranslation('Settings.aiLocalizations.description'),\n                  defaultMessage:\n                    'Everytime you save in the Content Manager, our AI will use your default locale to translate all other locales automatically.',\n                })}\n              </Typography>\n            </Flex>\n            <Field.Root name=\"aiLocalizations\" minWidth=\"200px\">\n              <SettingsErrrorTooltip error={settingsError}>\n                <Toggle\n                  disabled={Boolean(settingsError)}\n                  checked={settings?.data?.aiLocalizations ?? false}\n                  offLabel={formatMessage({\n                    id: 'app.components.ToggleCheckbox.disabled-label',\n                    defaultMessage: 'Disabled',\n                  })}\n                  onLabel={formatMessage({\n                    id: 'app.components.ToggleCheckbox.enabled-label',\n                    defaultMessage: 'Enabled',\n                  })}\n                  onChange={(e) => handleToggleChange(e.target.checked)}\n                />\n              </SettingsErrrorTooltip>\n            </Field.Root>\n          </Flex>\n        )}\n        {locales.length > 0 ? (\n          <LocaleTable locales={locales} canDelete={canDelete} canUpdate={canUpdate} />\n        ) : (\n          <EmptyStateLayout\n            icon={<EmptyDocuments width={undefined} height={undefined} />}\n            content={formatMessage({\n              id: getTranslation('Settings.list.empty.title'),\n              defaultMessage: 'There are no locales',\n            })}\n            action={<CreateLocale disabled={!canCreate} variant=\"secondary\" />}\n          />\n        )}\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nconst ProtectedSettingsPage = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.read}>\n      <SettingsPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedSettingsPage, SettingsPage };\n"],"names":["SettingsErrrorTooltip","children","error","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","_jsx","Tooltip","label","style","maxWidth","SettingsPage","formatMessage","useIntl","toggleNotification","useNotification","data","locales","isLoading","isLoadingLocales","useGetLocalesQuery","isLoadingRBAC","allowedActions","canUpdate","canCreate","canDelete","useRBAC","PERMISSIONS","isAIAvailable","useAIAvailability","settings","isLoadingSettings","settingsError","useGetSettingsQuery","updateSettings","useUpdatei18nSettingsMutation","handleToggleChange","checked","aiLocalizations","unwrap","type","message","id","err","console","defaultMessage","Page","Loading","Array","isArray","Error","_jsxs","Main","tabIndex","Layouts","Header","primaryAction","CreateLocale","disabled","title","getTranslation","subtitle","Content","window","strapi","future","isEnabled","Flex","background","padding","marginBottom","shadow","hasRadius","direction","alignItems","gap","flex","Box","color","Sparkle","Typography","variant","tag","textColor","fontSize","Field","Root","name","minWidth","Toggle","Boolean","offLabel","onLabel","onChange","e","target","length","LocaleTable","EmptyStateLayout","icon","EmptyDocuments","width","undefined","height","content","action","ProtectedSettingsPage","Protect","permissions","read"],"mappings":";;;;;;;;;;;;;;;AAgCA,MAAMA,wBAAwB,CAAC,EAC7BC,QAAQ,EACRC,KAAK,EAIN,GAAA;AACC,IAAA,MAAM,EAAEC,uBAAAA,EAAyBC,cAAc,EAAE,GAAGC,kBAAAA,EAAAA;AAEpD,IAAA,IAAIH,KAAO,EAAA;AACT,QAAA,qBACEI,GAACC,CAAAA,OAAAA,EAAAA;AAAQC,YAAAA,KAAAA,EAAOJ,cAAeF,CAAAA,KAAAA,CAAAA;YAAQO,KAAO,EAAA;gBAAEC,QAAU,EAAA;AAAQ,aAAA;AAC/DT,YAAAA,QAAAA,EAAAA;;AAGP;IAEA,OAAOA,QAAAA;AACT,CAAA;AAEA,MAAMU,YAAe,GAAA,IAAA;IACnB,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAC1B,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,eAAAA,EAAAA;IAC/B,MAAM,EAAEC,MAAMC,OAAO,EAAEC,WAAWC,gBAAgB,EAAEjB,KAAK,EAAE,GAAGkB,kBAAAA,EAAAA;AAC9D,IAAA,MAAM,EACJF,SAAAA,EAAWG,aAAa,EACxBC,gBAAgB,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAE,EACpD,GAAGC,OAAQC,CAAAA,WAAAA,CAAAA;AACZ,IAAA,MAAMC,aAAgBC,GAAAA,iBAAAA,EAAAA;;IAGtB,MAAM,EACJb,IAAMc,EAAAA,QAAQ,EACdZ,SAAAA,EAAWa,iBAAiB,EAC5B7B,KAAAA,EAAO8B,aAAa,EACrB,GAAGC,mBAAAA,EAAAA;IACJ,MAAM,CAACC,eAAe,GAAGC,6BAAAA,EAAAA;AAEzB,IAAA,MAAMC,qBAAqB,OAAOC,OAAAA,GAAAA;QAChC,IAAI;AACF,YAAA,MAAMH,cAAe,CAAA;gBAAEI,eAAiBD,EAAAA;AAAQ,aAAA,CAAA,CAAGE,MAAM,EAAA;YAEzDzB,kBAAmB,CAAA;gBACjB0B,IAAM,EAAA,SAAA;AACNC,gBAAAA,OAAAA,EAAS7B,aAAc,CAAA;oBAAE8B,EAAI,EAAA;AAAmC,iBAAA;AAClE,aAAA,CAAA;AACF,SAAA,CAAE,OAAOC,GAAK,EAAA;AACZC,YAAAA,OAAAA,CAAQ1C,KAAK,CAACyC,GAAAA,CAAAA;YACd7B,kBAAmB,CAAA;gBACjB0B,IAAM,EAAA,QAAA;AACNC,gBAAAA,OAAAA,EAAS7B,aAAc,CAAA;oBACrB8B,EAAI,EAAA,oBAAA;oBACJG,cAAgB,EAAA;AAClB,iBAAA;AACF,aAAA,CAAA;AACF;AACF,KAAA;IAEA,MAAM3B,SAAAA,GAAYC,oBAAoBE,aAAiBU,IAAAA,iBAAAA;AAEvD,IAAA,IAAIb,SAAW,EAAA;QACb,qBAAOZ,GAAA,CAACwC,KAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;AAEA,IAAA,IAAI7C,KAAS,IAAA,CAAC8C,KAAMC,CAAAA,OAAO,CAAChC,OAAU,CAAA,EAAA;QACpC,qBAAOX,GAAA,CAACwC,KAAKI,KAAK,EAAA,EAAA,CAAA;AACpB;IAEA,qBACEC,IAAA,CAACL,KAAKM,IAAI,EAAA;AAACC,QAAAA,QAAAA,EAAU,CAAC,CAAA;;AACpB,0BAAA/C,GAAA,CAACgD,QAAQC,MAAM,EAAA;AACbC,gBAAAA,aAAAA,gBAAelD,GAACmD,CAAAA,YAAAA,EAAAA;AAAaC,oBAAAA,QAAAA,EAAU,CAAClC;;AACxCmC,gBAAAA,KAAAA,EAAO/C,aAAc,CAAA;AACnB8B,oBAAAA,EAAAA,EAAIkB,cAAe,CAAA,aAAA,CAAA;oBACnBf,cAAgB,EAAA;AAClB,iBAAA,CAAA;AACAgB,gBAAAA,QAAAA,EAAUjD,aAAc,CAAA;AACtB8B,oBAAAA,EAAAA,EAAIkB,cAAe,CAAA,2BAAA,CAAA;oBACnBf,cAAgB,EAAA;AAClB,iBAAA;;AAEF,0BAAAM,IAAA,CAACG,QAAQQ,OAAO,EAAA;;oBACblC,aAAiBmC,IAAAA,MAAAA,CAAOC,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC,4CAC/Cf,IAACgB,CAAAA,IAAAA,EAAAA;wBAAKC,UAAW,EAAA,UAAA;wBAAWC,OAAS,EAAA,CAAA;wBAAGC,YAAc,EAAA,CAAA;wBAAGC,MAAO,EAAA,cAAA;wBAAeC,SAAS,EAAA,IAAA;;0CACtFrB,IAACgB,CAAAA,IAAAA,EAAAA;gCAAKM,SAAU,EAAA,QAAA;gCAASC,UAAW,EAAA,SAAA;gCAAUC,GAAK,EAAA,CAAA;gCAAGC,IAAM,EAAA,CAAA;;kDAC1DzB,IAACgB,CAAAA,IAAAA,EAAAA;wCAAKQ,GAAK,EAAA,CAAA;;0DACTrE,GAACuE,CAAAA,GAAAA,EAAAA;gDAAIC,KAAM,EAAA,gBAAA;AACT,gDAAA,QAAA,gBAAAxE,GAACyE,CAAAA,OAAAA,EAAAA,EAAAA;;0DAEHzE,GAAC0E,CAAAA,UAAAA,EAAAA;gDAAWC,OAAQ,EAAA,OAAA;gDAAQC,GAAI,EAAA,IAAA;0DAC7BtE,aAAc,CAAA;AACb8B,oDAAAA,EAAAA,EAAIkB,cAAe,CAAA,gCAAA,CAAA;oDACnBf,cAAgB,EAAA;AAClB,iDAAA;;;;kDAGJvC,GAAC0E,CAAAA,UAAAA,EAAAA;wCAAWC,OAAQ,EAAA,IAAA;wCAAKE,SAAU,EAAA,YAAA;wCAAaC,QAAS,EAAA,MAAA;kDACtDxE,aAAc,CAAA;AACb8B,4CAAAA,EAAAA,EAAIkB,cAAe,CAAA,sCAAA,CAAA;4CACnBf,cACE,EAAA;AACJ,yCAAA;;;;AAGJ,0CAAAvC,GAAA,CAAC+E,MAAMC,IAAI,EAAA;gCAACC,IAAK,EAAA,iBAAA;gCAAkBC,QAAS,EAAA,OAAA;AAC1C,gCAAA,QAAA,gBAAAlF,GAACN,CAAAA,qBAAAA,EAAAA;oCAAsBE,KAAO8B,EAAAA,aAAAA;AAC5B,oCAAA,QAAA,gBAAA1B,GAACmF,CAAAA,MAAAA,EAAAA;AACC/B,wCAAAA,QAAAA,EAAUgC,OAAQ1D,CAAAA,aAAAA,CAAAA;wCAClBK,OAASP,EAAAA,QAAAA,EAAUd,MAAMsB,eAAmB,IAAA,KAAA;AAC5CqD,wCAAAA,QAAAA,EAAU/E,aAAc,CAAA;4CACtB8B,EAAI,EAAA,8CAAA;4CACJG,cAAgB,EAAA;AAClB,yCAAA,CAAA;AACA+C,wCAAAA,OAAAA,EAAShF,aAAc,CAAA;4CACrB8B,EAAI,EAAA,6CAAA;4CACJG,cAAgB,EAAA;AAClB,yCAAA,CAAA;AACAgD,wCAAAA,QAAAA,EAAU,CAACC,CAAM1D,GAAAA,kBAAAA,CAAmB0D,CAAEC,CAAAA,MAAM,CAAC1D,OAAO;;;;;;oBAM7DpB,OAAQ+E,CAAAA,MAAM,GAAG,CAAA,iBAChB1F,GAAC2F,CAAAA,WAAAA,EAAAA;wBAAYhF,OAASA,EAAAA,OAAAA;wBAASQ,SAAWA,EAAAA,SAAAA;wBAAWF,SAAWA,EAAAA;uCAEhEjB,GAAC4F,CAAAA,gBAAAA,EAAAA;AACCC,wBAAAA,IAAAA,gBAAM7F,GAAC8F,CAAAA,cAAAA,EAAAA;4BAAeC,KAAOC,EAAAA,SAAAA;4BAAWC,MAAQD,EAAAA;;AAChDE,wBAAAA,OAAAA,EAAS5F,aAAc,CAAA;AACrB8B,4BAAAA,EAAAA,EAAIkB,cAAe,CAAA,2BAAA,CAAA;4BACnBf,cAAgB,EAAA;AAClB,yBAAA,CAAA;AACA4D,wBAAAA,MAAAA,gBAAQnG,GAACmD,CAAAA,YAAAA,EAAAA;AAAaC,4BAAAA,QAAAA,EAAU,CAAClC,SAAAA;4BAAWyD,OAAQ,EAAA;;;;;;;AAMhE;AAEA,MAAMyB,qBAAwB,GAAA,IAAA;IAC5B,qBACEpG,GAAA,CAACwC,KAAK6D,OAAO,EAAA;AAACC,QAAAA,WAAAA,EAAajF,YAAYkF,IAAI;AACzC,QAAA,QAAA,gBAAAvG,GAACK,CAAAA,YAAAA,EAAAA,EAAAA;;AAGP;;;;"}