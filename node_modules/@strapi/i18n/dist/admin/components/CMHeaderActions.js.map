{"version":3,"file":"CMHeaderActions.js","sources":["../../../admin/src/components/CMHeaderActions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { skipToken } from '@reduxjs/toolkit/query';\nimport {\n  useNotification,\n  useQueryParams,\n  Table,\n  useAPIErrorHandler,\n  FormErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport { useAIAvailability } from '@strapi/admin/strapi-admin/ee';\nimport {\n  type DocumentActionComponent,\n  type DocumentActionProps,\n  unstable_useDocument as useDocument,\n  unstable_useDocumentActions as useDocumentActions,\n  buildValidParams,\n  HeaderActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport {\n  Flex,\n  Status,\n  Typography,\n  Button,\n  Modal,\n  Field,\n  SingleSelect,\n  SingleSelectOption,\n  Dialog,\n  type StatusVariant,\n  Box,\n  Link,\n} from '@strapi/design-system';\nimport { WarningCircle, ListPlus, Trash, Earth, Cross, Plus, Sparkle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\nimport { useGetSettingsQuery } from '../services/settings';\nimport { cleanData } from '../utils/clean';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\n\nimport type { Locale } from '../../../shared/contracts/locales';\nimport type { I18nBaseQuery } from '../types';\nimport type { Modules } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * LocalePickerAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LocaleOptionProps {\n  isDraftAndPublishEnabled: boolean;\n  locale: Locale;\n  status: 'draft' | 'published' | 'modified';\n  entryExists: boolean;\n}\n\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\n  draft: 'secondary',\n  published: 'success',\n  modified: 'alternative',\n};\n\nconst LocaleOption = ({\n  isDraftAndPublishEnabled,\n  locale,\n  status,\n  entryExists,\n}: LocaleOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!entryExists) {\n    return formatMessage(\n      {\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\n      },\n      {\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\n        locale: locale.name,\n      }\n    );\n  }\n\n  return (\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\n      <Typography>{locale.name}</Typography>\n      {isDraftAndPublishEnabled ? (\n        <Status\n          display=\"flex\"\n          paddingLeft=\"6px\"\n          paddingRight=\"6px\"\n          paddingTop=\"2px\"\n          paddingBottom=\"2px\"\n          size=\"S\"\n          variant={statusVariants[status]}\n        >\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n            {capitalize(status)}\n          </Typography>\n        </Status>\n      ) : null}\n    </Flex>\n  );\n};\n\nconst LocalePickerAction = ({\n  document,\n  meta,\n  model,\n  collectionType,\n  documentId,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n, canCreate, canRead } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const { schema } = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params: { locale: currentDesiredLocale },\n  });\n\n  const handleSelect = React.useCallback(\n    (value: string) => {\n      setQuery({\n        plugins: {\n          ...query.plugins,\n          i18n: {\n            locale: value,\n          },\n        },\n      });\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleSelect(defaultLocale.code);\n    }\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\n\n  const currentLocale = Array.isArray(locales)\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\n    : undefined;\n\n  // Use meta.availableLocales instead of document.localizations\n  // meta.availableLocales contains all locales for the document, even when creating new locales\n  const availableLocales = meta?.availableLocales ?? [];\n  const documentLocalizations = document?.localizations ?? [];\n\n  // Prefer meta.availableLocales as it's more reliable, fallback to document.localizations\n  const allLocalizations = availableLocales.length > 0 ? availableLocales : documentLocalizations;\n\n  const allCurrentLocales = [\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\n    ...allLocalizations,\n  ];\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can read we allow you to see the locale exists\n     * otherwise the locale is hidden.\n     */\n    return canRead.includes(locale.code);\n  });\n\n  return {\n    label: formatMessage({\n      id: getTranslation('Settings.locales.modal.locales.label'),\n      defaultMessage: 'Locales',\n    }),\n    options: displayedLocales.map((locale) => {\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\n\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\n        'locale' in doc ? doc.locale === locale.code : false\n      );\n\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\n\n      return {\n        disabled: !permissionsToCheck.includes(locale.code),\n        value: locale.code,\n        label: (\n          <LocaleOption\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\n            locale={locale}\n            status={currentLocaleDoc?.status}\n            entryExists={entryWithLocaleExists}\n          />\n        ),\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\n      };\n    }),\n    customizeContent: () => currentLocale?.name,\n    onSelect: handleSelect,\n    value: currentLocale,\n  };\n};\n\ntype UseDocument = typeof useDocument;\n\nconst getDocumentStatus = (\n  document: ReturnType<UseDocument>['document'],\n  meta: ReturnType<UseDocument>['meta']\n): 'draft' | 'published' | 'modified' => {\n  const docStatus = document?.status;\n  const statuses = meta?.availableStatus ?? [];\n\n  /**\n   * Creating an entry\n   */\n  if (!docStatus) {\n    return 'draft';\n  }\n\n  /**\n   * We're viewing a draft, but the document could have a published version\n   */\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\n    return 'published';\n  }\n\n  return docStatus;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AISettingsStatusAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst AITranslationStatusIcon = styled(Status)<{ $isAISettingEnabled: boolean }>`\n  display: flex;\n  gap: ${({ theme }) => theme.spaces[1]};\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n\n  // Disabled state\n  ${({ $isAISettingEnabled, theme }) =>\n    !$isAISettingEnabled &&\n    `\n    background-color: ${theme.colors.neutral150};\n  `}\n\n  svg {\n    ${({ $isAISettingEnabled, theme }) =>\n      !$isAISettingEnabled &&\n      `\n        fill: ${theme.colors.neutral300};\n      `}\n  }\n`;\n\nconst AITranslationStatusAction = () => {\n  const { formatMessage } = useIntl();\n  const isAIAvailable = useAIAvailability();\n  const { data: settings } = useGetSettingsQuery();\n  const isAISettingEnabled = settings?.data?.aiLocalizations;\n  const { hasI18n } = useI18n();\n\n  // Do not display this action when i18n is not available\n  if (!hasI18n) {\n    return null;\n  }\n\n  // Do not display this action when AI is not available\n  const hasAIFutureFlag = window.strapi.future.isEnabled('unstableAILocalizations');\n  if (!isAIAvailable || !hasAIFutureFlag) {\n    return null;\n  }\n\n  return {\n    status: {\n      message: (\n        <Box\n          height=\"100%\"\n          aria-label={formatMessage({\n            id: getTranslation('CMEditViewAITranslation.status-aria-label'),\n            defaultMessage: 'AI Translation Status',\n          })}\n        >\n          <AITranslationStatusIcon\n            $isAISettingEnabled={Boolean(isAISettingEnabled)}\n            variant={isAISettingEnabled ? 'alternative' : 'neutral'}\n            size=\"S\"\n          >\n            <Sparkle />\n          </AITranslationStatusIcon>\n        </Box>\n      ),\n      tooltip: (\n        <Flex direction=\"column\" padding={4} alignItems=\"flex-start\" width=\"25rem\">\n          <Typography variant=\"pi\" fontWeight=\"600\">\n            {formatMessage(\n              {\n                id: getTranslation('CMEditViewAITranslation.status-title'),\n                defaultMessage:\n                  '{enabled, select, true {AI translation enabled} false {AI translation disabled} other {AI translation disabled}}',\n              },\n              { enabled: isAISettingEnabled }\n            )}\n          </Typography>\n          <Typography variant=\"pi\" paddingTop={1} paddingBottom={3}>\n            {formatMessage({\n              id: getTranslation('CMEditViewAITranslation.status-description'),\n              defaultMessage:\n                'Our AI translates content in all locales each time you save a modification.',\n            })}\n          </Typography>\n          <Link\n            fontSize=\"inherit\"\n            tag={NavLink}\n            to=\"/settings/internationalization\"\n            style={{ alignSelf: 'flex-end' }}\n          >\n            <Typography variant=\"pi\" textAlign=\"right\">\n              {formatMessage(\n                {\n                  id: getTranslation('CMEditViewAITranslation.settings-link'),\n                  defaultMessage:\n                    '{enabled, select, true {Disable it in settings} false {Enable it in settings} other {Enable it in settings}}',\n                },\n                { enabled: isAISettingEnabled }\n              )}\n            </Typography>\n          </Link>\n        </Flex>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FillFromAnotherLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst FillFromAnotherLocaleAction = ({\n  documentId,\n  meta,\n  model,\n  collectionType,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n } = useI18n();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\n\n  const { getDocument } = useDocumentActions();\n  const { schema, components } = useDocument({\n    model,\n    documentId,\n    collectionType,\n    params: { locale: currentDesiredLocale },\n  });\n  const { data: locales = [] } = useGetLocalesQuery();\n\n  const isAIAvailable = useAIAvailability();\n  const { data: settings } = useGetSettingsQuery();\n  const isAISettingEnabled = settings?.data?.aiLocalizations;\n\n  const availableLocales = Array.isArray(locales)\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\n    : [];\n\n  const fillFromLocale = (onClose: () => void) => async () => {\n    const response = await getDocument({\n      collectionType,\n      model,\n      documentId,\n      params: { locale: localeSelected },\n    });\n    if (!response || !schema) {\n      return;\n    }\n\n    const { data } = response;\n\n    const cleanedData = cleanData(data, schema, components);\n\n    setValues(cleanedData);\n\n    onClose();\n  };\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  // Do not display this action when AI is available and AI translations are enabled\n  const hasAIFutureFlag = window.strapi.future.isEnabled('unstableAILocalizations');\n  if (hasAIFutureFlag && isAIAvailable && isAISettingEnabled) {\n    return null;\n  }\n\n  return {\n    type: 'icon',\n    icon: <Earth />,\n    disabled: availableLocales.length === 0,\n    label: formatMessage({\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\n      defaultMessage: 'Fill in from another locale',\n    }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: ({ onClose }: { onClose: () => void }) => (\n        <>\n          <Dialog.Body>\n            <Flex direction=\"column\" gap={3}>\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n              <Typography textAlign=\"center\">\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\n                  defaultMessage:\n                    'Your current content will be erased and filled by the content of the selected locale:',\n                })}\n              </Typography>\n              <Field.Root width=\"100%\">\n                <Field.Label>\n                  {formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\n                    defaultMessage: 'Locale',\n                  })}\n                </Field.Label>\n                <SingleSelect\n                  value={localeSelected}\n                  placeholder={formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\n                    defaultMessage: 'Select one locale...',\n                  })}\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n                  onChange={(value) => setLocaleSelected(value)}\n                >\n                  {availableLocales.map((locale) => (\n                    <SingleSelectOption key={locale.code} value={locale.code}>\n                      {locale.name}\n                    </SingleSelectOption>\n                  ))}\n                </SingleSelect>\n              </Field.Root>\n            </Flex>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Flex gap={2} width=\"100%\">\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            </Flex>\n          </Dialog.Footer>\n        </>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { delete: deleteAction, isLoading } = useDocumentActions();\n  const { hasI18n, canDelete } = useI18n();\n\n  // Get the current locale object, using the URL instead of document so it works while creating\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    disabled:\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\n    position: ['header', 'table-row'],\n    label: formatMessage(\n      {\n        id: getTranslation('actions.delete.label'),\n        defaultMessage: 'Delete entry ({locale})',\n      },\n      { locale: locale && locale.name }\n    ),\n    icon: <StyledTrash />,\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('actions.delete.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: getTranslation('actions.delete.dialog.body'),\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        const unableToDelete =\n          // We are unable to delete a collection type without a document ID\n          // & unable to delete generally if there is no document locale\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\n\n        if (unableToDelete) {\n          console.error(\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: getTranslation('actions.delete.error'),\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\n            }),\n            type: 'danger',\n          });\n\n          return;\n        }\n\n        const res = await deleteAction({\n          documentId,\n          model,\n          collectionType,\n          params: { locale: document.locale },\n        });\n\n        if (!('error' in res)) {\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n        }\n      },\n    },\n  };\n};\n\nexport type LocaleStatus = {\n  locale: string;\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n};\n\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\n  action?: 'bulk-publish' | 'bulk-unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleAction\n *\n * This component is used to handle bulk publish and unpublish actions on locales.\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n  action,\n}: ExtendedDocumentActionProps) => {\n  const locale = document?.locale ?? null;\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const isOnPublishedTab = query.status === 'published';\n\n  const { formatMessage } = useIntl();\n  const { hasI18n, canPublish } = useI18n();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\n    React.useState<boolean>(false);\n\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\n    useDocumentActions();\n\n  const { schema, validate } = useDocument(\n    {\n      model,\n      collectionType,\n      documentId,\n      params: {\n        locale,\n      },\n    },\n    {\n      // No need to fetch the document, the data is already available in the `document` prop\n      skip: true,\n    }\n  );\n\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\n\n  const headers = [\n    {\n      label: formatMessage({\n        id: 'global.name',\n        defaultMessage: 'Name',\n      }),\n      name: 'name',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.status'),\n        defaultMessage: 'Status',\n      }),\n      name: 'status',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\n        defaultMessage: 'Publication Status',\n      }),\n      name: 'publication-status',\n    },\n  ];\n\n  // Extract the rows for the bulk locale publish modal and any validation\n  // errors per locale\n  const [rows, validationErrors] = React.useMemo(() => {\n    if (!document) {\n      return [[], {}];\n    }\n\n    const localizations = document.localizations ?? [];\n\n    // Build the rows for the bulk locale publish modal by combining the current\n    // document with all the available locales from the document meta\n    const locales: LocaleStatus[] = localizations.map((doc: any) => {\n      const { locale, status } = doc;\n      return { locale, status };\n    });\n\n    // Add the current document locale\n    locales.unshift({\n      locale: document.locale,\n      status: document.status,\n    });\n\n    // Build the validation errors for each locale.\n    const allDocuments = [document, ...localizations];\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\n      if (!document) {\n        return errs;\n      }\n\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\n      const validation = validate(document as Modules.Documents.AnyDocument);\n      if (validation !== null) {\n        errs[document.locale] = validation;\n      }\n      return errs;\n    }, {});\n\n    return [locales, errors];\n  }, [document, validate]);\n\n  const isBulkPublish = action === 'bulk-publish';\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\n    const isValidLocale =\n      // Validation errors are irrelevant if we are trying to unpublish\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\n\n    const shouldAddLocale = isBulkPublish\n      ? selectedRow.status !== 'published' && isValidLocale\n      : selectedRow.status !== 'draft' && isValidLocale;\n\n    if (shouldAddLocale) {\n      acc.push(selectedRow.locale);\n    }\n\n    return acc;\n  }, []);\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\n  const enableDraftRelationsCount = false;\n  const {\n    data: draftRelationsCount = 0,\n    isLoading: isDraftRelationsLoading,\n    error: isDraftRelationsError,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: [documentId!],\n      locale: localesForAction,\n    },\n    {\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (isDraftRelationsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(isDraftRelationsError),\n      });\n    }\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  if (!documentId) {\n    return null;\n  }\n\n  // This document action can be enabled given that draft and publish and i18n are\n  // enabled and we can publish the current locale.\n\n  const publish = async () => {\n    await publishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const unpublish = async () => {\n    await unpublishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const handleAction = async () => {\n    if (draftRelationsCount > 0) {\n      setIsDraftRelationConfirmationOpen(true);\n    } else if (isBulkPublish) {\n      await publish();\n    } else {\n      await unpublish();\n    }\n  };\n\n  if (isDraftRelationConfirmationOpen) {\n    return {\n      label: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      variant: 'danger',\n      dialog: {\n        onCancel: () => {\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        onConfirm: async () => {\n          await publish();\n\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        type: 'dialog',\n        title: formatMessage({\n          id: getTranslation('actions.publish.dialog.title'),\n          defaultMessage: 'Confirmation',\n        }),\n        content: (\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\n                defaultMessage:\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\n              })}\n            </Typography>\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\n                defaultMessage: 'Are you sure you want to continue?',\n              })}\n            </Typography>\n          </Flex>\n        ),\n      },\n    };\n  }\n\n  const hasPermission = selectedRows\n    .map(({ locale }) => locale)\n    .every((locale) => canPublish.includes(locale));\n\n  return {\n    label: formatMessage({\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n    }),\n    variant: isBulkPublish ? 'secondary' : 'danger',\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\n    disabled: isOnPublishedTab || canPublish.length === 0,\n    position: ['panel'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n      }),\n      content: () => {\n        return (\n          <Table.Root\n            headers={headers}\n            rows={rows.map((row) => ({\n              ...row,\n              id: row.locale,\n            }))}\n            selectedRows={selectedRows}\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\n          >\n            <BulkLocaleActionModal\n              validationErrors={validationErrors}\n              headers={headers}\n              rows={rows}\n              localesMetadata={localesMetadata as Locale[]}\n              action={action ?? 'bulk-publish'}\n            />\n          </Table.Root>\n        );\n      },\n      footer: () => (\n        <Modal.Footer justifyContent=\"flex-end\">\n          <Button\n            loading={isDraftRelationsLoading}\n            disabled={!hasPermission || localesForAction.length === 0}\n            variant=\"default\"\n            onClick={handleAction}\n          >\n            {formatMessage({\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocalePublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleUnpublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\n};\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledTrash = styled(Trash)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nexport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n  AITranslationStatusAction,\n};\n"],"names":["statusVariants","draft","published","modified","LocaleOption","isDraftAndPublishEnabled","locale","status","entryExists","formatMessage","useIntl","id","getTranslation","defaultMessage","bold","_jsx","b","name","_jsxs","Flex","width","gap","justifyContent","Typography","Status","display","paddingLeft","paddingRight","paddingTop","paddingBottom","size","variant","tag","fontWeight","capitalize","LocalePickerAction","document","meta","model","collectionType","documentId","query","setQuery","useQueryParams","hasI18n","canCreate","canRead","useI18n","data","locales","useGetLocalesQuery","currentDesiredLocale","plugins","i18n","schema","useDocument","params","handleSelect","React","useCallback","value","useEffect","Array","isArray","doesLocaleExist","find","loc","code","defaultLocale","isDefault","currentLocale","undefined","availableLocales","documentLocalizations","localizations","allLocalizations","length","allCurrentLocales","getDocumentStatus","displayedLocales","filter","includes","label","options","map","entryWithLocaleExists","some","doc","currentLocaleDoc","permissionsToCheck","disabled","draftAndPublish","startIcon","Plus","customizeContent","onSelect","docStatus","statuses","availableStatus","publishedAt","AITranslationStatusIcon","styled","theme","spaces","$isAISettingEnabled","colors","neutral150","neutral300","AITranslationStatusAction","isAIAvailable","useAIAvailability","settings","useGetSettingsQuery","isAISettingEnabled","aiLocalizations","hasAIFutureFlag","window","strapi","future","isEnabled","message","Box","height","aria-label","Boolean","Sparkle","tooltip","direction","padding","alignItems","enabled","Link","fontSize","NavLink","to","style","alignSelf","textAlign","FillFromAnotherLocaleAction","localeSelected","setLocaleSelected","useState","setValues","useForm","state","getDocument","useDocumentActions","components","l","fillFromLocale","onClose","response","cleanedData","cleanData","type","icon","Earth","dialog","title","content","_Fragment","Dialog","Body","WarningCircle","fill","Field","Root","Label","SingleSelect","placeholder","onChange","SingleSelectOption","Footer","Button","flex","onClick","DeleteLocaleAction","navigate","useNavigate","toggleNotification","useNotification","delete","deleteAction","isLoading","canDelete","position","StyledTrash","loading","onConfirm","unableToDelete","console","error","res","pathname","replace","BulkLocaleAction","action","useMemo","buildValidParams","isOnPublishedTab","canPublish","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","selectedRows","setSelectedRows","isDraftRelationConfirmationOpen","setIsDraftRelationConfirmationOpen","publishMany","publishManyAction","unpublishMany","unpublishManyAction","validate","skip","localesMetadata","skipToken","headers","rows","validationErrors","unshift","allDocuments","errors","reduce","errs","validation","isBulkPublish","localesForAction","acc","selectedRow","isValidLocale","Object","keys","shouldAddLocale","push","enableDraftRelationsCount","draftRelationsCount","isDraftRelationsLoading","isDraftRelationsError","useGetManyDraftRelationCountQuery","documentIds","publish","unpublish","handleAction","onCancel","hasPermission","every","ListPlus","Cross","Table","row","onSelectedRowsChange","tableSelectedRows","BulkLocaleActionModal","footer","Modal","BulkLocalePublishAction","props","BulkLocaleUnpublishAction","Trash"],"mappings":"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"}