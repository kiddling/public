{"version":3,"file":"ReleaseDetailsPage.js","sources":["../../../admin/src/pages/ReleaseDetailsPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  Menu,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error â€“ TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Layouts.Root>\n      <Main aria-busy={isLoadingDetails}>\n        <Layouts.Header\n          title={release.name}\n          subtitle={\n            <Flex gap={2} lineHeight={6}>\n              <Typography textColor=\"neutral600\" variant=\"epsilon\">\n                {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n              </Typography>\n              <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n            </Flex>\n          }\n          navigationAction={<BackButton fallback=\"..\" />}\n          primaryAction={\n            !release.releasedAt && (\n              <Flex gap={2}>\n                <SimpleMenuButton\n                  label={<More />}\n                  variant=\"tertiary\"\n                  endIcon={null}\n                  paddingLeft=\"7px\"\n                  paddingRight=\"7px\"\n                  aria-label={formatMessage({\n                    id: 'content-releases.header.actions.open-release-actions',\n                    defaultMessage: 'Release edit and delete menu',\n                  })}\n                  popoverPlacement=\"bottom-end\"\n                >\n                  <Menu.Item\n                    disabled={!canUpdate}\n                    onSelect={toggleEditReleaseModal}\n                    startIcon={<Pencil />}\n                  >\n                    {formatMessage({\n                      id: 'content-releases.header.actions.edit',\n                      defaultMessage: 'Edit',\n                    })}\n                  </Menu.Item>\n                  <Menu.Item\n                    disabled={!canDelete}\n                    onSelect={toggleWarningSubmit}\n                    variant=\"danger\"\n                    startIcon={<Trash />}\n                  >\n                    {formatMessage({\n                      id: 'content-releases.header.actions.delete',\n                      defaultMessage: 'Delete',\n                    })}\n                  </Menu.Item>\n                  <ReleaseInfoWrapper\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"flex-start\"\n                    gap={1}\n                    padding={4}\n                  >\n                    <Typography variant=\"pi\" fontWeight=\"bold\">\n                      {formatMessage({\n                        id: 'content-releases.header.actions.created',\n                        defaultMessage: 'Created',\n                      })}\n                    </Typography>\n                    <Typography variant=\"pi\" color=\"neutral300\">\n                      <RelativeTime timestamp={new Date(release.createdAt)} />\n                      {formatMessage(\n                        {\n                          id: 'content-releases.header.actions.created.description',\n                          defaultMessage:\n                            '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                        },\n                        { createdBy: getCreatedByUser(), hasCreatedByUser }\n                      )}\n                    </Typography>\n                  </ReleaseInfoWrapper>\n                </SimpleMenuButton>\n                <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                  {formatMessage({\n                    id: 'content-releases.header.actions.refresh',\n                    defaultMessage: 'Refresh',\n                  })}\n                </Button>\n                {canPublish ? (\n                  <Button\n                    size=\"S\"\n                    variant=\"default\"\n                    onClick={handlePublishRelease(release.id.toString())}\n                    loading={isPublishing}\n                    disabled={release.actions.meta.count === 0}\n                  >\n                    {formatMessage({\n                      id: 'content-releases.header.actions.publish',\n                      defaultMessage: 'Publish',\n                    })}\n                  </Button>\n                ) : null}\n              </Flex>\n            )\n          }\n        />\n        {children}\n      </Main>\n    </Layouts.Root>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={4} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        {releaseMeta?.pagination?.pageCount && releaseMeta.pagination.pageCount > 1 && (\n          <Pagination.Root\n            {...releaseMeta?.pagination}\n            defaultPageSize={releaseMeta?.pagination?.pageSize}\n          >\n            <Pagination.PageSize />\n            <Pagination.Links />\n          </Pagination.Root>\n        )}\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n"],"names":["ReleaseInfoWrapper","styled","Flex","theme","borderRadius","colors","neutral150","ReleaseDetailsLayout","toggleEditReleaseModal","toggleWarningSubmit","children","formatMessage","formatDate","formatTime","useIntl","releaseId","useParams","data","isLoading","isLoadingDetails","error","useGetReleaseQuery","id","skip","publishRelease","isPublishing","usePublishReleaseMutation","toggleNotification","useNotification","formatAPIError","useAPIErrorHandler","allowedActions","useRBAC","PERMISSIONS","canUpdate","canDelete","canPublish","dispatch","useTypedDispatch","trackUsage","useTracking","release","handlePublishRelease","response","type","message","defaultMessage","totalEntries","totalPublishedEntries","totalUnpublishedEntries","meta","isFetchError","handleRefresh","releaseApi","util","invalidateTags","getCreatedByUser","createdBy","username","firstname","lastname","trim","email","_jsx","Page","Loading","isBaseQueryError","Navigate","to","state","errors","code","actions","count","hasCreatedByUser","Boolean","isScheduled","scheduledAt","timezone","numberOfEntriesText","number","scheduledText","date","Date","weekday","day","month","year","timeZone","time","hourCycle","offset","getTimezoneOffset","Layouts","Root","_jsxs","Main","aria-busy","Header","title","name","subtitle","gap","lineHeight","Typography","textColor","variant","Badge","getBadgeProps","status","navigationAction","BackButton","fallback","primaryAction","releasedAt","SimpleMenuButton","label","More","endIcon","paddingLeft","paddingRight","aria-label","popoverPlacement","Menu","Item","disabled","onSelect","startIcon","Pencil","Trash","direction","justifyContent","alignItems","padding","fontWeight","color","RelativeTime","timestamp","createdAt","Button","size","onClick","toString","loading","SimpleMenu","GROUP_BY_OPTIONS","GROUP_BY_OPTIONS_NO_LOCALE","getGroupByOptionLabel","value","ReleaseDetailsBody","query","setQuery","useQueryParams","releaseData","isReleaseLoading","releaseError","runHookWaterfall","useStrapiApp","displayedHeaders","hasI18nEnabled","selectedGroupBy","groupBy","isFetching","isError","releaseActionsError","useGetReleaseActionsQuery","updateReleaseAction","useUpdateReleaseActionMutation","handleChangeType","e","actionId","actionPath","params","body","target","releaseActions","releaseMeta","contentTypes","components","errorsArray","push","Error","Object","keys","length","Content","EmptyStateLayout","action","LinkButton","tag","ReactRouterLink","pathname","style","textDecoration","icon","EmptyDocuments","width","content","groupByLabel","headers","options","SingleSelect","placeholder","customizeContent","onChange","map","option","SingleSelectOption","key","role","Table","rows","item","Number","entry","Head","HeaderCell","Body","contentType","locale","actionIndex","Tr","Td","maxWidth","ellipsis","mainFieldValue","displayName","isPublish","b","ReleaseActionOptions","selected","handleChange","_Fragment","minWidth","EntryValidationPopover","schema","uid","ReleaseActionMenu","ReleaseActionEntryLinkItem","contentTypeUid","documentId","DeleteReleaseActionItem","pagination","pageCount","Pagination","defaultPageSize","pageSize","PageSize","Links","ReleaseDetailsPage","navigate","useNavigate","releaseModalShown","setReleaseModalShown","React","useState","showWarningSubmit","setWarningSubmit","isSuccess","isSuccessDetails","dataTimezone","isLoadingTimezone","useGetReleaseSettingsQuery","updateRelease","isSubmittingForm","useUpdateReleaseMutation","deleteRelease","useDeleteReleaseMutation","prev","getTimezoneValue","defaultTimezone","prevState","utcToZonedTime","format","undefined","handleEditRelease","values","handleDeleteRelease","ReleaseModal","open","handleClose","handleSubmit","initialValues","Dialog","onOpenChange","ConfirmDialog","onConfirm"],"mappings":"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"}