{"version":3,"file":"Chat.js","sources":["../../../../admin/src/components/AIChat/Chat.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { tours, useTracking, useGuidedTour, useAppInfo } from '@strapi/admin/strapi-admin';\nimport { Flex, IconButton, Button, Typography, Box } from '@strapi/design-system';\nimport { Sparkle, ArrowUp, Plus, Paperclip, Upload, Code } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nimport { Alert } from './components/Alert';\nimport { AnimatedBox } from './components/AnimatedBox';\nimport { AttachmentPreview } from './components/Attachments/AttachmentPreview';\nimport { Dropzone } from './components/Dropzone';\nimport { Panel } from './components/FloatingPanel';\nimport { FigmaIcon } from './components/icons/FigmaIcon';\nimport { StopIcon } from './components/icons/StopIcon';\nimport { Input } from './components/Input';\nimport { ChatMessage } from './components/Messages/Message';\nimport { ResizableTextArea } from './components/ResizableTextArea';\nimport { MenuItem, SimpleMenu } from './components/SimpleMenu';\nimport {\n  CHAT_TOO_LONG_ERROR,\n  LICENSE_LIMIT_REACHED_ERROR,\n  TOO_MANY_REQUESTS_ERROR,\n  LICENSE_LIMIT_EXCEEDED_ERROR,\n} from './hooks/useAIFetch';\nimport { useAttachments } from './hooks/useAttachments';\nimport { useTranslations } from './hooks/useTranslations';\nimport { AIMessage } from './lib/types/messages';\nimport { useStrapiChat } from './providers/ChatProvider';\nimport { useUploadProjectToChat } from './UploadCodeModal';\nimport { useUploadFigmaToChat } from './UploadFigmaModal';\n\n/* -------------------------------------------------------------------------------------------------\n * Chat Message Suggestions\n * -----------------------------------------------------------------------------------------------*/\nconst ResponsiveFlex = styled(Flex)`\n  @media (max-height: 500px) {\n    display: none;\n  }\n`;\n\nconst ChatSuggestions = () => {\n  const { sendMessage } = useStrapiChat();\n  const { t } = useTranslations();\n  const { trackUsage } = useTracking();\n\n  const SUGGESTIONS = [\n    t('chat.input.defaults.generate', 'Generate a product schema'),\n    t('chat.input.defaults.ctb', 'Tell me about the Content-Type Builder'),\n    t('chat.input.defaults.strapi', 'Tell me about Strapi'),\n  ] as const;\n\n  const SUGGESTION_TO_PROMPT_TYPE = {\n    [t('chat.input.defaults.generate', 'Generate a product schema')]: 'generate-product-schema',\n    [t('chat.input.defaults.ctb', 'Tell me about the Content-Type Builder')]:\n      'tell-me-about-the-content-type-builder',\n    [t('chat.input.defaults.strapi', 'Tell me about Strapi')]: 'tell-me-about-strapi',\n  } as const;\n\n  const suggestionsTitle = t('chat.input.defaults.title', 'How can I help you?');\n\n  return (\n    <AnimatedBox>\n      <ResponsiveFlex direction=\"column\" alignItems={'flex-start'} gap={3}>\n        <Typography variant=\"omega\" fontWeight=\"bold\">\n          {suggestionsTitle}\n        </Typography>\n        <Flex direction=\"column\" alignItems={'flex-start'} gap={2}>\n          {SUGGESTIONS.map((suggestion) => (\n            <Button\n              key={suggestion}\n              startIcon={<Sparkle fill=\"neutral500\" />}\n              size=\"M\"\n              variant=\"tertiary\"\n              onClick={() => {\n                trackUsage('didUsePresetPrompt', {\n                  promptType: SUGGESTION_TO_PROMPT_TYPE[suggestion],\n                });\n\n                sendMessage({ text: suggestion });\n              }}\n            >\n              <Typography fontWeight=\"regular\">{suggestion}</Typography>\n            </Button>\n          ))}\n        </Flex>\n      </ResponsiveFlex>\n    </AnimatedBox>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Chat Errors\n * -----------------------------------------------------------------------------------------------*/\nconst getErrorMessage = (err: Error) => {\n  try {\n    const error = JSON.parse(err.message);\n    return error.error;\n  } catch (e) {\n    return err;\n  }\n};\n\nconst ChatError = () => {\n  const { error } = useStrapiChat();\n  const { t } = useTranslations();\n\n  const defaultErrorMessage = t('chat.messages.error', 'Something went wrong.');\n  const tooManyRequestsMessage = t(\n    'chat.messages.too-many-requests',\n    'Too many requests, please try again later.'\n  );\n  const licenseLimitReachedMessage = t(\n    'chat.messages.license-limit-reached',\n    'License limit reached, please try again tomorrow.'\n  );\n  const licenseLimitExceededMessage = t(\n    'chat.messages.license-limit-exceeded',\n    'AI credit limit exceeded.'\n  );\n  const chatTooLongError = t(\n    'chat.messages.too-long-error',\n    'This conversation reached its maximum length. Start a new conversation'\n  );\n\n  if (!error) return null;\n\n  const errorMessage = getErrorMessage(error);\n  if (!errorMessage || typeof errorMessage !== 'string') {\n    return null;\n  }\n\n  if (errorMessage === TOO_MANY_REQUESTS_ERROR) {\n    return <Alert title={tooManyRequestsMessage} variant=\"warning\" />;\n  }\n\n  if (errorMessage === LICENSE_LIMIT_REACHED_ERROR) {\n    return <Alert title={licenseLimitReachedMessage} variant=\"warning\" />;\n  }\n\n  if (errorMessage.split('.')[0] === LICENSE_LIMIT_EXCEEDED_ERROR) {\n    return <Alert title={licenseLimitExceededMessage} variant=\"danger\" />;\n  }\n\n  if (errorMessage === CHAT_TOO_LONG_ERROR) {\n    return <Alert title={chatTooLongError} variant=\"danger\" />;\n  }\n\n  return <Alert title={defaultErrorMessage} variant=\"danger\" />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Chat Messages\n * -----------------------------------------------------------------------------------------------*/\nconst ChatContent: React.FC<{\n  messages: AIMessage[];\n}> = ({ messages }) => {\n  const messageEndRef = useRef<HTMLDivElement>(null);\n  const { status } = useStrapiChat();\n\n  // Scroll to the bottom of the chat when new messages arrive\n  useEffect(() => {\n    // Add a small delay to ensure all message content is fully rendered\n    // including conditionally rendered elements like feedback buttons\n    const scrollTimeout = setTimeout(() => {\n      messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, 20);\n\n    return () => clearTimeout(scrollTimeout);\n  }, [messages, status]);\n\n  return (\n    <>\n      <Flex direction=\"column\" gap={5}>\n        {messages.map((message, idx) => (\n          <ChatMessage\n            key={message.id}\n            message={message}\n            // Chat loading and message is the last one\n            isLoading={\n              (status === 'streaming' || status === 'submitted') && idx === messages.length - 1\n            }\n          />\n        ))}\n        {status === 'error' && <ChatError />}\n      </Flex>\n      <div ref={messageEndRef} />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Attachments\n * -----------------------------------------------------------------------------------------------*/\nconst ChatAttachmentList = () => {\n  const { attachments, removeAttachmentByIndex } = useAttachments();\n\n  if (!attachments.length) return null;\n\n  return (\n    <Input.Attachments>\n      {attachments.map((attachment, index) => (\n        <Box key={attachment.filename} maxWidth={'250px'}>\n          <AttachmentPreview\n            attachment={attachment}\n            onRemove={() => removeAttachmentByIndex(index)}\n          />\n        </Box>\n      ))}\n    </Input.Attachments>\n  );\n};\n\nconst ChatAttachmentMenu = () => {\n  const { attachFiles } = useAttachments();\n  const { openCodeUpload } = useUploadProjectToChat();\n  const { openFigmaUpload } = useUploadFigmaToChat();\n  const { t } = useTranslations();\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const uploadLabel = t('chat.tooltips.upload-attachments', 'Upload attachments');\n  const importCodeText = t('chat.attachments.menu.import-code', 'Import code');\n  const attachImageText = t('chat.attachments.menu.attach-image', 'Attach image');\n  const importFigmaText = t('chat.attachments.menu.import-figma', 'Import from Figma');\n\n  return (\n    <SimpleMenu\n      label={uploadLabel}\n      icon={<Paperclip />}\n      tag={IconButton}\n      popoverPlacement=\"top-end\"\n    >\n      <MenuItem startIcon={<Code />} onSelect={() => openCodeUpload()}>\n        {importCodeText}\n      </MenuItem>\n\n      <MenuItem startIcon={<FigmaIcon />} onSelect={() => openFigmaUpload()}>\n        {importFigmaText}\n      </MenuItem>\n\n      <input type=\"file\" accept=\"image/*\" multiple hidden ref={fileInputRef} />\n      <MenuItem\n        startIcon={<Upload />}\n        onSelect={() => {\n          const fileInput = fileInputRef.current;\n          if (!fileInput) return;\n          fileInput.onchange = (e) => {\n            const target = e.target as HTMLInputElement;\n            if (target.files && target.files.length > 0) {\n              attachFiles(Array.from(target.files));\n            }\n          };\n\n          fileInput.click();\n        }}\n      >\n        {attachImageText}\n      </MenuItem>\n    </SimpleMenu>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Input\n * -----------------------------------------------------------------------------------------------*/\n\nconst LoadingDots = ({ children }: { children: string }) => {\n  const [dots, setDots] = useState('');\n\n  useEffect(() => {\n    const dotStates = ['', '.', '..', '...'];\n    let currentIndex = 0;\n\n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % dotStates.length;\n      setDots(dotStates[currentIndex]);\n    }, 400); // Change every 400ms\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Typography variant=\"pi\" textColor=\"neutral600\">\n      {children}\n      {dots}\n    </Typography>\n  );\n};\n\nconst ChatInput = (props: React.FormHTMLAttributes<HTMLFormElement>) => {\n  const { input, handleSubmit, handleInputChange, messages, status, stop, attachments } =\n    useStrapiChat();\n  const { t } = useTranslations();\n\n  const isLoading = status === 'streaming' || status === 'submitted';\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} {...props}>\n        <Input.Root isLoading={isLoading} gap={4}>\n          <Input.Header minHeight={0}>\n            {messages.length === 0 && (\n              <Input.HeaderItem>\n                <ChatSuggestions />\n              </Input.HeaderItem>\n            )}\n            {isLoading && (\n              <Input.HeaderItem>\n                <LoadingDots>{t('chat.input.thinking', 'Strapi AI is thinking')}</LoadingDots>\n              </Input.HeaderItem>\n            )}\n          </Input.Header>\n          <Input.Content>\n            <Dropzone.Area />\n            <ChatAttachmentList />\n            <Box paddingBottom={3}>\n              <ResizableTextArea\n                value={input}\n                onChange={handleInputChange}\n                onSubmit={handleSubmit}\n                placeholder={t('chat.input.placeholder', 'Ask Strapi AI...')}\n              />\n            </Box>\n            <Input.Actions>\n              <ChatAttachmentMenu />\n\n              {isLoading ? (\n                <IconButton\n                  label={t('chat.tooltips.stop-generation', 'Stop')}\n                  type=\"button\"\n                  variant=\"default\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    stop();\n                  }}\n                >\n                  <StopIcon />\n                </IconButton>\n              ) : (\n                <IconButton\n                  label={t('chat.tooltips.send-message', 'Send')}\n                  variant=\"default\"\n                  // allow sending an empty message if there are attachments\n                  disabled={input.trim().length === 0 && attachments.length === 0}\n                >\n                  <ArrowUp />\n                </IconButton>\n              )}\n            </Input.Actions>\n          </Input.Content>\n        </Input.Root>\n      </form>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Chat\n * -----------------------------------------------------------------------------------------------*/\n\nconst Chat = () => {\n  const { title, messages, isChatOpen, isChatEnabled, openChat, closeChat, reset } =\n    useStrapiChat();\n  const { attachFiles } = useAttachments();\n  const { t } = useTranslations();\n  const state = useGuidedTour('Chat', (s) => s.state);\n  const currentEnvironment = useAppInfo('Chat', (state) => state.currentEnvironment);\n\n  // Disable AI Chat in production mode\n  const isProduction = currentEnvironment === 'production';\n\n  // Auto-open chat when AIChat guided tour step is active\n  useEffect(() => {\n    const isAIChatStepActive =\n      state.enabled &&\n      state.tours.contentTypeBuilder?.currentStep === 1 && // AIChat is step 1 in contentTypeBuilderStepsAI\n      !state.tours.contentTypeBuilder?.isCompleted;\n\n    if (isAIChatStepActive && !isChatOpen && openChat) {\n      openChat();\n    }\n  }, [\n    state.tours.contentTypeBuilder?.currentStep,\n    state.tours.contentTypeBuilder?.isCompleted,\n    state.enabled,\n    isChatOpen,\n    openChat,\n  ]);\n\n  // Labels\n  const openChatLabel = t('chat.tooltips.open-chat', 'Open chat');\n  const closeChatLabel = t('chat.tooltips.close-chat', 'Close chat');\n  const createChatLabel = t('chat.tooltips.create-chat', 'New conversation');\n  const defaultTitle = t('chat.header.default-title', 'New conversation');\n  const mistakesDisclaimer = t(\n    'chat.input.strapi-ai-can-make-errors',\n    'Strapi AI can make mistakes.'\n  );\n\n  // Don't render the chat at all in production mode or if chat is not enabled\n  if (!isChatEnabled || isProduction) {\n    return null;\n  }\n\n  return (\n    <Dropzone.Root\n      onAddFiles={(files) => {\n        attachFiles(files);\n      }}\n    >\n      <Panel.Root\n        size=\"md\"\n        position=\"bottom-right\"\n        isOpen={isChatOpen}\n        onToggle={isChatOpen ? closeChat : openChat}\n        toggleIcon={\n          <IconButton\n            onClick={isChatOpen ? closeChat : openChat}\n            label={isChatOpen ? closeChatLabel : openChatLabel}\n            variant=\"default\"\n          >\n            <Sparkle />\n          </IconButton>\n        }\n      >\n        <Panel.Header>\n          <Typography tag=\"h3\" variant=\"omega\" fontWeight=\"bold\">\n            {title || defaultTitle}\n          </Typography>\n          <Flex gap={0}>\n            <IconButton label={createChatLabel} variant=\"ghost\" onClick={reset}>\n              <Plus />\n            </IconButton>\n            <Panel.Close label={closeChatLabel} />\n          </Flex>\n        </Panel.Header>\n\n        <Panel.Body>\n          <tours.contentTypeBuilder.AIChat>\n            {!messages.length ? (\n              <Typography variant=\"pi\" textColor=\"neutral600\">\n                {mistakesDisclaimer}\n              </Typography>\n            ) : null}\n            <ChatContent messages={messages} />\n          </tours.contentTypeBuilder.AIChat>\n        </Panel.Body>\n\n        <Panel.Footer>\n          <ChatInput />\n        </Panel.Footer>\n      </Panel.Root>\n    </Dropzone.Root>\n  );\n};\n\nexport { Chat };\n"],"names":["ResponsiveFlex","styled","Flex","ChatSuggestions","sendMessage","useStrapiChat","t","useTranslations","trackUsage","useTracking","SUGGESTIONS","SUGGESTION_TO_PROMPT_TYPE","suggestionsTitle","_jsx","AnimatedBox","_jsxs","direction","alignItems","gap","Typography","variant","fontWeight","map","suggestion","Button","startIcon","Sparkle","fill","size","onClick","promptType","text","getErrorMessage","err","error","JSON","parse","message","e","ChatError","defaultErrorMessage","tooManyRequestsMessage","licenseLimitReachedMessage","licenseLimitExceededMessage","chatTooLongError","errorMessage","TOO_MANY_REQUESTS_ERROR","Alert","title","LICENSE_LIMIT_REACHED_ERROR","split","LICENSE_LIMIT_EXCEEDED_ERROR","CHAT_TOO_LONG_ERROR","ChatContent","messages","messageEndRef","useRef","status","useEffect","scrollTimeout","setTimeout","current","scrollIntoView","behavior","clearTimeout","_Fragment","idx","ChatMessage","isLoading","length","id","div","ref","ChatAttachmentList","attachments","removeAttachmentByIndex","useAttachments","Input","Attachments","attachment","index","Box","maxWidth","AttachmentPreview","onRemove","filename","ChatAttachmentMenu","attachFiles","openCodeUpload","useUploadProjectToChat","openFigmaUpload","useUploadFigmaToChat","fileInputRef","uploadLabel","importCodeText","attachImageText","importFigmaText","SimpleMenu","label","icon","Paperclip","tag","IconButton","popoverPlacement","MenuItem","Code","onSelect","FigmaIcon","input","type","accept","multiple","hidden","Upload","fileInput","onchange","target","files","Array","from","click","LoadingDots","children","dots","setDots","useState","dotStates","currentIndex","interval","setInterval","clearInterval","textColor","ChatInput","props","handleSubmit","handleInputChange","stop","form","onSubmit","Root","Header","minHeight","HeaderItem","Content","Dropzone","Area","paddingBottom","ResizableTextArea","value","onChange","placeholder","Actions","preventDefault","StopIcon","disabled","trim","ArrowUp","Chat","isChatOpen","isChatEnabled","openChat","closeChat","reset","state","useGuidedTour","s","currentEnvironment","useAppInfo","isProduction","isAIChatStepActive","enabled","tours","contentTypeBuilder","currentStep","isCompleted","openChatLabel","closeChatLabel","createChatLabel","defaultTitle","mistakesDisclaimer","onAddFiles","Panel","position","isOpen","onToggle","toggleIcon","Plus","Close","Body","AIChat","Footer"],"mappings":"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"}