{"version":3,"file":"toCTB.mjs","sources":["../../../../../../../admin/src/components/AIChat/lib/transforms/schemas/toCTB.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport pluralize from 'pluralize';\n\nimport { Schema } from '../../types/schema';\n\nimport type { ContentType, Component, AnyAttribute } from '../../../../../types';\n\nconst ACTION_TO_STATUS: Record<Schema['action'], ContentType['status']> = {\n  create: 'NEW',\n  remove: 'REMOVED',\n  update: 'CHANGED',\n};\n\n/**\n * Creates a new attribute with the specified status\n */\nconst createAttributeWithStatus = (\n  name: string,\n  attributeData: Record<string, any>,\n  status: AnyAttribute['status']\n): AnyAttribute =>\n  ({\n    ...attributeData,\n    name,\n    status,\n  }) as AnyAttribute;\n\n/**\n * Determines the status of an attribute by comparing new and old versions\n */\nconst determineAttributeStatus = (\n  newAttr: Record<string, any>,\n  oldAttr?: AnyAttribute,\n  oldSchema?: ContentType | Component\n): AnyAttribute['status'] => {\n  if (!oldAttr) {\n    return 'NEW';\n  }\n\n  // If the schema was already new, don't mark attributes as changed, keep them as new.\n  if (oldSchema?.status === 'NEW') {\n    return 'NEW';\n  }\n\n  // Compare attributes without the status field to determine if they've changed\n  const newAttrWithoutStatus = omit(newAttr, ['status']);\n  const oldAttrWithoutStatus = omit(oldAttr, ['status']);\n\n  if (!isEqual(newAttrWithoutStatus, oldAttrWithoutStatus)) {\n    return 'CHANGED';\n  }\n\n  // If unchanged, keep the previous status\n  return oldAttr.status;\n};\n\n/**\n * Determines the status of a schema by comparing action and checking if oldSchema exists\n */\nconst transformStatusFromChatToCTB = (\n  schema: Schema,\n  oldSchema?: ContentType | Component\n): ContentType['status'] => {\n  // If schema has an action, use the mapped status\n  if (schema.action) {\n    return ACTION_TO_STATUS[schema.action];\n  }\n\n  // If oldSchema doesn't exist, it's a new schema\n  if (!oldSchema) {\n    return 'NEW';\n  }\n\n  // If no action is specified and oldSchema exists, keep the existing status\n  return oldSchema.status;\n};\n\n/**\n * Transform attributes from Chat format to CTB format\n * Also performs a diff to determine the status of each attribute\n */\nexport const transformAttributesFromChatToCTB = (\n  { action, attributes }: Schema,\n  oldSchema?: ContentType | Component\n): AnyAttribute[] => {\n  // If it's a new schema or no oldAttributes provided, all attributes are NEW\n  if (action === 'create' || !oldSchema) {\n    return Object.entries(attributes).map(([name, attribute]) =>\n      createAttributeWithStatus(name, attribute, 'NEW')\n    );\n  }\n\n  // Convert old attributes array to a lookup map for faster access\n  const oldAttributesMap = oldSchema.attributes.reduce(\n    (acc, attr) => ({ ...acc, [attr.name]: attr }),\n    {} as Record<string, AnyAttribute>\n  );\n\n  // Process current attributes (new and changed)\n  const processedAttributes = Object.entries(attributes).map(([name, attr]) => {\n    const oldAttr = oldAttributesMap[name];\n    const status = determineAttributeStatus({ ...attr, name }, oldAttr, oldSchema);\n\n    return createAttributeWithStatus(name, attr, status);\n  });\n\n  // No need to mark removed attributes if the old schema is new, just remove it from the list\n  // TODO: Else a validation error occurs on the backend side.\n  if (oldSchema?.status === 'NEW') {\n    return processedAttributes;\n  }\n\n  // Find removed attributes (exist in old but not in new)\n  const removedAttributes = Object.entries(oldAttributesMap)\n    .filter(([name]) => !attributes[name])\n    .map(([name, oldAttr]) => createAttributeWithStatus(name, oldAttr, 'REMOVED'));\n\n  // Combine both sets of attributes\n  return [...processedAttributes, ...removedAttributes];\n};\n\n/**\n * Transform schema format\n *  AI chat -> CTB\n *\n * The AI chat returns a simplified format, and this layer transforms it to be compatible with the CTB reducer.\n *\n * We need to keep track of which changes have been made\n */\nexport const transformChatToCTB = (\n  schema: Schema,\n  oldSchema?: ContentType | Component\n): ContentType | Component => {\n  const singularName = pluralize.singular(schema.name).toLowerCase().replace(/ /g, '-');\n  const pluralName = pluralize.plural(schema.name).toLowerCase().replace(/ /g, '-');\n\n  if (schema.modelType === 'component') {\n    return {\n      category: schema.category || 'default',\n      modelName: singularName,\n      attributes: transformAttributesFromChatToCTB(schema, oldSchema),\n      info: {\n        displayName: schema.name,\n        description: schema.description,\n        // TODO\n        // icon: schema.icon,\n      },\n      modelType: schema.modelType,\n      uid: schema.uid as any,\n      collectionName: pluralName,\n      status: transformStatusFromChatToCTB(schema, oldSchema),\n      globalId: singularName,\n    } satisfies Component;\n  }\n\n  return {\n    uid: schema.uid as any,\n    modelType: schema.modelType,\n    modelName: singularName,\n    kind: schema.kind!,\n    info: {\n      displayName: schema.name.charAt(0).toUpperCase() + schema.name.slice(1),\n      // Always keep the old by default\n      // @ts-expect-error - not in types\n      singularName: oldSchema?.info?.singularName || singularName,\n      // Always keep the old by default\n      // @ts-expect-error - not in types\n      pluralName: oldSchema?.info?.pluralName || pluralName,\n    },\n    collectionName: pluralName,\n    attributes: transformAttributesFromChatToCTB(schema, oldSchema),\n    options: {\n      draftAndPublish: schema.options?.draftAndPublish ?? false,\n    },\n    pluginOptions: {\n      i18n: {\n        localized: schema.options?.localized ?? false,\n      },\n    },\n    visible: true,\n    status: transformStatusFromChatToCTB(schema, oldSchema),\n    globalId: singularName,\n    restrictRelationsTo: null, // TODO: not sure what this is about\n  } satisfies ContentType;\n};\n"],"names":["ACTION_TO_STATUS","create","remove","update","createAttributeWithStatus","name","attributeData","status","determineAttributeStatus","newAttr","oldAttr","oldSchema","newAttrWithoutStatus","omit","oldAttrWithoutStatus","isEqual","transformStatusFromChatToCTB","schema","action","transformAttributesFromChatToCTB","attributes","Object","entries","map","attribute","oldAttributesMap","reduce","acc","attr","processedAttributes","removedAttributes","filter","transformChatToCTB","singularName","pluralize","singular","toLowerCase","replace","pluralName","plural","modelType","category","modelName","info","displayName","description","uid","collectionName","globalId","kind","charAt","toUpperCase","slice","options","draftAndPublish","pluginOptions","i18n","localized","visible","restrictRelationsTo"],"mappings":";;;;AAAA;AASA,MAAMA,gBAAoE,GAAA;IACxEC,MAAQ,EAAA,KAAA;IACRC,MAAQ,EAAA,SAAA;IACRC,MAAQ,EAAA;AACV,CAAA;AAEA;;AAEC,IACD,MAAMC,yBAA4B,GAAA,CAChCC,IACAC,EAAAA,aAAAA,EACAC,UAEC;AACC,QAAA,GAAGD,aAAa;AAChBD,QAAAA,IAAAA;AACAE,QAAAA;KACF,CAAA;AAEF;;AAEC,IACD,MAAMC,wBAAAA,GAA2B,CAC/BC,OAAAA,EACAC,OACAC,EAAAA,SAAAA,GAAAA;AAEA,IAAA,IAAI,CAACD,OAAS,EAAA;QACZ,OAAO,KAAA;AACT;;IAGA,IAAIC,SAAAA,EAAWJ,WAAW,KAAO,EAAA;QAC/B,OAAO,KAAA;AACT;;IAGA,MAAMK,oBAAAA,GAAuBC,KAAKJ,OAAS,EAAA;AAAC,QAAA;AAAS,KAAA,CAAA;IACrD,MAAMK,oBAAAA,GAAuBD,KAAKH,OAAS,EAAA;AAAC,QAAA;AAAS,KAAA,CAAA;IAErD,IAAI,CAACK,OAAQH,CAAAA,oBAAAA,EAAsBE,oBAAuB,CAAA,EAAA;QACxD,OAAO,SAAA;AACT;;AAGA,IAAA,OAAOJ,QAAQH,MAAM;AACvB,CAAA;AAEA;;IAGA,MAAMS,4BAA+B,GAAA,CACnCC,MACAN,EAAAA,SAAAA,GAAAA;;IAGA,IAAIM,MAAAA,CAAOC,MAAM,EAAE;AACjB,QAAA,OAAOlB,gBAAgB,CAACiB,MAAOC,CAAAA,MAAM,CAAC;AACxC;;AAGA,IAAA,IAAI,CAACP,SAAW,EAAA;QACd,OAAO,KAAA;AACT;;AAGA,IAAA,OAAOA,UAAUJ,MAAM;AACzB,CAAA;AAEA;;;UAIaY,gCAAmC,GAAA,CAC9C,EAAED,MAAM,EAAEE,UAAU,EAAU,EAC9BT,SAAAA,GAAAA;;IAGA,IAAIO,MAAAA,KAAW,QAAY,IAAA,CAACP,SAAW,EAAA;AACrC,QAAA,OAAOU,MAAOC,CAAAA,OAAO,CAACF,UAAAA,CAAAA,CAAYG,GAAG,CAAC,CAAC,CAAClB,IAAMmB,EAAAA,SAAAA,CAAU,GACtDpB,yBAAAA,CAA0BC,MAAMmB,SAAW,EAAA,KAAA,CAAA,CAAA;AAE/C;;IAGA,MAAMC,gBAAAA,GAAmBd,UAAUS,UAAU,CAACM,MAAM,CAClD,CAACC,GAAKC,EAAAA,IAAAA,IAAU;AAAE,YAAA,GAAGD,GAAG;YAAE,CAACC,IAAAA,CAAKvB,IAAI,GAAGuB;AAAK,SAAA,GAC5C,EAAC,CAAA;;IAIH,MAAMC,mBAAAA,GAAsBR,MAAOC,CAAAA,OAAO,CAACF,UAAAA,CAAAA,CAAYG,GAAG,CAAC,CAAC,CAAClB,IAAAA,EAAMuB,IAAK,CAAA,GAAA;QACtE,MAAMlB,OAAAA,GAAUe,gBAAgB,CAACpB,IAAK,CAAA;AACtC,QAAA,MAAME,SAASC,wBAAyB,CAAA;AAAE,YAAA,GAAGoB,IAAI;AAAEvB,YAAAA;AAAK,SAAA,EAAGK,OAASC,EAAAA,SAAAA,CAAAA;QAEpE,OAAOP,yBAAAA,CAA0BC,MAAMuB,IAAMrB,EAAAA,MAAAA,CAAAA;AAC/C,KAAA,CAAA;;;IAIA,IAAII,SAAAA,EAAWJ,WAAW,KAAO,EAAA;QAC/B,OAAOsB,mBAAAA;AACT;;IAGA,MAAMC,iBAAAA,GAAoBT,MAAOC,CAAAA,OAAO,CAACG,gBAAAA,CAAAA,CACtCM,MAAM,CAAC,CAAC,CAAC1B,IAAAA,CAAK,GAAK,CAACe,UAAU,CAACf,IAAAA,CAAK,CACpCkB,CAAAA,GAAG,CAAC,CAAC,CAAClB,IAAAA,EAAMK,OAAQ,CAAA,GAAKN,yBAA0BC,CAAAA,IAAAA,EAAMK,OAAS,EAAA,SAAA,CAAA,CAAA;;IAGrE,OAAO;AAAImB,QAAAA,GAAAA,mBAAAA;AAAwBC,QAAAA,GAAAA;AAAkB,KAAA;AACvD;AAEA;;;;;;;AAOC,IACM,MAAME,kBAAqB,GAAA,CAChCf,MACAN,EAAAA,SAAAA,GAAAA;IAEA,MAAMsB,YAAAA,GAAeC,SAAUC,CAAAA,QAAQ,CAAClB,MAAAA,CAAOZ,IAAI,CAAA,CAAE+B,WAAW,EAAA,CAAGC,OAAO,CAAC,IAAM,EAAA,GAAA,CAAA;IACjF,MAAMC,UAAAA,GAAaJ,SAAUK,CAAAA,MAAM,CAACtB,MAAAA,CAAOZ,IAAI,CAAA,CAAE+B,WAAW,EAAA,CAAGC,OAAO,CAAC,IAAM,EAAA,GAAA,CAAA;IAE7E,IAAIpB,MAAAA,CAAOuB,SAAS,KAAK,WAAa,EAAA;QACpC,OAAO;YACLC,QAAUxB,EAAAA,MAAAA,CAAOwB,QAAQ,IAAI,SAAA;YAC7BC,SAAWT,EAAAA,YAAAA;AACXb,YAAAA,UAAAA,EAAYD,iCAAiCF,MAAQN,EAAAA,SAAAA,CAAAA;YACrDgC,IAAM,EAAA;AACJC,gBAAAA,WAAAA,EAAa3B,OAAOZ,IAAI;AACxBwC,gBAAAA,WAAAA,EAAa5B,OAAO4B;AAGtB,aAAA;AACAL,YAAAA,SAAAA,EAAWvB,OAAOuB,SAAS;AAC3BM,YAAAA,GAAAA,EAAK7B,OAAO6B,GAAG;YACfC,cAAgBT,EAAAA,UAAAA;AAChB/B,YAAAA,MAAAA,EAAQS,6BAA6BC,MAAQN,EAAAA,SAAAA,CAAAA;YAC7CqC,QAAUf,EAAAA;AACZ,SAAA;AACF;IAEA,OAAO;AACLa,QAAAA,GAAAA,EAAK7B,OAAO6B,GAAG;AACfN,QAAAA,SAAAA,EAAWvB,OAAOuB,SAAS;QAC3BE,SAAWT,EAAAA,YAAAA;AACXgB,QAAAA,IAAAA,EAAMhC,OAAOgC,IAAI;QACjBN,IAAM,EAAA;AACJC,YAAAA,WAAAA,EAAa3B,MAAOZ,CAAAA,IAAI,CAAC6C,MAAM,CAAC,CAAA,CAAA,CAAGC,WAAW,EAAA,GAAKlC,MAAOZ,CAAAA,IAAI,CAAC+C,KAAK,CAAC,CAAA,CAAA;;;YAGrEnB,YAActB,EAAAA,SAAAA,EAAWgC,MAAMV,YAAgBA,IAAAA,YAAAA;;;YAG/CK,UAAY3B,EAAAA,SAAAA,EAAWgC,MAAML,UAAcA,IAAAA;AAC7C,SAAA;QACAS,cAAgBT,EAAAA,UAAAA;AAChBlB,QAAAA,UAAAA,EAAYD,iCAAiCF,MAAQN,EAAAA,SAAAA,CAAAA;QACrD0C,OAAS,EAAA;YACPC,eAAiBrC,EAAAA,MAAAA,CAAOoC,OAAO,EAAEC,eAAmB,IAAA;AACtD,SAAA;QACAC,aAAe,EAAA;YACbC,IAAM,EAAA;gBACJC,SAAWxC,EAAAA,MAAAA,CAAOoC,OAAO,EAAEI,SAAa,IAAA;AAC1C;AACF,SAAA;QACAC,OAAS,EAAA,IAAA;AACTnD,QAAAA,MAAAA,EAAQS,6BAA6BC,MAAQN,EAAAA,SAAAA,CAAAA;QAC7CqC,QAAUf,EAAAA,YAAAA;QACV0B,mBAAqB,EAAA;AACvB,KAAA;AACF;;;;"}