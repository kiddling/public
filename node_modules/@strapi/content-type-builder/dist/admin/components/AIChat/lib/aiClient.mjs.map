{"version":3,"file":"aiClient.mjs","sources":["../../../../../admin/src/components/AIChat/lib/aiClient.ts"],"sourcesContent":["import { getFetchClient } from '@strapi/admin/strapi-admin';\n\n/**\n * Centralized AI client utilities:\n * - Token retrieval via admin endpoint using getFetchClient\n * - In-memory + sessionStorage caching with near-expiry buffer\n * - Safe JSON parsing for error handling\n * - Single-retry policy on token invalidation\n */\n\nexport interface AITokenData {\n  token: string;\n  expiresAt: string;\n}\n\nlet aiTokenCache: AITokenData | null = null;\nconst SESSION_STORAGE_KEY = 'strapi-ai-token';\nconst EXPIRY_BUFFER_MS = 60 * 1000;\n\nconst parseExpiryMs = (expiresAt: string): number | null => {\n  const ms = Date.parse(expiresAt);\n  return Number.isFinite(ms) ? ms : null;\n};\n\ntype TokenState = 'valid' | 'stale' | 'expired';\n\nconst getTokenState = (\n  expiresAt: string,\n  bufferMs = EXPIRY_BUFFER_MS,\n  now = Date.now()\n): TokenState => {\n  const expMs = parseExpiryMs(expiresAt);\n  if (expMs === null) {\n    return 'expired';\n  }\n  if (expMs <= now) {\n    return 'expired';\n  }\n  if (expMs - bufferMs <= now) {\n    return 'stale';\n  }\n\n  return 'valid';\n};\n\nconst isTokenUsable = (expiresAt: string, bufferMs = EXPIRY_BUFFER_MS, now = Date.now()): boolean =>\n  getTokenState(expiresAt, bufferMs, now) === 'valid';\n\nexport const clearAIJwt = () => {\n  aiTokenCache = null;\n  sessionStorage.removeItem(SESSION_STORAGE_KEY);\n};\n\nconst readFromSession = (): AITokenData | null => {\n  try {\n    const raw = sessionStorage.getItem(SESSION_STORAGE_KEY);\n    if (!raw) {\n      return null;\n    }\n\n    const parsed = JSON.parse(raw) as AITokenData;\n    return parsed;\n  } catch {\n    return null;\n  }\n};\n\nconst writeToSession = (data: AITokenData) => {\n  sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(data));\n};\n\nexport const getAIJwt = async (): Promise<AITokenData | null> => {\n  // Check memory cache\n  if (aiTokenCache && isTokenUsable(aiTokenCache.expiresAt)) {\n    return aiTokenCache;\n  }\n\n  // Check session storage\n  const fromSession = readFromSession();\n  if (fromSession && isTokenUsable(fromSession.expiresAt)) {\n    aiTokenCache = fromSession;\n\n    return aiTokenCache;\n  }\n\n  // Fetch from admin endpoint\n  try {\n    const { get } = getFetchClient();\n    const { data } = await get('/admin/ai-token');\n\n    const token = data?.token || data?.data?.token;\n    const expiresAt = data?.expiresAt || data?.data?.expiresAt;\n\n    if (token && expiresAt) {\n      aiTokenCache = { token, expiresAt };\n      writeToSession(aiTokenCache);\n\n      return aiTokenCache;\n    }\n    return null;\n  } catch {\n    return null;\n  }\n};\n\nexport const prefetchAIToken = async (): Promise<void> => {\n  try {\n    // If we already have a valid token (not expiring soon), do nothing\n    const existing = await getAIJwt();\n    if (existing) {\n      return;\n    }\n\n    // Attempt a fetch to populate cache\n    await getAIJwt();\n  } catch {\n    // no-op\n  }\n};\n\nexport const safeParseJson = async (response: Response): Promise<any> => {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      const text = await response.text();\n\n      return { error: text };\n    } catch {\n      return undefined;\n    }\n  }\n};\n\nexport interface StrapiContextHeaders {\n  strapiVersion?: string | null;\n  projectId?: string | null;\n  userId?: string | null;\n}\n\nconst buildHeaders = (\n  token: string,\n  ctx?: StrapiContextHeaders,\n  extra?: HeadersInit\n): Record<string, string> => {\n  return {\n    Authorization: `Bearer ${token}`,\n    'X-Strapi-Version': ctx?.strapiVersion || 'latest',\n    'X-Strapi-User': ctx?.userId || 'unknown',\n    'X-Strapi-Project-Id': ctx?.projectId || 'unknown',\n    ...(extra as Record<string, string>),\n  };\n};\n\nconst shouldRetryForToken = (status: number, body: any): boolean => {\n  if (status === 401 || status === 403) {\n    return true;\n  }\n\n  const msg = (body?.error || '').toString().toLowerCase();\n  return msg.includes('expired') || msg.includes('invalid token');\n};\n\nexport interface FetchAIOptions extends RequestInit {\n  ctx?: StrapiContextHeaders;\n}\n\n/**\n * Generic fetch wrapper for AI endpoints with token injection and single retry on invalidation\n */\nexport const fetchAI = async (\n  input: RequestInfo | URL,\n  options: FetchAIOptions = {}\n): Promise<Response> => {\n  // Get token\n  const tokenData = await getAIJwt();\n\n  if (!tokenData?.token) {\n    const error = new Error(\n      'Could not authorize with AI Server. Please contact your administrator.'\n    );\n\n    throw error;\n  }\n\n  const make = async (token: string): Promise<Response> => {\n    const headers = buildHeaders(token, options.ctx, options.headers);\n    return fetch(input, {\n      ...options,\n      headers,\n    });\n  };\n\n  let response = await make(tokenData.token);\n\n  let body: unknown | undefined = undefined;\n  try {\n    body = await safeParseJson(response.clone());\n  } catch {\n    // no-op\n  }\n\n  if (shouldRetryForToken(response.status, body)) {\n    clearAIJwt();\n\n    const refreshed = await getAIJwt();\n\n    if (refreshed?.token && refreshed.token !== tokenData.token) {\n      response = await make(refreshed.token);\n    }\n  }\n\n  return response;\n};\n\n/**\n * Factory to provide a fetch implementation compatible with AI SDK useChat\n * that injects AI JWT + Strapi context headers and retries on token invalidation once.\n */\nexport const makeChatFetch = (ctx: StrapiContextHeaders) => {\n  return async (input: RequestInfo | URL, options: RequestInit = {}): Promise<Response> => {\n    return fetchAI(input, { ...options, ctx });\n  };\n};\n"],"names":["aiTokenCache","SESSION_STORAGE_KEY","EXPIRY_BUFFER_MS","parseExpiryMs","expiresAt","ms","Date","parse","Number","isFinite","getTokenState","bufferMs","now","expMs","isTokenUsable","clearAIJwt","sessionStorage","removeItem","readFromSession","raw","getItem","parsed","JSON","writeToSession","data","setItem","stringify","getAIJwt","fromSession","get","getFetchClient","token","prefetchAIToken","existing","safeParseJson","response","json","text","error","undefined","buildHeaders","ctx","extra","Authorization","strapiVersion","userId","projectId","shouldRetryForToken","status","body","msg","toString","toLowerCase","includes","fetchAI","input","options","tokenData","Error","make","headers","fetch","clone","refreshed","makeChatFetch"],"mappings":"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"}