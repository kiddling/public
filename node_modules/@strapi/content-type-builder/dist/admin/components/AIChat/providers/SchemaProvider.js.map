{"version":3,"file":"SchemaProvider.js","sources":["../../../../../admin/src/components/AIChat/providers/SchemaProvider.tsx"],"sourcesContent":["import { createContext, useContext, ReactNode, useEffect, useState } from 'react';\n\nimport { GUIDED_TOUR_REQUIRED_ACTIONS, useGuidedTour } from '@strapi/admin/strapi-admin';\n\nimport { useDataManager } from '../../DataManager/useDataManager';\nimport { transformChatToCTB } from '../lib/transforms/schemas/toCTB';\nimport { SchemaChange } from '../lib/types/annotations';\nimport { AIMessage } from '../lib/types/messages';\n\nimport { useStrapiChat } from './ChatProvider';\n\ninterface SchemaContextType {\n  lastRevisedId: string | null;\n  setLastRevisedId: (id: string | null) => void;\n}\n\nconst SchemaContext = createContext<SchemaContextType | undefined>(undefined);\n\nconst TYPE_TO_ACTION: Record<string, 'add' | 'update' | 'delete'> = {\n  create: 'add',\n  update: 'update',\n  remove: 'delete',\n};\n\nfunction extractSchemaChangesFromMessage(message: AIMessage): SchemaChange[] {\n  if (message.role !== 'assistant') return [];\n\n  const changes: SchemaChange[] = [];\n\n  message.parts?.forEach((part, partIndex) => {\n    // We only care about the schema generation tool\n    if (part && typeof part === 'object' && part.type === 'tool-schemaGenerationTool') {\n      // Prefer validated schemas from output; ignore if there's an error or no output yet\n      const output = part.output as { schemas?: any[]; error?: unknown } | undefined;\n      if (!output || output.error || !Array.isArray(output.schemas)) return;\n\n      const baseId = part.toolCallId ?? `${message.id}-${partIndex}`;\n\n      output.schemas.forEach((schema, schemaIndex) => {\n        const revisionId = `${baseId}-${schema.uid ?? schema.name ?? schemaIndex}`;\n        const type = (schema.action as SchemaChange['type']) || 'update';\n        changes.push({ type, schema, revisionId });\n      });\n    }\n  });\n\n  return changes;\n}\n\nexport const SchemaChatProvider = ({ children }: { children: ReactNode }) => {\n  const [lastRevisedId, setLastRevisedId] = useState<string | null>(null);\n  const { messages, status } = useStrapiChat();\n  const { contentTypes, components, applyChange } = useDataManager();\n  const dispatch = useGuidedTour('SchemaChatProvider', (s) => s.dispatch);\n  const state = useGuidedTour('SchemaChatProvider', (s) => s.state);\n\n  useEffect(() => {\n    const latestMessage = messages[messages.length - 1];\n    if (!latestMessage) return;\n    if (latestMessage.role !== 'assistant') return;\n    // Wait until message streaming has finished\n    if (status !== 'ready') return;\n\n    // const schemaChanges = latestMessage.schemaChanges;\n    const schemaChanges = extractSchemaChangesFromMessage(latestMessage);\n\n    // Check if addField action is already completed\n    const isAddFieldCompleted = state.completedActions.includes(\n      GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField\n    );\n\n    schemaChanges.forEach((change: SchemaChange) => {\n      const oldSchema =\n        contentTypes[change.schema.uid as any] || components[change.schema.uid as any];\n      const newSchema = transformChatToCTB(change.schema, oldSchema);\n\n      // Check if any attributes/fields are being added to any schema (existing or new)\n      if (!isAddFieldCompleted && change.schema.attributes) {\n        // If a field is being added or updated, dispatch guided tour action to show Save tooltip\n        if (change.type !== 'remove' && Object.keys(change.schema.attributes).length > 0) {\n          dispatch({\n            type: 'set_completed_actions',\n            payload: [GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField],\n          });\n        }\n      }\n\n      applyChange({\n        action: TYPE_TO_ACTION[change.type]!,\n        schema: newSchema,\n      });\n    });\n    setLastRevisedId(latestMessage.id);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  return (\n    <SchemaContext.Provider value={{ lastRevisedId, setLastRevisedId }}>\n      {children}\n    </SchemaContext.Provider>\n  );\n};\n\nexport const useChatSchema = () => {\n  const context = useContext(SchemaContext);\n  if (context === undefined) {\n    throw new Error('useSchema must be used within a SchemaProvider');\n  }\n  return context;\n};\n"],"names":["SchemaContext","createContext","undefined","TYPE_TO_ACTION","create","update","remove","extractSchemaChangesFromMessage","message","role","changes","parts","forEach","part","partIndex","type","output","error","Array","isArray","schemas","baseId","toolCallId","id","schema","schemaIndex","revisionId","uid","name","action","push","SchemaChatProvider","children","lastRevisedId","setLastRevisedId","useState","messages","status","useStrapiChat","contentTypes","components","applyChange","useDataManager","dispatch","useGuidedTour","s","state","useEffect","latestMessage","length","schemaChanges","isAddFieldCompleted","completedActions","includes","GUIDED_TOUR_REQUIRED_ACTIONS","contentTypeBuilder","addField","change","oldSchema","newSchema","transformChatToCTB","attributes","Object","keys","payload","_jsx","Provider","value"],"mappings":"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"}