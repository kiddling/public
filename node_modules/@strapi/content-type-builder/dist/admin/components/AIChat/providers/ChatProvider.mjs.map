{"version":3,"file":"ChatProvider.mjs","sources":["../../../../../admin/src/components/AIChat/providers/ChatProvider.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n  useEffect,\n  type ReactNode,\n  type ChangeEvent,\n} from 'react';\n\nimport { UIMessage, useChat } from '@ai-sdk/react';\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { useAIAvailability } from '@strapi/admin/strapi-admin/ee';\n\nimport { useDataManager } from '../../DataManager/useDataManager';\nimport { FeedbackProvider } from '../FeedbackModal';\nimport { useAIChat } from '../hooks/useAIFetch';\nimport { useChatTitle } from '../hooks/useChatTitle';\nimport { useLastSeenSchemas } from '../hooks/useLastSeenSchemas';\nimport { transformCTBToChat } from '../lib/transforms/schemas/fromCTB';\nimport { Attachment } from '../lib/types/attachments';\nimport { Schema } from '../lib/types/schema';\nimport { UploadProjectToChatProvider } from '../UploadCodeModal';\nimport { UploadFigmaToChatProvider } from '../UploadFigmaModal';\n\nimport { SchemaChatProvider } from './SchemaProvider';\n\ninterface ChatContextType extends Omit<ReturnType<typeof useChat>, 'messages'> {\n  isChatEnabled: boolean;\n  title?: string;\n  messages: UIMessage[];\n  handleSubmit: (event: any) => void;\n  input: string;\n  setInput: React.Dispatch<React.SetStateAction<string>>;\n  handleInputChange: (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>) => void;\n  reset: () => void;\n  schemas: Schema[];\n  // Chat window\n  isChatOpen: boolean;\n  openChat: () => void;\n  closeChat: () => void;\n  // Attachments\n  attachments: Attachment[];\n  setAttachments: React.Dispatch<React.SetStateAction<Attachment[]>>;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nconst generateRandomId = () => {\n  return Math.random().toString(36).substring(2, 15);\n};\n\nexport const BaseChatProvider = ({\n  children,\n  defaultOpen = false,\n}: {\n  children: ReactNode;\n  defaultOpen?: boolean;\n}) => {\n  const [chatId, setChatId] = useState<string | undefined>(generateRandomId());\n  const [isChatOpen, setIsChatOpen] = useState(defaultOpen);\n  const [openCount, setOpenCount] = useState(0);\n  const [input, setInput] = useState('');\n\n  // Files\n  const [attachments, setAttachments] = useState<Attachment[]>([]);\n\n  const { trackUsage } = useTracking();\n\n  // DataManager\n  const { components, contentTypes } = useDataManager();\n\n  // Last user seen schemas\n  const { lastSeenSchemas } = useLastSeenSchemas();\n\n  // Schemas to be sent to the chat\n  const schemas = useMemo(() => {\n    return [\n      ...Object.values(contentTypes)\n        .filter((schema) => schema.status !== 'REMOVED')\n        // Probably we should still keep this one, not sure\n        .filter((schema) => schema.uid !== 'plugin::users-permissions.user')\n        .filter((schema) => schema.visible)\n        .map(transformCTBToChat as any),\n      ...Object.values(components)\n        .filter((schema) => schema.status !== 'REMOVED')\n        .map(transformCTBToChat as any),\n    ] as Schema[];\n  }, [contentTypes, components]);\n\n  const {\n    id,\n    messages,\n    sendMessage: _sendMessage,\n    status,\n    stop,\n    ...chat\n  } = useAIChat({\n    id: chatId?.toString(),\n    experimental_throttle: 100,\n  });\n\n  /* -------------------------------------------------------------------------------------------------\n   * AI SDK chat overrides\n   * -----------------------------------------------------------------------------------------------*/\n\n  // NOTE: body is using state variables, so they can not be passed as a prop in useChat\n  const sendMessage: typeof _sendMessage = async (message, options) => {\n    if (status === 'streaming' || status === 'submitted') {\n      return;\n    }\n\n    return _sendMessage(message, {\n      ...options,\n      body: {\n        ...options?.body,\n        schemas,\n        metadata: {\n          lastSeenSchemas: lastSeenSchemas.map((schema) => schema.uid),\n        },\n      },\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (status === 'streaming' || status === 'submitted') {\n      return;\n    }\n\n    const readyAttachments = attachments.filter((a) => a.status !== 'loading');\n    if (input.trim().length === 0 && attachments.length === 0) {\n      return;\n    }\n\n    const files = readyAttachments.map(\n      (attachment) =>\n        ({\n          type: 'file',\n          filename: attachment.filename,\n          mediaType: attachment.mediaType,\n          url: attachment.url,\n        }) as const\n    );\n    sendMessage({ text: input, files });\n    setInput('');\n    setAttachments([]);\n  };\n\n  /* -------------------------------------------------------------------------------------------------\n   * Chat title\n   * -----------------------------------------------------------------------------------------------*/\n  const { title, generateTitle, resetTitle } = useChatTitle({ chatId: id, messages });\n\n  // Automatically generate title when we have at least 1 message (user query)\n  useEffect(() => {\n    if (messages.length >= 1 && !title) {\n      generateTitle();\n    }\n  }, [messages.length, title, generateTitle]);\n\n  useEffect(() => {\n    if (status === 'error') {\n      trackUsage('didAnswerMessage', {\n        successful: false,\n      });\n    } else if (\n      status === 'ready' &&\n      messages.length > 0 &&\n      messages[messages.length - 1]?.role === 'assistant'\n    ) {\n      trackUsage('didAnswerMessage', {\n        successful: true,\n      });\n    }\n  }, [status, messages, trackUsage]);\n\n  const isChatAvailable = useAIAvailability();\n\n  return (\n    <ChatContext.Provider\n      value={{\n        isChatEnabled: isChatAvailable,\n        id,\n        status,\n        stop,\n        sendMessage,\n        ...chat,\n        messages,\n        handleSubmit,\n        input,\n        setInput,\n        handleInputChange: (e) => setInput(e.target.value),\n        reset: () => {\n          stop();\n          setChatId(generateRandomId());\n          trackUsage('didStartNewChat');\n          resetTitle();\n        },\n        schemas,\n        // Chat\n        title,\n        isChatOpen,\n        openChat: () => {\n          setIsChatOpen(true);\n          // if this is the first open, it's a new chat\n          if (openCount === 0) {\n            trackUsage('didStartNewChat');\n          }\n          setOpenCount((prev) => prev + 1);\n        },\n        closeChat: () => setIsChatOpen(false),\n        // Attachments\n        attachments,\n        setAttachments,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatProvider = ({\n  children,\n  defaultOpen = false,\n}: {\n  children: React.ReactNode;\n  defaultOpen?: boolean;\n}) => {\n  return (\n    <BaseChatProvider defaultOpen={defaultOpen}>\n      <SchemaChatProvider>\n        <UploadProjectToChatProvider>\n          <UploadFigmaToChatProvider>\n            <FeedbackProvider>{children}</FeedbackProvider>\n          </UploadFigmaToChatProvider>\n        </UploadProjectToChatProvider>\n      </SchemaChatProvider>\n    </BaseChatProvider>\n  );\n};\n\nexport function useStrapiChat() {\n  const context = useContext(ChatContext);\n\n  if (process.env.NODE_ENV === 'development') {\n    // In development, provide a fallback to prevent crashes during hot reloading\n    // This allows the app to continue working during HMR updates\n    if (context === undefined) {\n      console.warn(\n        'useStrapiChat was called outside of ChatProvider. This is only allowed in development mode.'\n      );\n      return {} as ChatContextType;\n    }\n  } else if (context === undefined) {\n    throw new Error('useStrapiChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":["ChatContext","createContext","undefined","generateRandomId","Math","random","toString","substring","BaseChatProvider","children","defaultOpen","chatId","setChatId","useState","isChatOpen","setIsChatOpen","openCount","setOpenCount","input","setInput","attachments","setAttachments","trackUsage","useTracking","components","contentTypes","useDataManager","lastSeenSchemas","useLastSeenSchemas","schemas","useMemo","Object","values","filter","schema","status","uid","visible","map","transformCTBToChat","id","messages","sendMessage","_sendMessage","stop","chat","useAIChat","experimental_throttle","message","options","body","metadata","handleSubmit","e","preventDefault","readyAttachments","a","trim","length","files","attachment","type","filename","mediaType","url","text","title","generateTitle","resetTitle","useChatTitle","useEffect","successful","role","isChatAvailable","useAIAvailability","_jsx","Provider","value","isChatEnabled","handleInputChange","target","reset","openChat","prev","closeChat","ChatProvider","SchemaChatProvider","UploadProjectToChatProvider","UploadFigmaToChatProvider","FeedbackProvider","useStrapiChat","context","useContext","process","env","NODE_ENV","console","warn","Error"],"mappings":"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"}