{"version":3,"file":"UploadFigmaModal.js","sources":["../../../../admin/src/components/AIChat/UploadFigmaModal.tsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nimport { Flex, Typography, Box, TextInput, Grid, Button, Link } from '@strapi/design-system'; // Added Link\n\nimport { ImagePreview } from './components/ImagePreview';\nimport { StepModal, useStepModal } from './components/StepModal';\nimport { useAttachments } from './hooks/useAttachments';\nimport {\n  FigmaImage,\n  useFigmaUpload,\n  getFigmaToken,\n  saveFigmaToken,\n  hasFigmaToken,\n} from './hooks/useFigmaUpload';\nimport { useTranslations } from './hooks/useTranslations';\nimport { useStrapiChat } from './providers/ChatProvider';\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\ninterface UploadFigmaContextType {\n  isFigmaUploadOpen: boolean;\n  submitOnFinish: boolean;\n  openFigmaUpload: (submitOnFinish?: boolean) => void;\n  closeFigmaUpload: () => void;\n}\n\nconst UploadFigmaContext = createContext<UploadFigmaContextType>({\n  isFigmaUploadOpen: false,\n  submitOnFinish: false,\n  openFigmaUpload: () => {},\n  closeFigmaUpload: () => {},\n});\n\nexport const useUploadFigmaToChat = () => {\n  const context = useContext(UploadFigmaContext);\n  if (!context) {\n    throw new Error('useUploadFigmaToChat must be used within an UploadFigmaToChatProvider');\n  }\n  return context;\n};\n\nexport const UploadFigmaToChatProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isFigmaUploadOpen, setIsFigmaUploadOpen] = useState(false); // Default to false\n  const [submitOnFinish, setSubmitOnFinish] = useState(false);\n\n  const openFigmaUpload = (submitOnFinishParam?: boolean) => {\n    setIsFigmaUploadOpen(true);\n    setSubmitOnFinish(submitOnFinishParam ?? false);\n  };\n\n  const closeFigmaUpload = () => setIsFigmaUploadOpen(false);\n\n  return (\n    <UploadFigmaContext.Provider\n      value={{ isFigmaUploadOpen, submitOnFinish, openFigmaUpload, closeFigmaUpload }}\n    >\n      {isFigmaUploadOpen && <UploadFigmaModal />}\n      {children}\n    </UploadFigmaContext.Provider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step 1 - Input Figma URL\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FigmaUrlInputStepProps {\n  figmaUrl: string;\n  setFigmaUrl: (url: string) => void;\n  error: string | null; // Error state from useFigmaUpload\n}\n\nconst FigmaUrlInputStep = ({ figmaUrl, setFigmaUrl }: FigmaUrlInputStepProps) => {\n  const { t } = useTranslations();\n  const { isLoading } = useStepModal();\n  const [showingTokenInput, setShowingTokenInput] = useState(!hasFigmaToken());\n  const [figmaToken, setFigmaToken] = useState<string>(getFigmaToken);\n\n  // Handle saving token and returning to URL input\n  const handleSaveToken = () => {\n    if (figmaToken.trim()) {\n      saveFigmaToken(figmaToken);\n      setShowingTokenInput(false);\n    }\n  };\n\n  // If we need to show token step, render the token input\n  if (showingTokenInput) {\n    return (\n      <Flex direction=\"column\" gap={6} alignItems=\"start\">\n        <Flex direction=\"column\" gap={2} alignItems=\"start\">\n          <Typography variant=\"beta\">\n            {t('chat.figma-upload.token-title', 'Enter Figma API Token')}\n          </Typography>\n          <Typography variant=\"omega\" textColor=\"neutral600\">\n            {t(\n              'chat.figma-upload.token-description',\n              'To access your Figma designs, you need to provide a personal access token. This will be stored securely in your browser.'\n            )}\n          </Typography>\n          <Link\n            href=\"https://help.figma.com/hc/en-us/articles/8085703771159-Manage-personal-access-tokens\"\n            isExternal\n          >\n            {t('chat.figma-upload.token-help', 'How to get a Figma API token')}\n          </Link>\n        </Flex>\n\n        <Box width=\"100%\">\n          <TextInput\n            name=\"figma-token\"\n            placeholder={t('chat.figma-upload.token-placeholder', 'Enter Figma API token')}\n            aria-label={t('chat.figma-upload.token-placeholder', 'Enter Figma API token')}\n            value={figmaToken}\n            onChange={(e) => setFigmaToken(e.target.value)}\n            width=\"100%\"\n            disabled={isLoading}\n            type=\"password\"\n          />\n        </Box>\n\n        <Flex gap={2}>\n          <Button onClick={handleSaveToken} disabled={!figmaToken.trim()} variant=\"secondary\">\n            {t('chat.figma-upload.save-token', 'Save token')}\n          </Button>\n          <Button\n            onClick={() => setShowingTokenInput(false)}\n            variant=\"tertiary\"\n            disabled={!hasFigmaToken()}\n          >\n            {t('chat.figma-upload.cancel', 'Cancel')}\n          </Button>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  // Otherwise render the URL input\n  return (\n    <Flex direction=\"column\" gap={6} alignItems=\"start\">\n      <Flex direction=\"column\" gap={2} alignItems=\"start\" width=\"100%\">\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n          <Typography variant=\"beta\">\n            {t('chat.figma-upload.title', 'Import Figma Design')}\n          </Typography>\n          <Button onClick={() => setShowingTokenInput(true)} variant=\"tertiary\" size=\"S\">\n            {t('chat.figma-upload.edit-token', 'Edit API token')}\n          </Button>\n        </Flex>\n        <Typography variant=\"omega\" textColor=\"neutral600\">\n          {t(\n            'chat.figma-upload.description',\n            'Ask to turn your designs into schemas by attaching a link to one or multiple frames in your Figma files. (Max 15 frames)'\n          )}\n        </Typography>\n      </Flex>\n\n      <Box width=\"100%\">\n        <TextInput\n          name=\"figma-url\"\n          placeholder={t('chat.figma-upload.url-placeholder', 'Enter Figma URL')}\n          aria-label={t('chat.figma-upload.url-placeholder', 'Enter Figma URL')}\n          value={figmaUrl}\n          onChange={(e) => setFigmaUrl(e.target.value)}\n          width=\"100%\"\n          disabled={isLoading}\n        />\n      </Box>\n\n      {/* {error && (\n        <Box padding={3} background=\"danger100\" color=\"danger600\" borderRadius=\"4px\" width=\"100%\">\n          <Typography variant=\"pi\">{error}</Typography>\n        </Box>\n      )} */}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step 2 - Display Figma Images\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FigmaImageDisplayStepProps {\n  images: FigmaImage[];\n  selectedImages: string[];\n  setSelectedImages: (images: string[]) => void;\n}\n\nconst FigmaImageDisplayStep = ({\n  images,\n  selectedImages,\n  setSelectedImages,\n}: FigmaImageDisplayStepProps) => {\n  const { t } = useTranslations();\n\n  // Handle select/deselect all\n  const toggleSelectAll = () => {\n    if (selectedImages.length === images.length) {\n      // Deselect all if all or max allowed are selected\n      setSelectedImages([]);\n    } else {\n      // Select all images up to the max limit\n      const allImageIds = images.map((img) => img.id);\n      setSelectedImages(allImageIds);\n    }\n  };\n\n  if (images.length === 0) {\n    return (\n      <Flex direction=\"column\" gap={4} alignItems=\"center\" padding={4}>\n        <Typography variant=\"omega\">\n          {t('chat.figma-upload.no-images', 'No frames found in the Figma file.')}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  // Handle individual frame selection\n  const handleFrameSelection = (frameId: string) => {\n    const newSelection = selectedImages.includes(frameId)\n      ? selectedImages.filter((id) => id !== frameId)\n      : [...selectedImages, frameId];\n\n    setSelectedImages(newSelection);\n  };\n\n  return (\n    <Flex direction=\"column\" gap={4} alignItems=\"start\" width=\"100%\" height=\"min(45vh, 400px)\">\n      <Flex justifyContent=\"space-between\" width=\"100%\" alignItems=\"center\">\n        <Typography variant=\"beta\">\n          {t('chat.figma-upload.select-images', 'Select Frames to Import')}\n        </Typography>\n        <Flex gap={3} alignItems=\"center\">\n          <Typography>\n            {selectedImages.length} of {images.length} selected\n          </Typography>\n          <Button onClick={toggleSelectAll} type=\"button\" variant=\"secondary\">\n            {/* Determine if select all button should show \"Select All\" or \"Deselect All\" */}\n            {selectedImages.length === images.length\n              ? t('chat.figma-upload.deselect-all', 'Deselect All')\n              : t('chat.figma-upload.select-all', 'Select All')}\n          </Button>\n        </Flex>\n      </Flex>\n\n      <Box paddingRight={4} width=\"100%\" style={{ overflowY: 'auto' }}>\n        <Grid.Root gap={4}>\n          {images.map((frame, index) => {\n            const isSelected = selectedImages.includes(frame.id);\n            return (\n              <Grid.Item key={frame.id} col={6} padding={'1px'}>\n                <ImagePreview\n                  imageUrl={frame.url}\n                  imageName={frame.filename || `Frame ${index + 1}`}\n                  selected={isSelected}\n                  onSelect={() => handleFrameSelection(frame.id)}\n                />\n              </Grid.Item>\n            );\n          })}\n        </Grid.Root>\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Modal\n * -----------------------------------------------------------------------------------------------*/\nexport const UploadFigmaModal = () => {\n  const [figmaUrl, setFigmaUrl] = useState<string>('');\n  const [figmaImages, setFigmaImages] = useState<FigmaImage[]>([]);\n  const [selectedImages, setSelectedImages] = useState<string[]>([]);\n  const { t } = useTranslations();\n\n  const { addAttachments } = useAttachments();\n  const { isFigmaUploadOpen, closeFigmaUpload, submitOnFinish } = useUploadFigmaToChat();\n  const { input, setInput, setMessages, sendMessage, openChat } = useStrapiChat();\n  const { processFigmaUrl, isLoading, error } = useFigmaUpload({\n    onSuccess: (images) => {\n      setFigmaImages(images);\n      // Initialize with first 15 images selected\n      const initialSelection = images.slice(0, 15).map((img) => img.id);\n      setSelectedImages(initialSelection);\n    },\n  });\n\n  const handleImportStep = async () => {\n    await processFigmaUrl(figmaUrl);\n    return true;\n  };\n\n  // Validate if the URL is a valid Figma URL\n  const isValidFigmaUrl = (url: string) => {\n    if (!url) return false;\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname === 'www.figma.com' || urlObj.hostname === 'figma.com';\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const handleCancel = () => {\n    // Reset all state on cancel\n    setFigmaUrl('');\n    setFigmaImages([]);\n    setSelectedImages([]);\n    closeFigmaUpload();\n  };\n\n  const handleComplete = () => {\n    // Only attach the selected images\n    const selectedFigmaImages = figmaImages.filter((img) => selectedImages.includes(img.id));\n    if (selectedFigmaImages.length === 0) {\n      closeFigmaUpload();\n      return;\n    }\n\n    // Ensure chat is opened\n    openChat();\n\n    if (submitOnFinish) {\n      // Auto-submit a message to chat with attachments\n      sendMessage({\n        role: 'user',\n        parts: [\n          { type: 'text', text: 'Create schemas from the attached images' },\n          ...selectedFigmaImages,\n        ],\n      });\n\n      closeFigmaUpload();\n    } else {\n      // If input is empty, set a predefined message\n      if (!input) {\n        setInput('Create schemas from the attached images');\n      }\n      addAttachments(selectedFigmaImages);\n      closeFigmaUpload();\n    }\n  };\n\n  return (\n    <StepModal\n      open={isFigmaUploadOpen}\n      onOpenChange={(isOpen) => {\n        if (!isOpen) handleCancel();\n      }}\n      title={t('chat.figma-upload.header', 'Import from Figma')}\n      onCancel={handleCancel}\n      onComplete={handleComplete}\n    >\n      <StepModal.Step\n        title={t('chat.figma-upload.step1-title', 'Enter Figma URL')}\n        nextLabel={t('chat.figma-upload.import-button', 'Import')}\n        cancelLabel={t('form.button.cancel', 'Cancel')}\n        disableNext={!figmaUrl || isLoading || !isValidFigmaUrl(figmaUrl)}\n        onNext={handleImportStep}\n      >\n        <FigmaUrlInputStep figmaUrl={figmaUrl} setFigmaUrl={setFigmaUrl} error={error} />\n      </StepModal.Step>\n\n      <StepModal.Step\n        title={t('chat.figma-upload.step2-title', 'Preview Images')}\n        nextLabel={t('form.button.finish', 'Finish')}\n        backLabel={t('form.button.back', 'Back')}\n        disableNext={selectedImages.length === 0}\n      >\n        <FigmaImageDisplayStep\n          images={figmaImages}\n          selectedImages={selectedImages}\n          setSelectedImages={setSelectedImages}\n        />\n      </StepModal.Step>\n    </StepModal>\n  );\n};\n"],"names":["UploadFigmaContext","createContext","isFigmaUploadOpen","submitOnFinish","openFigmaUpload","closeFigmaUpload","useUploadFigmaToChat","context","useContext","Error","UploadFigmaToChatProvider","children","setIsFigmaUploadOpen","useState","setSubmitOnFinish","submitOnFinishParam","_jsxs","Provider","value","_jsx","UploadFigmaModal","FigmaUrlInputStep","figmaUrl","setFigmaUrl","t","useTranslations","isLoading","useStepModal","showingTokenInput","setShowingTokenInput","hasFigmaToken","figmaToken","setFigmaToken","getFigmaToken","handleSaveToken","trim","saveFigmaToken","Flex","direction","gap","alignItems","Typography","variant","textColor","Link","href","isExternal","Box","width","TextInput","name","placeholder","aria-label","onChange","e","target","disabled","type","Button","onClick","justifyContent","size","FigmaImageDisplayStep","images","selectedImages","setSelectedImages","toggleSelectAll","length","allImageIds","map","img","id","padding","handleFrameSelection","frameId","newSelection","includes","filter","height","paddingRight","style","overflowY","Grid","Root","frame","index","isSelected","Item","col","ImagePreview","imageUrl","url","imageName","filename","selected","onSelect","figmaImages","setFigmaImages","addAttachments","useAttachments","input","setInput","setMessages","sendMessage","openChat","useStrapiChat","processFigmaUrl","error","useFigmaUpload","onSuccess","initialSelection","slice","handleImportStep","isValidFigmaUrl","urlObj","URL","hostname","handleCancel","handleComplete","selectedFigmaImages","role","parts","text","StepModal","open","onOpenChange","isOpen","title","onCancel","onComplete","Step","nextLabel","cancelLabel","disableNext","onNext","backLabel"],"mappings":"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"}