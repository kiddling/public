{"version":3,"file":"UploadCodeModal.mjs","sources":["../../../../admin/src/components/AIChat/UploadCodeModal.tsx"],"sourcesContent":["import { createContext, useContext, useRef, useState } from 'react';\n\nimport { Flex, Typography, Box } from '@strapi/design-system';\nimport { Folder, FileZip } from '@strapi/icons';\n\nimport { AttachmentPreview } from './components/Attachments/AttachmentPreview';\nimport { StepModal, useStepModal } from './components/StepModal';\nimport { useAttachments } from './hooks/useAttachments';\nimport { useCodeUpload } from './hooks/useCodeUpload';\nimport { useTranslations } from './hooks/useTranslations';\nimport { STRAPI_CODE_MIME_TYPE } from './lib/constants';\nimport { generateId } from './lib/misc';\nimport { Attachment } from './lib/types/attachments';\nimport { useStrapiChat } from './providers/ChatProvider';\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\ninterface UploadProjectContextType {\n  isCodeUploadOpen: boolean;\n  submitOnFinish: boolean;\n  openCodeUpload: (submitOnFinish?: boolean) => void;\n  closeCodeUpload: () => void;\n}\n\nconst UploadProjectContext = createContext<UploadProjectContextType>({\n  isCodeUploadOpen: false,\n  submitOnFinish: false,\n  openCodeUpload: () => {},\n  closeCodeUpload: () => {},\n});\n\nexport const useUploadProjectToChat = () => useContext(UploadProjectContext);\n\nexport const UploadProjectToChatProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isCodeUploadOpen, setIsCodeUploadOpen] = useState(false);\n  const [submitOnFinish, setSubmitOnFinish] = useState(false);\n\n  const openCodeUpload = (submitOnFinish?: boolean) => {\n    setIsCodeUploadOpen(true);\n    setSubmitOnFinish(submitOnFinish ?? false);\n  };\n\n  const closeCodeUpload = () => setIsCodeUploadOpen(false);\n\n  return (\n    <UploadProjectContext.Provider\n      value={{ isCodeUploadOpen, submitOnFinish, openCodeUpload, closeCodeUpload }}\n    >\n      {isCodeUploadOpen && <UploadCodeModal />}\n      {children}\n    </UploadProjectContext.Provider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Drop Zone\n * -----------------------------------------------------------------------------------------------*/\ninterface DropZoneProps {\n  importType: 'folder' | 'zip';\n  onAddFiles: (files: File[]) => void;\n  error?: string | null;\n}\n\nconst DropZone = ({ importType, onAddFiles, error }: DropZoneProps) => {\n  const [dragOver, setDragOver] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { t } = useTranslations();\n\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n  };\n\n  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = () => setDragOver(false);\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    inputRef.current?.click();\n  };\n\n  const handleChange = () => {\n    const files = inputRef.current?.files;\n    if (files) {\n      onAddFiles(Array.from(files));\n    }\n  };\n\n  /**\n   * Recursively reads a directory and its contents\n   */\n  const readDirectory = async (entry: FileSystemDirectoryEntry): Promise<File[]> => {\n    const reader = entry.createReader();\n    const getEntries = (): Promise<FileSystemEntry[]> => {\n      return new Promise((resolve, reject) => {\n        reader.readEntries(resolve, reject);\n      });\n    };\n\n    const files: File[] = [];\n    let entries: FileSystemEntry[] = [];\n\n    // Read entries in batches until no more entries are left\n    do {\n      entries = await getEntries();\n      for (const entry of entries) {\n        if (entry.isFile) {\n          const fileEntry = entry as FileSystemFileEntry;\n          const file = await new Promise<File>((resolve, reject) => {\n            fileEntry.file(resolve, reject);\n          });\n\n          // Store the full path including the directory structure\n          Object.defineProperty(file, 'webkitRelativePath', {\n            writable: true,\n            value: entry.fullPath.substring(1), // Remove leading slash\n          });\n\n          files.push(file);\n        } else if (entry.isDirectory) {\n          // Recursively process subdirectories\n          const dirEntry = entry as FileSystemDirectoryEntry;\n          const subFiles = await readDirectory(dirEntry);\n          files.push(...subFiles);\n        }\n      }\n    } while (entries.length > 0);\n\n    return files;\n  };\n\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setDragOver(false);\n\n    if (!e.dataTransfer?.items) {\n      return;\n    }\n\n    // For folder upload, process directories recursively\n    if (importType === 'folder') {\n      const items = e.dataTransfer.items;\n      const allFiles: File[] = [];\n\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        // Use webkitGetAsEntry to access the file system entry\n        const entry = item.webkitGetAsEntry?.();\n\n        if (entry) {\n          if (entry.isDirectory) {\n            const files = await readDirectory(entry as FileSystemDirectoryEntry);\n            allFiles.push(...files);\n          } else if (entry.isFile) {\n            const file = await new Promise<File>((resolve, reject) => {\n              (entry as FileSystemFileEntry).file(resolve, reject);\n            });\n            allFiles.push(file);\n          }\n        }\n      }\n\n      if (allFiles.length > 0) {\n        onAddFiles(allFiles);\n      }\n    } else {\n      // For zip files, just import them regularly\n      if (e.dataTransfer.files) {\n        onAddFiles(Array.from(e.dataTransfer.files));\n      }\n    }\n  };\n\n  return (\n    <Flex\n      position=\"relative\"\n      cursor=\"pointer\"\n      width=\"100%\"\n      height=\"100%\"\n      minHeight=\"140px\"\n      borderStyle=\"dashed\"\n      borderColor={dragOver ? 'primary500' : error ? 'danger600' : 'neutral200'}\n      background={dragOver ? 'primary100' : error ? 'danger100' : 'neutral100'}\n      hasRadius\n      padding={7}\n      justifyContent=\"center\"\n      direction=\"column\"\n      alignItems=\"center\"\n      gap={2}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n      {importType === 'zip' ? (\n        <FileZip width={'24px'} height={'24px'} />\n      ) : (\n        <Folder width={'24px'} height={'24px'} />\n      )}\n      <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n        <Typography variant=\"omega\" textColor=\"neutral600\" textAlign=\"center\">\n          {importType === 'zip'\n            ? t('chat.code-upload.drop-zone', 'Drop here a .zip file here or')\n            : t('chat.code-upload.drop-zone-folder', 'Drop here a folder here or')}{' '}\n          <Typography variant=\"omega\" textColor=\"primary600\" onClick={handleClick}>\n            {t('chat.code-upload.drop-zone-browse', 'browse files')}\n          </Typography>\n        </Typography>\n        {error && (\n          <Typography variant=\"pi\" textColor=\"danger600\">\n            {error}\n          </Typography>\n        )}\n      </Flex>\n      <Box\n        tag=\"input\"\n        position=\"absolute\"\n        left={0}\n        right={0}\n        bottom={0}\n        top={0}\n        width=\"100%\"\n        name=\"code\"\n        aria-label=\"Upload project\"\n        tabIndex={-1}\n        zIndex={1}\n        ref={inputRef}\n        onChange={handleChange}\n        style={{ opacity: 0, cursor: 'pointer' }}\n        type=\"file\"\n        {...(importType === 'zip'\n          ? { accept: '.zip', multiple: false }\n          : { multiple: true, webkitdirectory: '', directory: '' })}\n      />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step 1 - Upload Code\n * -----------------------------------------------------------------------------------------------*/\ninterface CodeUploadStepProps {\n  setFileName: (name: string | null) => void;\n  error: string | null;\n  processZipFile: (file: File) => void;\n  processFolder: (files: File[]) => Promise<Attachment>;\n}\n\nconst CodeUploadStep = ({\n  setFileName,\n  error,\n  processZipFile,\n  processFolder,\n}: CodeUploadStepProps) => {\n  const { t } = useTranslations();\n  const { nextStep } = useStepModal();\n\n  return (\n    <Flex direction=\"column\" gap={6} alignItems=\"start\" width=\"100%\">\n      <Flex direction=\"column\" gap={2} alignItems=\"start\">\n        <Typography variant=\"beta\">{t('chat.code-upload.title', 'Import code')}</Typography>\n        <Typography variant=\"omega\" textColor=\"neutral600\">\n          {t(\n            'chat.code-upload.description',\n            'Your app will be analyzed by AI. Make sure to remove all sensitive data before importation.'\n          )}\n        </Typography>\n      </Flex>\n\n      <Flex gap={3} width=\"100%\" wrap=\"wrap\">\n        <Box flex={1} minWidth=\"200px\">\n          <DropZone\n            importType=\"zip\"\n            onAddFiles={(files: FileList | File[]) => {\n              if (files.length > 0) {\n                const file = files[0];\n                setFileName(file.name.replace('.zip', ''));\n                nextStep();\n                processZipFile(file);\n              }\n            }}\n            error={error}\n          />\n        </Box>\n        <Box flex={1} minWidth=\"200px\">\n          <DropZone\n            importType=\"folder\"\n            onAddFiles={async (files: File[]) => {\n              if (files.length > 0) {\n                try {\n                  // Get the folder name from the first file's path\n                  const firstFile = files[0];\n                  const folderPath = firstFile.webkitRelativePath || '';\n                  const folderName = folderPath.split('/')[0] || 'Project';\n\n                  setFileName(folderName);\n                  nextStep();\n\n                  // Process the folder files\n                  await processFolder(files);\n                } catch (err) {\n                  console.error('Error processing folder:', err);\n                }\n              }\n            }}\n            error={error}\n          />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step 2 - Confirmation\n * -----------------------------------------------------------------------------------------------*/\ninterface CodeConfirmationStepProps {\n  projectName: string | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst CodeConfirmationStep = ({ projectName, isLoading, error }: CodeConfirmationStepProps) => {\n  const { t } = useTranslations();\n\n  return (\n    <Flex direction=\"column\" gap={6} alignItems=\"start\" width=\"100%\">\n      <Flex direction=\"column\" gap={2} alignItems=\"start\">\n        <Typography variant=\"beta\">\n          {t('chat.code-upload.confirmation-title', 'Confirm Code Import')}\n        </Typography>\n        <Typography variant=\"omega\" textColor=\"neutral600\">\n          {t(\n            'chat.code-upload.confirmation-description',\n            'Your code is ready to be imported. Click finish to add it to your chat.'\n          )}\n        </Typography>\n      </Flex>\n\n      <Box width=\"100%\">\n        <AttachmentPreview\n          attachment={{\n            id: generateId(),\n            status: isLoading ? 'loading' : 'ready',\n            filename: projectName || '',\n            url: '',\n            type: 'file',\n            mediaType: STRAPI_CODE_MIME_TYPE,\n          }}\n          error={error}\n          minWidth=\"256px\"\n        />\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Modal\n * -----------------------------------------------------------------------------------------------*/\nexport const UploadCodeModal = () => {\n  const [projectName, setProjectName] = useState<string | null>(null);\n  const [projectAttachment, setProjectAttachment] = useState<Attachment | null>(null);\n  const { t } = useTranslations();\n\n  // Attach files to the chat\n  const { addAttachments } = useAttachments();\n\n  const { processZipFile, processFolder, isLoading, error } = useCodeUpload({\n    onSuccess: (file) => setProjectAttachment(file),\n  });\n\n  const { isCodeUploadOpen, closeCodeUpload, submitOnFinish } = useUploadProjectToChat();\n  const { sendMessage, openChat, input, setInput } = useStrapiChat();\n\n  const handleCancel = () => {\n    setProjectName(null);\n    setProjectAttachment(null);\n    closeCodeUpload();\n  };\n\n  const handleComplete = async () => {\n    // Ensure chat is opened\n    openChat();\n\n    if (projectAttachment && submitOnFinish) {\n      sendMessage({\n        role: 'user',\n        parts: [\n          {\n            type: 'text',\n            text: 'Create schemas from my uploaded project',\n          },\n          projectAttachment,\n        ],\n      });\n    } else if (projectAttachment) {\n      // If input is empty, set a predefined message\n      if (!input) {\n        setInput('Create schemas from my uploaded project');\n      }\n      // Attach files to the chat input\n      addAttachments([projectAttachment]);\n    }\n\n    closeCodeUpload();\n  };\n\n  const validateUploadStep = () => {\n    return !!projectAttachment;\n  };\n\n  return (\n    <StepModal\n      open={isCodeUploadOpen}\n      onOpenChange={(isOpen) => {\n        if (!isOpen) handleCancel();\n      }}\n      title={t('chat.code-upload.header', 'Import code')}\n      onCancel={handleCancel}\n      onComplete={handleComplete}\n    >\n      <StepModal.Step\n        title={t('chat.code-upload.step1-title', 'Import code')}\n        nextLabel={t('chat.code-upload.continue-button', 'Continue')}\n        cancelLabel={t('common.cancel', 'Cancel')}\n        disableNext={!projectAttachment || isLoading}\n        onNext={validateUploadStep}\n      >\n        <CodeUploadStep\n          setFileName={setProjectName}\n          error={error}\n          processZipFile={processZipFile}\n          processFolder={processFolder}\n        />\n      </StepModal.Step>\n\n      <StepModal.Step\n        title={t('chat.code-upload.step2-title', 'Confirm')}\n        nextLabel={t('common.finish', 'Finish')}\n        backLabel={t('form.button.back', 'Back')}\n        disableNext={!projectAttachment || isLoading}\n      >\n        <CodeConfirmationStep projectName={projectName} isLoading={isLoading} error={error} />\n      </StepModal.Step>\n    </StepModal>\n  );\n};\n"],"names":["UploadProjectContext","createContext","isCodeUploadOpen","submitOnFinish","openCodeUpload","closeCodeUpload","useUploadProjectToChat","useContext","UploadProjectToChatProvider","children","setIsCodeUploadOpen","useState","setSubmitOnFinish","_jsxs","Provider","value","_jsx","UploadCodeModal","DropZone","importType","onAddFiles","error","dragOver","setDragOver","inputRef","useRef","t","useTranslations","handleDragOver","event","preventDefault","handleDragEnter","handleDragLeave","handleClick","e","current","click","handleChange","files","Array","from","readDirectory","entry","reader","createReader","getEntries","Promise","resolve","reject","readEntries","entries","isFile","fileEntry","file","Object","defineProperty","writable","fullPath","substring","push","isDirectory","dirEntry","subFiles","length","handleDrop","dataTransfer","items","allFiles","i","item","webkitGetAsEntry","Flex","position","cursor","width","height","minHeight","borderStyle","borderColor","background","hasRadius","padding","justifyContent","direction","alignItems","gap","onDragEnter","onDragLeave","onDragOver","onDrop","FileZip","Folder","Typography","variant","textColor","textAlign","onClick","Box","tag","left","right","bottom","top","name","aria-label","tabIndex","zIndex","ref","onChange","style","opacity","type","accept","multiple","webkitdirectory","directory","CodeUploadStep","setFileName","processZipFile","processFolder","nextStep","useStepModal","wrap","flex","minWidth","replace","firstFile","folderPath","webkitRelativePath","folderName","split","err","console","CodeConfirmationStep","projectName","isLoading","AttachmentPreview","attachment","id","generateId","status","filename","url","mediaType","STRAPI_CODE_MIME_TYPE","setProjectName","projectAttachment","setProjectAttachment","addAttachments","useAttachments","useCodeUpload","onSuccess","sendMessage","openChat","input","setInput","useStrapiChat","handleCancel","handleComplete","role","parts","text","validateUploadStep","StepModal","open","onOpenChange","isOpen","title","onCancel","onComplete","Step","nextLabel","cancelLabel","disableNext","onNext","backLabel"],"mappings":"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"}