{"version":3,"file":"useFigmaUpload.mjs","sources":["../../../../../admin/src/components/AIChat/hooks/useFigmaUpload.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport type { Attachment } from '../lib/types/attachments';\n\n/**================================================================================\n * Constants\n *================================================================================*/\nexport const FIGMA_TOKEN_STORAGE_KEY = 'strapi-ai-figma-token';\n\n/**================================================================================\n * Types\n *================================================================================*/\nexport interface FigmaNodeData {\n  id: string;\n  name: string;\n  type: string;\n  children?: FigmaNodeData[];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any; // For other properties that Figma nodes may have\n}\n\nexport interface FigmaFileData {\n  document: FigmaNodeData;\n  schemaVersion: number;\n  name: string;\n  lastModified: string;\n  thumbnailUrl: string;\n  version: string;\n  role: string;\n}\n\nexport interface FigmaImage extends Attachment {}\n\ninterface UseFigmaUploadOptions {\n  onSuccess?: (attachments: FigmaImage[]) => void;\n  onError?: (error: string) => void;\n}\n\n/**================================================================================\n * Token Storage Utils\n *================================================================================*/\n\n/**\n * Get Figma token from localStorage\n */\nexport const getFigmaToken = (): string => {\n  try {\n    return localStorage.getItem(FIGMA_TOKEN_STORAGE_KEY) || '';\n  } catch (error) {\n    console.error('Error accessing localStorage:', error);\n    return '';\n  }\n};\n\n/**\n * Save Figma token to localStorage\n */\nexport const saveFigmaToken = (token: string): void => {\n  try {\n    localStorage.setItem(FIGMA_TOKEN_STORAGE_KEY, token);\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }\n};\n\n/**\n * Check if Figma token exists in localStorage\n */\nexport const hasFigmaToken = (): boolean => {\n  return !!getFigmaToken();\n};\n\n/**================================================================================\n * Utils\n *================================================================================*/\n\n/**\n * Extract file key and node ID from Figma URL\n * @param figmaUrl - Figma URL (e.g., https://www.figma.com/file/KEY/Title)\n */\nconst extractNodeFromFigmaUrl = (figmaUrl: string) => {\n  const figmaUrlPattern = /figma\\.com\\/(?:file|design)\\/([a-zA-Z0-9]+)\\/.*[?&]node-id=([^&]+)/;\n  const match = figmaUrl.match(figmaUrlPattern);\n\n  if (!match) {\n    throw new Error('Invalid Figma URL');\n  }\n\n  const fileKey = match[1];\n  const nodeId = decodeURIComponent(match[2]).replace(/-/g, ':');\n\n  return { fileKey, nodeId };\n};\n\n/**\n * Get token and validate it's available\n * @throws Error if token is not available\n */\nconst getValidToken = (): string => {\n  const token = getFigmaToken();\n  if (!token) {\n    throw new Error('Figma API token is required');\n  }\n  return token;\n};\n\n/**\n * Fetch Figma file data using the API\n * @param fileKey - Figma file key\n * @param nodeId - Figma node ID\n */\nconst fetchFigmaNode = async (fileKey: string, nodeId: string): Promise<FigmaFileData> => {\n  const token = getValidToken();\n\n  try {\n    const apiUrl = `https://api.figma.com/v1/files/${fileKey}/nodes?ids=${nodeId}`;\n\n    const response = await fetch(apiUrl, {\n      headers: {\n        'X-Figma-Token': token,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Figma API error: ${response.status} ${response.statusText}`);\n    }\n\n    const nodes = await response.json();\n\n    return nodes.nodes[nodeId];\n  } catch (err) {\n    const errorMessage = err instanceof Error ? err.message : 'Failed to fetch Figma data';\n    throw new Error(errorMessage);\n  }\n};\n\n/**\n * Recursively searches the node tree for FRAME nodes.\n * It stops searching within a branch once a FRAME is found.\n * @param node - The current FigmaNodeData to inspect.\n */\ninterface FrameInfo {\n  id: string;\n  name: string;\n}\n\nconst findFramesInNode = (node: FigmaNodeData): FrameInfo[] => {\n  const frames: FrameInfo[] = [];\n  if (node.type === 'FRAME') {\n    frames.push({\n      id: node.id,\n      name: node.name,\n    });\n    return frames;\n  }\n\n  if (node.children && node.children.length > 0) {\n    for (const child of node.children) {\n      // Continue searching in children if the current node is not a FRAME\n      frames.push(...findFramesInNode(child));\n    }\n  }\n\n  return frames;\n};\n\n/**\n * Fetch images for specific nodes from the Figma API\n * @param fileKey - Figma file key\n * @param nodeIds - Array of node IDs to render\n */\nconst fetchFigmaNodeImages = async (\n  fileKey: string,\n  nodeIds: string[]\n): Promise<{ images: Record<string, string> }> => {\n  const token = getValidToken();\n\n  if (nodeIds.length === 0) {\n    return { images: {} };\n  }\n  try {\n    // Max 50 node IDs per request according to Figma API docs\n    // We might need to chunk requests if nodeIds is very large\n    const idsQueryParam = nodeIds.slice(0, 50).join(',');\n    const apiUrl = `https://api.figma.com/v1/images/${fileKey}?ids=${idsQueryParam}&format=png&scale=0.4`;\n\n    const response = await fetch(apiUrl, {\n      headers: { 'X-Figma-Token': token },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(\n        `Figma API image error: ${response.status} ${response.statusText} - ${errorData}`\n      );\n    }\n\n    const result = await response.json();\n    if (result.err) {\n      throw new Error(`Figma API image error: ${result.err}`);\n    }\n\n    return result as { images: Record<string, string> };\n  } catch (err) {\n    const errorMessage = err instanceof Error ? err.message : 'Failed to fetch Figma node images';\n    throw new Error(errorMessage);\n  }\n};\n\n/**================================================================================\n * Hooks\n *================================================================================*/\nexport function useFigmaUpload({ onSuccess, onError }: UseFigmaUploadOptions = {}) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Main method to process a Figma URL\n   * @param figmaUrl - Figma URL to process\n   */\n  const processFigmaUrl = async (figmaUrl: string) => {\n    try {\n      // Check if token exists before proceeding\n      if (!hasFigmaToken()) {\n        const errorMessage = 'Figma API token is required';\n        setError(errorMessage);\n        onError?.(errorMessage);\n        throw new Error(errorMessage);\n      }\n\n      setIsLoading(true);\n      setError(null);\n\n      // 1. Extract file key from URL\n      const { fileKey, nodeId: selectedNode } = extractNodeFromFigmaUrl(figmaUrl);\n\n      // 2. Fetch base data from Figma API to get structure\n      const figmaData = await fetchFigmaNode(fileKey, selectedNode);\n      if (!figmaData.document) return;\n\n      // 3. Find frame nodes with their names\n      const frames = findFramesInNode(figmaData.document);\n      // Create a map of ID to name for later use\n      const frameNameMap = new Map(frames.map((frame) => [frame.id, frame.name]));\n      // Get just the IDs for the API call\n      const frameIds = frames.map((frame) => frame.id);\n\n      // 4. Fetch images for the identified nodes\n      const imageResponse = await fetchFigmaNodeImages(fileKey, frameIds);\n      const images = imageResponse.images;\n\n      // Use the name from our map instead of just the ID\n      const figmaImages = Object.entries(images).map(\n        ([id, url]) =>\n          ({\n            id,\n            type: 'file',\n            filename: frameNameMap.get(id),\n            mediaType: 'image/png',\n            url,\n            status: 'ready',\n          }) satisfies FigmaImage\n      );\n\n      onSuccess?.(figmaImages);\n      return figmaImages;\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Unknown error processing Figma URL';\n      setError(errorMessage);\n      onError?.(errorMessage);\n      console.error('Error processing Figma URL:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    processFigmaUrl,\n    isLoading: isLoading,\n    error: error,\n  };\n}\n"],"names":["FIGMA_TOKEN_STORAGE_KEY","getFigmaToken","localStorage","getItem","error","console","saveFigmaToken","token","setItem","hasFigmaToken","extractNodeFromFigmaUrl","figmaUrl","figmaUrlPattern","match","Error","fileKey","nodeId","decodeURIComponent","replace","getValidToken","fetchFigmaNode","apiUrl","response","fetch","headers","ok","status","statusText","nodes","json","err","errorMessage","message","findFramesInNode","node","frames","type","push","id","name","children","length","child","fetchFigmaNodeImages","nodeIds","images","idsQueryParam","slice","join","errorData","text","result","useFigmaUpload","onSuccess","onError","isLoading","setIsLoading","useState","setError","processFigmaUrl","selectedNode","figmaData","document","frameNameMap","Map","map","frame","frameIds","imageResponse","figmaImages","Object","entries","url","filename","get","mediaType"],"mappings":"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"}