{"version":3,"file":"useFeedback.mjs","sources":["../../../../../admin/src/components/AIChat/hooks/useFeedback.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { useNotification, useTracking } from '@strapi/admin/strapi-admin';\n\nimport { useStrapiChat } from '../providers/ChatProvider';\n\nimport { FeedbackReasonIds, useFetchSendFeedback } from './useAIFetch';\nimport { useTranslations } from './useTranslations';\n\nexport const useFeedback = () => {\n  const { fetch: sendFeedback, isPending, error } = useFetchSendFeedback();\n  const { id, messages, schemas } = useStrapiChat();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n  const { t } = useTranslations();\n\n  // Keep track of messages that have received feedback\n  const [votedMessages, setVotedMessages] = useState<Record<string, 'upvote' | 'downvote'>>({});\n\n  const hasVoted = (messageId: string) => {\n    return !!votedMessages[messageId];\n  };\n\n  const upvoteMessage = (messageId: string) => {\n    // Prevent spamming upvote\n    if (hasVoted(messageId)) {\n      return Promise.resolve();\n    }\n\n    trackUsage('didVoteAnswer', {\n      value: 'positive',\n    });\n\n    toggleNotification({\n      type: 'success',\n      message: t('chat.feedback.submitted', 'Thank you for your feedback! '),\n    });\n\n    // Record this message as upvoted\n    setVotedMessages((prev) => ({ ...prev, [messageId]: 'upvote' }));\n\n    return sendFeedback({\n      body: {\n        type: 'upvote',\n        chatId: id,\n        messageId,\n        messages,\n        schemas,\n      },\n    });\n  };\n\n  const downvoteMessage = (messageId: string, feedback: string, reasons: FeedbackReasonIds[]) => {\n    trackUsage('didVoteAnswer', {\n      value: 'negative',\n    });\n\n    toggleNotification({\n      type: 'success',\n      message: t('chat.feedback.submitted', 'Thank you for your feedback! '),\n    });\n\n    return sendFeedback({\n      body: {\n        type: 'downvote',\n        chatId: id,\n        messageId,\n        messages,\n        feedback,\n        reasons,\n        schemas,\n      },\n    });\n  };\n\n  return { upvoteMessage, downvoteMessage, isPending, error };\n};\n"],"names":["useFeedback","fetch","sendFeedback","isPending","error","useFetchSendFeedback","id","messages","schemas","useStrapiChat","toggleNotification","useNotification","trackUsage","useTracking","t","useTranslations","votedMessages","setVotedMessages","useState","hasVoted","messageId","upvoteMessage","Promise","resolve","value","type","message","prev","body","chatId","downvoteMessage","feedback","reasons"],"mappings":";;;;;;MASaA,WAAc,GAAA,IAAA;IACzB,MAAM,EAAEC,OAAOC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAE,GAAGC,oBAAAA,EAAAA;AAClD,IAAA,MAAM,EAAEC,EAAE,EAAEC,QAAQ,EAAEC,OAAO,EAAE,GAAGC,aAAAA,EAAAA;IAClC,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,eAAAA,EAAAA;IAC/B,MAAM,EAAEC,UAAU,EAAE,GAAGC,WAAAA,EAAAA;IACvB,MAAM,EAAEC,CAAC,EAAE,GAAGC,eAAAA,EAAAA;;AAGd,IAAA,MAAM,CAACC,aAAAA,EAAeC,gBAAiB,CAAA,GAAGC,SAAgD,EAAC,CAAA;AAE3F,IAAA,MAAMC,WAAW,CAACC,SAAAA,GAAAA;AAChB,QAAA,OAAO,CAAC,CAACJ,aAAa,CAACI,SAAU,CAAA;AACnC,KAAA;AAEA,IAAA,MAAMC,gBAAgB,CAACD,SAAAA,GAAAA;;AAErB,QAAA,IAAID,SAASC,SAAY,CAAA,EAAA;AACvB,YAAA,OAAOE,QAAQC,OAAO,EAAA;AACxB;AAEAX,QAAAA,UAAAA,CAAW,eAAiB,EAAA;YAC1BY,KAAO,EAAA;AACT,SAAA,CAAA;QAEAd,kBAAmB,CAAA;YACjBe,IAAM,EAAA,SAAA;AACNC,YAAAA,OAAAA,EAASZ,EAAE,yBAA2B,EAAA,+BAAA;AACxC,SAAA,CAAA;;QAGAG,gBAAiB,CAAA,CAACU,QAAU;AAAE,gBAAA,GAAGA,IAAI;AAAE,gBAAA,CAACP,YAAY;aAAS,CAAA,CAAA;AAE7D,QAAA,OAAOlB,YAAa,CAAA;YAClB0B,IAAM,EAAA;gBACJH,IAAM,EAAA,QAAA;gBACNI,MAAQvB,EAAAA,EAAAA;AACRc,gBAAAA,SAAAA;AACAb,gBAAAA,QAAAA;AACAC,gBAAAA;AACF;AACF,SAAA,CAAA;AACF,KAAA;IAEA,MAAMsB,eAAAA,GAAkB,CAACV,SAAAA,EAAmBW,QAAkBC,EAAAA,OAAAA,GAAAA;AAC5DpB,QAAAA,UAAAA,CAAW,eAAiB,EAAA;YAC1BY,KAAO,EAAA;AACT,SAAA,CAAA;QAEAd,kBAAmB,CAAA;YACjBe,IAAM,EAAA,SAAA;AACNC,YAAAA,OAAAA,EAASZ,EAAE,yBAA2B,EAAA,+BAAA;AACxC,SAAA,CAAA;AAEA,QAAA,OAAOZ,YAAa,CAAA;YAClB0B,IAAM,EAAA;gBACJH,IAAM,EAAA,UAAA;gBACNI,MAAQvB,EAAAA,EAAAA;AACRc,gBAAAA,SAAAA;AACAb,gBAAAA,QAAAA;AACAwB,gBAAAA,QAAAA;AACAC,gBAAAA,OAAAA;AACAxB,gBAAAA;AACF;AACF,SAAA,CAAA;AACF,KAAA;IAEA,OAAO;AAAEa,QAAAA,aAAAA;AAAeS,QAAAA,eAAAA;AAAiB3B,QAAAA,SAAAA;AAAWC,QAAAA;AAAM,KAAA;AAC5D;;;;"}