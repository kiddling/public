{"version":3,"file":"useLastSeenSchemas.mjs","sources":["../../../../../admin/src/components/AIChat/hooks/useLastSeenSchemas.ts"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\n\nimport { useDataManager } from '../../DataManager/useDataManager';\n\ninterface LastSeenSchema {\n  uid: string;\n  type: 'contentType' | 'component';\n  timestamp: number;\n}\n\nconst MAX_HISTORY_SIZE = 1; // Configurable max history size\n\n// Parse URL to extract content type or component information\nconst parseUrlForSchemaInfo = (): {\n  uid: string | null;\n  type: 'contentType' | 'component' | null;\n} => {\n  if (typeof window === 'undefined') {\n    return { uid: null, type: null };\n  }\n\n  const pathname = window.location.pathname;\n\n  // Content type URL pattern: /content-type-builder/content-types/[uid]\n  if (pathname.includes('/content-types/')) {\n    const contentTypeUid = pathname.split('/content-types/')[1];\n    if (contentTypeUid) {\n      return { uid: contentTypeUid, type: 'contentType' };\n    }\n  }\n\n  // Component URL pattern: /component-categories/[category]/[uid]\n  if (pathname.includes('/component-categories/')) {\n    const parts = pathname.split('/component-categories/')[1].split('/');\n    if (parts.length >= 2) {\n      const componentUid = parts[1];\n      return { uid: componentUid, type: 'component' };\n    }\n  }\n\n  return { uid: null, type: null };\n};\n\nexport const useLastSeenSchemas = () => {\n  // Raw tracked schemas (unfiltered)\n  const [rawSchemas, setRawSchemas] = useState<LastSeenSchema[]>([]);\n  const { components, contentTypes } = useDataManager();\n\n  // Update schema history when URL changes\n  useEffect(() => {\n    const handleUrlChange = () => {\n      const { uid, type } = parseUrlForSchemaInfo();\n      if (!uid || !type) return;\n\n      const newSchema: LastSeenSchema = {\n        uid,\n        type,\n        timestamp: Date.now(),\n      };\n\n      setRawSchemas((prevSchemas) => {\n        // Remove existing entry with the same UID if it exists\n        const filteredSchemas = prevSchemas.filter((schema) => schema.uid !== newSchema.uid);\n        // Add new schema to the beginning and limit size\n        return [newSchema, ...filteredSchemas].slice(0, MAX_HISTORY_SIZE);\n      });\n    };\n\n    // Check on initial load\n    handleUrlChange();\n\n    // Set up listeners for navigation\n    window.addEventListener('popstate', handleUrlChange);\n\n    // Custom event to detect SPA navigation\n    const detectRouteChange = () => {\n      let lastPathname = window.location.pathname;\n\n      const interval = setInterval(() => {\n        const currentPathname = window.location.pathname;\n        if (currentPathname !== lastPathname) {\n          lastPathname = currentPathname;\n          handleUrlChange();\n        }\n      }, 300);\n\n      return () => clearInterval(interval);\n    };\n\n    const cleanup = detectRouteChange();\n\n    return () => {\n      window.removeEventListener('popstate', handleUrlChange);\n      cleanup();\n    };\n  }, []);\n\n  // Filtered schemas - updated whenever components or contentTypes change\n  const lastSeenSchemas = useMemo(() => {\n    return rawSchemas.filter((schema) => {\n      if (schema.type === 'contentType') {\n        return Object.keys(contentTypes).some((uid) => uid === schema.uid);\n      }\n      if (schema.type === 'component') {\n        return Object.keys(components).some((uid) => uid === schema.uid);\n      }\n      return false;\n    });\n  }, [rawSchemas, components, contentTypes]);\n\n  // Function to clear history\n  const clearHistory = () => {\n    setRawSchemas([]);\n  };\n\n  return {\n    lastSeenSchemas,\n    clearHistory,\n  };\n};\n"],"names":["MAX_HISTORY_SIZE","parseUrlForSchemaInfo","window","uid","type","pathname","location","includes","contentTypeUid","split","parts","length","componentUid","useLastSeenSchemas","rawSchemas","setRawSchemas","useState","components","contentTypes","useDataManager","useEffect","handleUrlChange","newSchema","timestamp","Date","now","prevSchemas","filteredSchemas","filter","schema","slice","addEventListener","detectRouteChange","lastPathname","interval","setInterval","currentPathname","clearInterval","cleanup","removeEventListener","lastSeenSchemas","useMemo","Object","keys","some","clearHistory"],"mappings":"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"}