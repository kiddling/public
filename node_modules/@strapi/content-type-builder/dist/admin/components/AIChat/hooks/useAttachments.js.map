{"version":3,"file":"useAttachments.js","sources":["../../../../../admin/src/components/AIChat/hooks/useAttachments.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { useNotification } from '@strapi/admin/strapi-admin';\n\nimport { STRAPI_MAX_ATTACHMENT_SIZE, STRAPI_MAX_ATTACHMENTS } from '../lib/constants';\nimport { generateId } from '../lib/misc';\nimport { useStrapiChat } from '../providers/ChatProvider';\n\nimport { useFetchUploadMedia } from './useAIFetch';\n\nimport type { Attachment } from '../lib/types/attachments';\n\nexport function useAttachments() {\n  const { setAttachments, attachments, id: chatId } = useStrapiChat();\n  const { toggleNotification } = useNotification();\n\n  const { fetch: fetchUploadMedia } = useFetchUploadMedia();\n\n  /**\n   * Add an attachment directly\n   */\n  const addAttachments = useCallback(\n    (newAttachments: Attachment[]) => {\n      // TODO: Limits\n      if (!newAttachments) return;\n      setAttachments((prev: Attachment[]) => [...prev, ...newAttachments]);\n    },\n    [setAttachments]\n  );\n\n  /**\n   * Update an attachment\n   */\n  const updateAttachment = useCallback(\n    (attachment: { id: string } & Partial<Attachment>) => {\n      setAttachments((prev: Attachment[]) =>\n        prev.map((a) => (a.id === attachment.id ? { ...a, ...attachment } : a))\n      );\n    },\n    [setAttachments]\n  );\n\n  /**\n   * Remove an attachment\n   */\n  const removeAttachment = useCallback(\n    (attachment: Attachment) => {\n      setAttachments((prev: Attachment[]) => prev.filter((a) => a.id !== attachment.id));\n    },\n    [setAttachments]\n  );\n\n  /**\n   * Attach files to the chat\n   */\n  const attachFiles = useCallback(\n    async (newFiles: File[], description?: string) => {\n      // Attachment number limit\n      const attachmentCount = attachments?.length || 0;\n      const attachedFileCount = Array.from(newFiles).length;\n      let limitedFiles: File[] = newFiles;\n\n      if (attachmentCount + attachedFileCount > STRAPI_MAX_ATTACHMENTS) {\n        toggleNotification({\n          type: 'danger',\n          title: 'File limit reached: ',\n          message: `You can only upload up to ${STRAPI_MAX_ATTACHMENTS} files`,\n        });\n\n        // Prune the ones that would exceed the limit\n        const limit = STRAPI_MAX_ATTACHMENTS - attachmentCount;\n        limitedFiles = newFiles.slice(0, limit);\n      }\n\n      // Size limit\n      for (const file of limitedFiles) {\n        if (file.size > STRAPI_MAX_ATTACHMENT_SIZE) {\n          toggleNotification({\n            type: 'danger',\n            title: 'File too large: ',\n            message: 'One of the files is too large (15MB limit)',\n          });\n          // Remove from list\n          limitedFiles = limitedFiles.filter((f) => f !== file);\n        }\n      }\n\n      // Upload\n      for (const file of limitedFiles) {\n        const pendingAttachment: Attachment = {\n          id: generateId(),\n          type: 'file',\n          status: 'loading',\n          filename: file.name,\n          mediaType: file.type,\n          url: '',\n        };\n\n        // Store the attachment as loading\n        setAttachments((prev: Attachment[]) => [...prev, pendingAttachment]);\n\n        // Prepare form data\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('fileInfo', JSON.stringify({ name: file.name, chatId: chatId }));\n\n        // Upload file\n        fetchUploadMedia({ formData })\n          .then((result) => {\n            const attachment = result?.data;\n\n            // Remove attachment if there is an error\n            if (!result || result.error) {\n              toggleNotification({\n                type: 'danger',\n                title: 'Failed to upload file: ',\n                message: result?.error || 'Unknown error',\n                timeout: 5000,\n              });\n              removeAttachment(pendingAttachment);\n              return;\n            }\n\n            // Update the pending attachment\n            updateAttachment({\n              id: pendingAttachment.id,\n              url: attachment?.url || '',\n              status: 'ready',\n            });\n          })\n          .catch(() => removeAttachment(pendingAttachment));\n      }\n\n      if (description) {\n        toggleNotification({\n          title: 'Files attached',\n          message: description,\n        });\n      }\n    },\n    [\n      attachments,\n      setAttachments,\n      toggleNotification,\n      chatId,\n      fetchUploadMedia,\n      removeAttachment,\n      updateAttachment,\n    ]\n  );\n\n  /**\n   * Remove an attachment by index\n   */\n  const removeAttachmentByIndex = useCallback(\n    (index: number) => {\n      if (!attachments) return;\n      setAttachments(attachments.filter((_, i) => i !== index));\n    },\n    [setAttachments, attachments]\n  );\n\n  return { attachments, attachFiles, addAttachments, removeAttachment, removeAttachmentByIndex };\n}\n"],"names":["useAttachments","setAttachments","attachments","id","chatId","useStrapiChat","toggleNotification","useNotification","fetch","fetchUploadMedia","useFetchUploadMedia","addAttachments","useCallback","newAttachments","prev","updateAttachment","attachment","map","a","removeAttachment","filter","attachFiles","newFiles","description","attachmentCount","length","attachedFileCount","Array","from","limitedFiles","STRAPI_MAX_ATTACHMENTS","type","title","message","limit","slice","file","size","STRAPI_MAX_ATTACHMENT_SIZE","f","pendingAttachment","generateId","status","filename","name","mediaType","url","formData","FormData","append","JSON","stringify","then","result","data","error","timeout","catch","removeAttachmentByIndex","index","_","i"],"mappings":"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"}