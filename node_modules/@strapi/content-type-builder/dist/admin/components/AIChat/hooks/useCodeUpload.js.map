{"version":3,"file":"useCodeUpload.js","sources":["../../../../../admin/src/components/AIChat/hooks/useCodeUpload.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport JSZip from 'jszip';\nimport micromatch from 'micromatch';\n\nimport { generateId } from '../lib/misc';\nimport { Attachment } from '../lib/types/attachments';\nimport { useStrapiChat } from '../providers/ChatProvider';\n\nimport { useFetchUploadProject } from './useAIFetch';\n\nexport interface ProjectFile {\n  path: string;\n  content: string;\n}\n\nconst ALLOWED_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx', '.md', '.json'];\nconst MAX_LINES_PER_FILE = 5000; // Maximum number of lines per file\n\n// Common patterns to ignore\nconst DEFAULT_IGNORE_PATTERNS = [\n  '**/node_modules/**',\n  '**/.git/**',\n  '**/.next/**',\n  '**/dist/**',\n  '**/build/**',\n  '**/.cache/**',\n  '**/coverage/**',\n  '**/test/**',\n  '**/__tests__/**',\n  '**/*.test.*',\n  '**/*.spec.*',\n];\n\nconst isAllowedFile = (filename: string, ignorePatterns: string[] = []) => {\n  // Check if file matches any ignore pattern\n  if (micromatch.isMatch(filename, [...DEFAULT_IGNORE_PATTERNS, ...ignorePatterns])) {\n    return false;\n  }\n\n  // Check if file has allowed extension\n  return ALLOWED_EXTENSIONS.some((ext) => filename.toLowerCase().endsWith(ext));\n};\n\n/**\n * Prunes file content if it exceeds MAX_LINES\n */\nconst pruneFileContent = (content: string): string => {\n  const lines = content.split('\\n');\n\n  if (lines.length <= MAX_LINES_PER_FILE) {\n    return content;\n  }\n\n  const truncated = lines.slice(0, MAX_LINES_PER_FILE).join('\\n');\n\n  return `${truncated}\\n\\n// ... [${lines.length - MAX_LINES_PER_FILE} lines truncated, file too long] ...\\n\\n`;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * File processing options\n * -----------------------------------------------------------------------------------------------*/\nexport interface ProcessOptions {\n  /**\n   * Additional glob patterns to ignore\n   */\n  ignorePatterns?: string[];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Zip file processing\n * -----------------------------------------------------------------------------------------------*/\nexport async function openZipFile(\n  file: File,\n  options: ProcessOptions = {}\n): Promise<ProjectFile[]> {\n  const zip = new JSZip();\n  const contents = await zip.loadAsync(file);\n  const processedFiles: ProjectFile[] = [];\n\n  // Process all files in parallel\n  await Promise.all(\n    Object.keys(contents.files).map(async (filename) => {\n      const zipEntry = contents.files[filename];\n\n      // Skip directories and non-allowed files\n      if (zipEntry.dir || !isAllowedFile(filename, options.ignorePatterns)) {\n        return;\n      }\n\n      try {\n        const content = await zipEntry.async('string');\n        processedFiles.push({\n          path: filename,\n          content: pruneFileContent(content),\n        });\n      } catch (err) {\n        console.warn(`Failed to read file ${filename}:`, err);\n      }\n    })\n  );\n\n  // Sort files by path for consistency\n  return processedFiles.sort((a, b) => a.path.localeCompare(b.path));\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Folder processing\n * -----------------------------------------------------------------------------------------------*/\nexport async function processFolder(\n  files: FileList | File[],\n  options: ProcessOptions = {}\n): Promise<{ files: ProjectFile[]; projectName: string }> {\n  const processedFiles: ProjectFile[] = [];\n  let folderName = 'Project';\n\n  // Extract folder name from the first file's path\n  if (files.length > 0) {\n    const firstFile = files[0];\n    const folderPath = firstFile.webkitRelativePath || '';\n    const pathParts = folderPath.split('/');\n    if (pathParts.length > 0 && pathParts[0]) {\n      folderName = pathParts[0];\n    }\n  }\n\n  // Process all files in parallel\n  await Promise.all(\n    Array.from(files).map(async (file) => {\n      const filePath = file.webkitRelativePath || file.name;\n\n      // Skip non-allowed files\n      if (!isAllowedFile(filePath, options.ignorePatterns)) {\n        return;\n      }\n\n      try {\n        const content = await file.text();\n        processedFiles.push({\n          // Remove the root folder name from the path\n          path: filePath.includes('/') ? filePath.substring(filePath.indexOf('/') + 1) : filePath,\n          content: pruneFileContent(content),\n        });\n      } catch (err) {\n        console.warn(`Failed to read file ${filePath}:`, err);\n      }\n    })\n  );\n\n  // Sort files by path for consistency\n  return {\n    files: processedFiles.sort((a, b) => a.path.localeCompare(b.path)),\n    projectName: folderName,\n  };\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Zip file processing\n * -----------------------------------------------------------------------------------------------*/\nexport async function processZipFile(\n  file: File,\n  options: ProcessOptions = {}\n): Promise<{ files: ProjectFile[]; projectName: string }> {\n  const projectName = file.name.replace('.zip', '');\n  const files = await openZipFile(file, options);\n\n  return {\n    files,\n    projectName,\n  };\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Upload files\n * -----------------------------------------------------------------------------------------------*/\n\ninterface UseCodeUploadOptions {\n  onSuccess?: (attachment: Attachment, projectName: string) => void;\n  onError?: (error: string) => void;\n}\n\nexport function useCodeUpload({ onSuccess, onError }: UseCodeUploadOptions = {}) {\n  const [error, setError] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const {\n    fetch: fetchUploadProject,\n    isPending: isFetching,\n    error: fetchError,\n  } = useFetchUploadProject();\n  const { id: chatId } = useStrapiChat();\n\n  /**\n   * Upload processed files to the server\n   */\n  const processFiles = async (projectName: string, processedFiles: ProjectFile[]) => {\n    // Upload to server\n    const result = await fetchUploadProject({\n      body: {\n        chatId,\n        name: projectName,\n        type: 'code',\n        files: processedFiles,\n      },\n    });\n\n    if (!result?.data) {\n      throw new Error('Failed to upload project');\n    }\n\n    return result.data;\n  };\n\n  const handleZipFile = async (file: File) => {\n    try {\n      setError(null);\n      setIsProcessing(true);\n\n      const { files: processedFiles, projectName } = await processZipFile(file, {\n        ignorePatterns: ['**/node_modules/**'],\n      });\n\n      const projectAttachment = await processFiles(projectName, processedFiles);\n\n      onSuccess?.({ ...projectAttachment, id: generateId(), status: 'ready' }, projectName);\n      return projectAttachment;\n    } catch (err) {\n      setError('Failed to process zip file');\n      onError?.('Failed to process zip file');\n      console.error('Error processing zip:', err);\n      throw err;\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleFolder = async (files: FileList | File[]) => {\n    try {\n      setError(null);\n      setIsProcessing(true);\n\n      const { files: processedFiles, projectName } = await processFolder(files, {\n        ignorePatterns: ['**/node_modules/**'],\n      });\n\n      const projectAttachment = await processFiles(projectName, processedFiles);\n\n      onSuccess?.({ ...projectAttachment, id: generateId(), status: 'ready' }, projectName);\n      return projectAttachment;\n    } catch (err) {\n      setError('Failed to process folder');\n      onError?.('Failed to process folder');\n      console.error('Error processing folder:', err);\n      throw err;\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return {\n    processZipFile: handleZipFile,\n    processFolder: handleFolder,\n    isLoading: isProcessing || isFetching,\n    error: fetchError || error,\n  };\n}\n"],"names":["ALLOWED_EXTENSIONS","MAX_LINES_PER_FILE","DEFAULT_IGNORE_PATTERNS","isAllowedFile","filename","ignorePatterns","micromatch","isMatch","some","ext","toLowerCase","endsWith","pruneFileContent","content","lines","split","length","truncated","slice","join","openZipFile","file","options","zip","JSZip","contents","loadAsync","processedFiles","Promise","all","Object","keys","files","map","zipEntry","dir","async","push","path","err","console","warn","sort","a","b","localeCompare","processFolder","folderName","firstFile","folderPath","webkitRelativePath","pathParts","Array","from","filePath","name","text","includes","substring","indexOf","projectName","processZipFile","replace","useCodeUpload","onSuccess","onError","error","setError","useState","isProcessing","setIsProcessing","fetch","fetchUploadProject","isPending","isFetching","fetchError","useFetchUploadProject","id","chatId","useStrapiChat","processFiles","result","body","type","data","Error","handleZipFile","projectAttachment","generateId","status","handleFolder","isLoading"],"mappings":"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"}