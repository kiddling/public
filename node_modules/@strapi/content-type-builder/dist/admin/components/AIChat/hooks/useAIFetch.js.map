{"version":3,"file":"useAIFetch.js","sources":["../../../../../admin/src/components/AIChat/hooks/useAIFetch.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace */\n\n/**\n * In charge of fetching data from Strapi AI endpoints\n */\n\nimport { useState } from 'react';\n\nimport { UIMessage, useChat } from '@ai-sdk/react';\nimport { useAppInfo } from '@strapi/admin/strapi-admin';\nimport { useGetAIUsageQuery } from '@strapi/admin/strapi-admin/ee';\nimport { DefaultChatTransport } from 'ai';\n\nimport { fetchAI, makeChatFetch, safeParseJson } from '../lib/aiClient';\nimport { STRAPI_AI_CHAT_URL, STRAPI_AI_URL } from '../lib/constants';\nimport { Attachment } from '../lib/types/attachments';\nimport { Schema } from '../lib/types/schema';\n\n/* -------------------------------------------------------------------------------------------------\n * Types\n * -----------------------------------------------------------------------------------------------*/\n/**\n * Chat title\n */\nexport namespace GenerateTitle {\n  export interface Request {\n    body: {\n      chatId: string;\n      message: string;\n    };\n  }\n  export interface Response {\n    data: {\n      title: string;\n    };\n    error?: string;\n  }\n}\n\n/**\n * Upload a project to the chat\n */\nexport namespace UploadProject {\n  export interface Request {\n    body: {\n      chatId: string;\n      name: string;\n      type: 'code';\n      files: {\n        path: string;\n        content: string;\n      }[];\n    };\n  }\n  export interface Response {\n    data: Attachment;\n    error?: string;\n  }\n}\n\n/**\n * Send chat feedback\n */\nexport type FeedbackReasonIds =\n  | 'invalid_schema'\n  | 'bad_recommendation'\n  | 'slow'\n  | 'instructions_ignored'\n  | 'being_lazy'\n  | 'other';\n\nnamespace SendFeedback {\n  export interface Request {\n    body: {\n      chatId: string;\n      type: 'upvote' | 'downvote';\n      feedback?: string;\n      reasons?: FeedbackReasonIds[];\n      messageId: string;\n      messages: UIMessage[];\n      schemas: Schema[];\n    };\n  }\n}\n\n/**\n * Upload media\n */\nexport namespace UploadMedia {\n  export interface Request {\n    body: {\n      url: string; // base64 image\n      filename: string;\n      chatId: string;\n    };\n  }\n  export interface Response {\n    data: Attachment;\n    error?: string;\n  }\n}\n\n/**\n * Collection of API endpoints and their corresponding request/response types\n */\ntype AIEndpoints = {\n  '/schemas/chat/generate-title': {\n    request: GenerateTitle.Request;\n    response: GenerateTitle.Response;\n  };\n  '/schemas/chat/attachment': {\n    request: UploadProject.Request;\n    response: UploadProject.Response;\n  };\n  '/schemas/chat/feedback': {\n    request: SendFeedback.Request;\n    response: void;\n  };\n  '/media/upload': {\n    request: UploadMedia.Request;\n    response: UploadMedia.Response;\n  };\n};\n\n// Helper type to extract the request type for a given endpoint\ntype RequestType<T extends keyof AIEndpoints> = AIEndpoints[T]['request'];\n\n// Helper type to extract the response type for a given endpoint\ntype ResponseType<T extends keyof AIEndpoints> = AIEndpoints[T]['response'];\n\n/* -------------------------------------------------------------------------------------------------\n * Hooks\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TOO_MANY_REQUESTS_ERROR = 'Too many requests';\nexport const LICENSE_LIMIT_REACHED_ERROR = 'License limit';\nexport const LICENSE_LIMIT_EXCEEDED_ERROR = 'AI credit limit exceeded';\nexport const CHAT_TOO_LONG_ERROR = 'Chat too long';\nexport const ATTACHMENT_TOO_BIG_ERROR = 'Attachment too big';\nexport const ATTACHMENT_NOT_FOUND_ERROR = 'Attachment not found';\nexport const INVALID_REQUEST_ERROR = 'Invalid request';\n\n/**\n * Base hook factory for making type-safe API calls to Strapi AI endpoints.\n * Creates a hook specific to a single endpoint.\n */\nexport const createAIFetchHook = <T extends keyof AIEndpoints>(endpoint: T) => {\n  return () => {\n    const strapiVersion = useAppInfo('useAIFetch', (state) => state.strapiVersion);\n    const projectId = useAppInfo('useAIFetch', (state) => state.projectId);\n    const userId = useAppInfo('useAIFetch-user', (state) => state.userId);\n    const aiUsage = useGetAIUsageQuery(undefined, { refetchOnMountOrArgChange: true });\n\n    const [isPending, setIsPending] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    /**\n     * Make a type-safe API call to the specified Strapi AI endpoint with retry logic\n     */\n    const fetchData = async (\n      options: Omit<RequestInit, 'body'> & Partial<RequestType<T>> & { formData?: FormData } = {}\n    ): Promise<ResponseType<T> | null> => {\n      setIsPending(true);\n      setError(null);\n\n      try {\n        const fullUrl = `${STRAPI_AI_URL}${endpoint}`;\n        const isJson = !!options.body && !options.formData;\n\n        const response = await fetchAI(fullUrl, {\n          method: 'POST',\n          headers: isJson\n            ? { 'Content-Type': 'application/json', ...(options.headers || {}) }\n            : options.headers,\n          body: options.formData\n            ? options.formData\n            : isJson\n              ? JSON.stringify(options.body || {})\n              : undefined,\n          ctx: { strapiVersion, projectId, userId },\n        });\n        // refetch ai usage data on every successful request\n        aiUsage.refetch();\n\n        const body = await safeParseJson(response);\n\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        return body as ResponseType<T>;\n      } catch (err) {\n        setError(err instanceof Error ? err.message : `Failed to fetch data from ${endpoint}`);\n        return null;\n      } finally {\n        setIsPending(false);\n      }\n    };\n\n    return {\n      isPending,\n      error,\n      fetch: fetchData,\n    };\n  };\n};\n\n// Create specific hooks for each endpoint\nexport const useFetchGenerateTitle = createAIFetchHook('/schemas/chat/generate-title');\nexport const useFetchUploadProject = createAIFetchHook('/schemas/chat/attachment');\nexport const useFetchSendFeedback = createAIFetchHook('/schemas/chat/feedback');\nexport const useFetchUploadMedia = createAIFetchHook('/media/upload');\n\n/**\n * Hook wrapper for AI SDK's useChat with Strapi-specific configuration\n */\nexport const useAIChat: typeof useChat = (props) => {\n  const strapiVersion = useAppInfo('useAIChat', (state) => state.strapiVersion);\n  const projectId = useAppInfo('useAIFetch', (state) => state.projectId);\n  const userId = useAppInfo('useAIChat-user', (state) => state.userId);\n\n  const customFetch = makeChatFetch({ strapiVersion, projectId, userId });\n\n  return useChat({\n    ...props,\n    transport: new DefaultChatTransport({\n      api: STRAPI_AI_CHAT_URL,\n      fetch: customFetch,\n    }),\n  });\n};\n"],"names":["TOO_MANY_REQUESTS_ERROR","LICENSE_LIMIT_REACHED_ERROR","LICENSE_LIMIT_EXCEEDED_ERROR","CHAT_TOO_LONG_ERROR","createAIFetchHook","endpoint","strapiVersion","useAppInfo","state","projectId","userId","aiUsage","useGetAIUsageQuery","undefined","refetchOnMountOrArgChange","isPending","setIsPending","useState","error","setError","fetchData","options","fullUrl","STRAPI_AI_URL","isJson","body","formData","response","fetchAI","method","headers","JSON","stringify","ctx","refetch","safeParseJson","ok","Error","statusText","err","message","fetch","useFetchGenerateTitle","useFetchUploadProject","useFetchSendFeedback","useFetchUploadMedia","useAIChat","props","customFetch","makeChatFetch","useChat","transport","DefaultChatTransport","api","STRAPI_AI_CHAT_URL"],"mappings":"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"}