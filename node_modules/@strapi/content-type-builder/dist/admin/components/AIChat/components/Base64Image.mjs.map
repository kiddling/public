{"version":3,"file":"Base64Image.mjs","sources":["../../../../../admin/src/components/AIChat/components/Base64Image.tsx"],"sourcesContent":["import { useState, useEffect, ImgHTMLAttributes } from 'react';\n\nimport { Flex, Loader } from '@strapi/design-system';\nimport { CrossCircle } from '@strapi/icons';\n\nconst blobToBase64 = (blob: Blob): Promise<string | ArrayBuffer | null> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};\n\n// Check if a string is already a data URL (base64 image)\nconst isBase64Image = (src: string): boolean => {\n  return src.startsWith('data:image/');\n};\n\ninterface Base64ImgProps extends ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  inferSize?: boolean;\n  onLoad?: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;\n  onError?: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;\n}\n\nexport const Base64Img: React.FC<Base64ImgProps> = ({\n  src,\n  alt,\n  inferSize = false,\n  onLoad: externalOnLoad,\n  onError: externalOnError,\n  ...rest\n}) => {\n  const [base64Src, setBase64Src] = useState<string | null>(null);\n  const [dimensions, setDimensions] = useState<{ width?: number; height?: number }>({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    const fetchAndConvert = async () => {\n      setIsLoading(true);\n      setHasError(false);\n\n      // If src is already a base64 string, use it directly\n      if (isBase64Image(src)) {\n        setBase64Src(src);\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        // TODO: Find a better way of doing this\n        // If url is from strapi-ai-staging.s3.us-east-1.amazonaws.com or strapi-ai-production.s3.us-east-1.amazonaws.com, use it directly\n        const url = new URL(src);\n        const allowedDomains = [\n          'strapi-ai-staging.s3.us-east-1.amazonaws.com',\n          'strapi-ai-production.s3.us-east-1.amazonaws.com',\n        ];\n\n        if (allowedDomains.includes(url.hostname)) {\n          setBase64Src(src);\n          setIsLoading(false);\n          return;\n        }\n      } catch (e) {\n        // If URL parsing fails, continue with the fetch attempt\n      }\n\n      try {\n        // Only fetch if it's a URL and not already a base64 string\n        const response = await fetch(src);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const blob = await response.blob();\n        const dataUrl = await blobToBase64(blob);\n        setBase64Src(dataUrl as string);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error converting image to base64:', error);\n        setHasError(true);\n        setIsLoading(false);\n      }\n    };\n\n    fetchAndConvert();\n  }, [src, externalOnError]);\n\n  const handleImageLoad = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    if (inferSize) {\n      const { naturalWidth, naturalHeight } = e.currentTarget;\n      setDimensions({ width: naturalWidth, height: naturalHeight });\n    }\n\n    if (externalOnLoad) {\n      externalOnLoad(e);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Flex direction=\"column\" gap={2} alignItems=\"center\" width=\"100%\">\n        <Loader small />\n      </Flex>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <Flex direction=\"column\" gap={2} alignItems=\"center\" width=\"100%\">\n        <CrossCircle width={24} height={24} fill=\"danger600\" />\n      </Flex>\n    );\n  }\n\n  // Build props for the img element\n  const imgProps: ImgHTMLAttributes<HTMLImageElement> = {\n    src: base64Src || '',\n    alt,\n    onLoad: handleImageLoad,\n    ...rest,\n  };\n\n  // If inferSize is enabled and width/height weren't explicitly provided,\n  // merge the inferred dimensions into the props once available.\n  if (inferSize && !rest.width && !rest.height && dimensions.width && dimensions.height) {\n    imgProps.width = dimensions.width;\n    imgProps.height = dimensions.height;\n  }\n\n  return base64Src ? <img {...imgProps} /> : null;\n};\n"],"names":["blobToBase64","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","isBase64Image","src","startsWith","Base64Img","alt","inferSize","onLoad","externalOnLoad","onError","externalOnError","rest","base64Src","setBase64Src","useState","dimensions","setDimensions","isLoading","setIsLoading","hasError","setHasError","useEffect","fetchAndConvert","url","URL","allowedDomains","includes","hostname","e","response","fetch","ok","Error","status","dataUrl","error","console","handleImageLoad","naturalWidth","naturalHeight","currentTarget","width","height","_jsx","Flex","direction","gap","alignItems","Loader","small","CrossCircle","fill","imgProps","img"],"mappings":"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"}