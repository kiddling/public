{"version":3,"file":"Dropzone.mjs","sources":["../../../../../admin/src/components/AIChat/components/Dropzone.tsx"],"sourcesContent":["import { createContext, useCallback, useContext, useEffect } from 'react';\n\nimport { Flex, Box, Typography } from '@strapi/design-system';\nimport { useDropzone } from 'react-dropzone';\n\n/* -------------------------------------------------------------------------------------------------\n * Hooks\n * -----------------------------------------------------------------------------------------------*/\n\ninterface UseClipboardPasteProps {\n  onAddFiles: (files: File[]) => void;\n  isEnabled?: boolean;\n  accept?: {\n    [key: string]: string[];\n  };\n}\n\nexport const useClipboardPasteImages = ({\n  onAddFiles,\n  isEnabled = false,\n}: UseClipboardPasteProps) => {\n  const handlePaste = useCallback(\n    async (e: ClipboardEvent) => {\n      if (!isEnabled) return;\n      // Try to get items from clipboard\n      const items = e.clipboardData?.items;\n\n      if (!items || items.length === 0) return;\n\n      const files: File[] = [];\n\n      // Process clipboard items\n      for (const item of items) {\n        if (item.kind === 'file') {\n          const file = item.getAsFile();\n          if (file && file.type.startsWith('image/')) {\n            files.push(file);\n          }\n        }\n      }\n\n      if (files.length > 0) {\n        onAddFiles(files);\n        e.preventDefault(); // Prevent the default paste behavior\n      }\n    },\n    [isEnabled, onAddFiles]\n  );\n\n  // Set up the paste event listener\n  useEffect(() => {\n    document.addEventListener('paste', handlePaste);\n    return () => {\n      document.removeEventListener('paste', handlePaste);\n    };\n  }, [handlePaste]);\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Dropzone Context\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface DropzoneContextValue {\n  isEnabled?: boolean;\n  isDragActive?: boolean;\n  onAddFiles?: (files: File[]) => void;\n}\n\nconst DropzoneContext = createContext<DropzoneContextValue>({});\n\nexport const useDropzoneContext = () => useContext(DropzoneContext);\n\n/* -------------------------------------------------------------------------------------------------\n * Dropzone Root\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface DropzoneRootProps extends React.ComponentPropsWithoutRef<typeof Flex> {\n  children: React.ReactNode;\n  isEnabled?: boolean;\n  onAddFiles?: (files: File[]) => void;\n  accept?: {\n    [key: string]: string[];\n  };\n}\n\nexport const Root = ({\n  children,\n  isEnabled = true,\n  onAddFiles = () => {},\n  accept = { 'image/*': [] },\n  ...props\n}: DropzoneRootProps) => {\n  // Use clipboard paste hook for handling clipboard events\n  useClipboardPasteImages({ onAddFiles, isEnabled, accept });\n\n  // Use dropzone for drag and drop functionality\n  const { getRootProps, isDragActive } = useDropzone({\n    onDrop: onAddFiles,\n    noClick: true,\n    noKeyboard: true,\n    accept,\n  });\n\n  return (\n    <DropzoneContext.Provider\n      value={{\n        isEnabled,\n        isDragActive,\n        onAddFiles,\n      }}\n    >\n      <Flex\n        direction=\"column\"\n        alignItems=\"flex-start\"\n        width=\"100%\"\n        position=\"relative\"\n        {...getRootProps()}\n        {...props}\n      >\n        {children}\n      </Flex>\n    </DropzoneContext.Provider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Dropzone Area\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DropzoneAreaProps extends React.ComponentPropsWithoutRef<typeof Flex> {\n  error?: string | null;\n  title?: string;\n}\n\nconst Area = ({ error, title, ...props }: DropzoneAreaProps) => {\n  const { isEnabled, isDragActive } = useDropzoneContext();\n\n  // If not dragging, don't render the dropzone area\n  if (!isDragActive) {\n    return null;\n  }\n\n  const displayTitle = title || 'Drop images here';\n\n  return (\n    <Flex\n      position=\"absolute\"\n      top={0}\n      left={0}\n      right={0}\n      bottom={0}\n      zIndex={2}\n      cursor={isEnabled ? 'pointer' : 'not-allowed'}\n      width=\"100%\"\n      height=\"100%\"\n      borderStyle=\"dashed\"\n      borderColor={error ? 'danger600' : 'primary500'}\n      background={error ? 'danger100' : 'primary100'}\n      hasRadius\n      padding={7}\n      justifyContent=\"center\"\n      direction=\"column\"\n      alignItems=\"center\"\n      gap={2}\n      {...props}\n    >\n      <Box width=\"24px\" height=\"24px\">\n        <svg\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M19.5 13.572L12 6.072L4.5 13.572\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n          <path\n            d=\"M12 6.072V20.072\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n          <path\n            d=\"M3.9998 20.072H20.0001\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n        </svg>\n      </Box>\n      <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n        <Typography variant=\"omega\" textColor=\"neutral600\" textAlign=\"center\">\n          {displayTitle}\n        </Typography>\n        {error && (\n          <Typography variant=\"pi\" textColor=\"danger600\">\n            {error}\n          </Typography>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Dropzone Compound\n * -----------------------------------------------------------------------------------------------*/\n\nexport const Dropzone = {\n  Root,\n  Area,\n  useDropzoneContext,\n};\n"],"names":["useClipboardPasteImages","onAddFiles","isEnabled","handlePaste","useCallback","e","items","clipboardData","length","files","item","kind","file","getAsFile","type","startsWith","push","preventDefault","useEffect","document","addEventListener","removeEventListener","DropzoneContext","createContext","useDropzoneContext","useContext","Root","children","accept","props","getRootProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","_jsx","Provider","value","Flex","direction","alignItems","width","position","Area","error","title","displayTitle","_jsxs","top","left","right","bottom","zIndex","cursor","height","borderStyle","borderColor","background","hasRadius","padding","justifyContent","gap","Box","svg","viewBox","fill","xmlns","path","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","Typography","variant","textColor","textAlign","Dropzone"],"mappings":"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"}