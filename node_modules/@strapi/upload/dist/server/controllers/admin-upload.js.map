{"version":3,"file":"admin-upload.js","sources":["../../../server/src/controllers/admin-upload.ts"],"sourcesContent":["import _ from 'lodash';\nimport { errors, async } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\nimport { validateBulkUpdateBody, validateUploadBody } from './validation/admin/upload';\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\nimport { FileInfo } from '../types';\n\nexport default {\n  async bulkUpdateFileInfo(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      request: { body },\n    } = ctx;\n\n    const { updates } = await validateBulkUpdateBody(body);\n    const uploadService = getService('upload');\n\n    const results = await async.map(\n      updates,\n      async ({ id, fileInfo }: { id: number; fileInfo: FileInfo }) => {\n        const { pm } = await findEntityAndCheckPermissions(\n          userAbility,\n          ACTIONS.update,\n          FILE_MODEL_UID,\n          id\n        );\n\n        const updated = await uploadService.updateFileInfo(id, fileInfo as any, { user });\n        return pm.sanitizeOutput(updated, { action: ACTIONS.read });\n      }\n    );\n\n    ctx.body = results;\n  },\n\n  async updateFileInfo(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    const data = await validateUploadBody(body);\n\n    const file = await uploadService.updateFileInfo(id, data.fileInfo as any, { user });\n\n    ctx.body = await pm.sanitizeOutput(file, { action: ACTIONS.read });\n  },\n\n  async replaceFile(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    if (Array.isArray(files)) {\n      throw new errors.ApplicationError('Cannot replace a file with multiple ones');\n    }\n\n    const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\n    const replacedFile = await uploadService.replace(id, { data, file: files }, { user });\n\n    // Sign file urls for private providers\n    const signedFile = await getService('file').signFileUrls(replacedFile);\n\n    ctx.body = await pm.sanitizeOutput(signedFile, { action: ACTIONS.read });\n  },\n\n  async uploadFiles(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    const uploadService = getService('upload');\n    const pm = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.create,\n      model: FILE_MODEL_UID,\n    });\n\n    if (!pm.isAllowed) {\n      return ctx.forbidden();\n    }\n\n    const data = await validateUploadBody(body, Array.isArray(files));\n\n    let filesArray = Array.isArray(files) ? files : [files];\n\n    if (\n      data.fileInfo &&\n      Array.isArray(data.fileInfo) &&\n      filesArray.length === data.fileInfo.length\n    ) {\n      // Reorder filesArray to match data.fileInfo order\n      const alignedFilesArray = data.fileInfo\n        .map((info) => {\n          return filesArray.find((file) => file.originalFilename === info.name);\n        })\n        .filter(Boolean) as any[];\n\n      filesArray = alignedFilesArray;\n    }\n\n    // Upload files first to get thumbnails\n    const uploadedFiles = await uploadService.upload({ data, files: filesArray }, { user });\n    if (uploadedFiles.some((file) => file.mime?.startsWith('image/'))) {\n      strapi.telemetry.send('didUploadImage');\n    }\n\n    const aiMetadataService = getService('aiMetadata');\n\n    // AFTER upload - use thumbnail versions for AI processing\n    if (await aiMetadataService.isEnabled()) {\n      try {\n        // Use thumbnail URLs instead of original files\n        const thumbnailFiles = uploadedFiles.map(\n          (file) =>\n            ({\n              filepath: file.formats?.thumbnail?.url || file.url, // Use thumbnail if available\n              mimetype: file.mime,\n              originalFilename: file.name,\n              size: file.formats?.thumbnail?.size || file.size,\n              provider: file.provider,\n            }) as unknown as any\n        );\n\n        const metadataResults = await aiMetadataService.processFiles(thumbnailFiles);\n\n        // Update the uploaded files with AI metadata\n        await Promise.all(\n          uploadedFiles.map(async (uploadedFile, index) => {\n            const aiMetadata = metadataResults[index];\n            if (aiMetadata) {\n              await uploadService.updateFileInfo(\n                uploadedFile.id,\n                {\n                  alternativeText: aiMetadata.altText,\n                  caption: aiMetadata.caption,\n                },\n                { user }\n              );\n\n              uploadedFiles[index].alternativeText = aiMetadata.altText;\n              uploadedFiles[index].caption = aiMetadata.caption;\n            }\n          })\n        );\n      } catch (error) {\n        strapi.log.warn('AI metadata generation failed, proceeding without AI enhancements', {\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n    }\n\n    // Sign file urls for private providers\n    const signedFiles = await async.map(uploadedFiles, getService('file').signFileUrls);\n\n    ctx.body = await pm.sanitizeOutput(signedFiles, { action: ACTIONS.read });\n    ctx.status = 201;\n  },\n\n  // TODO: split into multiple endpoints\n  async upload(ctx: Context) {\n    const {\n      query: { id },\n      request: { files: { files } = {} },\n    } = ctx;\n\n    if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\n      if (id) {\n        return this.updateFileInfo(ctx);\n      }\n\n      throw new errors.ApplicationError('Files are empty');\n    }\n\n    await (id ? this.replaceFile : this.uploadFiles)(ctx);\n  },\n};\n"],"names":["bulkUpdateFileInfo","ctx","state","userAbility","user","request","body","updates","validateBulkUpdateBody","uploadService","getService","results","async","map","id","fileInfo","pm","findEntityAndCheckPermissions","ACTIONS","update","FILE_MODEL_UID","updated","updateFileInfo","sanitizeOutput","action","read","query","errors","ValidationError","data","validateUploadBody","file","replaceFile","files","Array","isArray","ApplicationError","replacedFile","replace","signedFile","signFileUrls","uploadFiles","strapi","service","createPermissionsManager","ability","create","model","isAllowed","forbidden","filesArray","length","alignedFilesArray","info","find","originalFilename","name","filter","Boolean","uploadedFiles","upload","some","mime","startsWith","telemetry","send","aiMetadataService","isEnabled","thumbnailFiles","filepath","formats","thumbnail","url","mimetype","size","provider","metadataResults","processFiles","Promise","all","uploadedFile","index","aiMetadata","alternativeText","altText","caption","error","log","warn","Error","message","String","signedFiles","status","_","isEmpty"],"mappings":"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"}