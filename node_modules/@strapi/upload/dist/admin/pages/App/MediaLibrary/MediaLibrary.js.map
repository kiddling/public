{"version":3,"file":"MediaLibrary.js","sources":["../../../../../admin/src/pages/App/MediaLibrary/MediaLibrary.tsx"],"sourcesContent":["// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport {\n  Page,\n  SearchInput,\n  Pagination,\n  useTracking,\n  useQueryParams,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Checkbox,\n  Box,\n  Divider,\n  Flex,\n  IconButton,\n  Typography,\n  VisuallyHidden,\n  Grid,\n} from '@strapi/design-system';\nimport { Cog, GridFour as GridIcon, List, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link as ReactRouterLink, useNavigate, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { AIUploadModal } from '../../../ai/components/AIUploadModal';\nimport { AssetGridList } from '../../../components/AssetGridList/AssetGridList';\nimport { EditAssetDialog } from '../../../components/EditAssetDialog/EditAssetContent';\nimport { EditFolderDialog } from '../../../components/EditFolderDialog/EditFolderDialog';\nimport { FolderCard } from '../../../components/FolderCard/FolderCard/FolderCard';\nimport { FolderCardBody } from '../../../components/FolderCard/FolderCardBody/FolderCardBody';\nimport { FolderCardBodyAction } from '../../../components/FolderCard/FolderCardBodyAction/FolderCardBodyAction';\nimport { FolderCardCheckbox } from '../../../components/FolderCard/FolderCardCheckbox/FolderCardCheckbox';\nimport { FolderGridList } from '../../../components/FolderGridList/FolderGridList';\nimport { SortPicker } from '../../../components/SortPicker/SortPicker';\nimport { TableList } from '../../../components/TableList/TableList';\nimport { UploadAssetDialog } from '../../../components/UploadAssetDialog/UploadAssetDialog';\nimport { localStorageKeys, viewOptions } from '../../../constants';\nimport { useAIAvailability } from '../../../hooks/useAiAvailability';\nimport { useAssets } from '../../../hooks/useAssets';\nimport { useFolder } from '../../../hooks/useFolder';\nimport { useFolders } from '../../../hooks/useFolders';\nimport { useMediaLibraryPermissions } from '../../../hooks/useMediaLibraryPermissions';\nimport { usePersistentState } from '../../../hooks/usePersistentState';\nimport { useSelectionState } from '../../../hooks/useSelectionState';\nimport { containsAssetFilter, getBreadcrumbDataML, getFolderURL, getTrad } from '../../../utils';\n\nimport { BulkActions } from './components/BulkActions';\nimport { EmptyOrNoPermissions } from './components/EmptyOrNoPermissions';\nimport { Filters } from './components/Filters';\nimport { Header } from './components/Header';\n\nimport type { BulkActionsProps } from './components/BulkActions';\nimport type { HeaderProps } from './components/Header';\nimport type { Query } from '../../../../../shared/contracts/files';\nimport type { FolderDefinition } from '../../../../../shared/contracts/folders';\nimport type { AssetGridListProps } from '../../../components/AssetGridList/AssetGridList';\nimport type { Asset } from '../../../components/EditAssetDialog/EditAssetContent';\nimport type { FolderRow, FileRow, TableListProps } from '../../../components/TableList/TableList';\n\nconst BoxWithHeight = styled(Box)`\n  height: 3.2rem;\n  display: flex;\n  align-items: center;\n`;\n\nconst TypographyMaxWidth = styled(Typography)`\n  max-width: 100%;\n`;\n\nconst ActionContainer = styled(Box)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport const MediaLibrary = () => {\n  const navigate = useNavigate();\n  const {\n    canRead,\n    canCreate,\n    canUpdate,\n    canCopyLink,\n    canDownload,\n    canConfigureView,\n    isLoading: permissionsLoading,\n  } = useMediaLibraryPermissions();\n  const { isEnabled: isAiEnabled, status: aiAvailabilityStatus } = useAIAvailability();\n  const currentFolderToEditRef = React.useRef<HTMLDivElement>();\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const { trackUsage } = useTracking();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n  const isFiltering = Boolean(query._q || query.filters);\n  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);\n  const isGridView = view === viewOptions.GRID;\n\n  const {\n    data: assetsData,\n    isLoading: assetsLoading,\n    error: assetsError,\n  } = useAssets({\n    skipWhen: !canRead,\n    query,\n  });\n\n  const {\n    data: foldersData,\n    isLoading: foldersLoading,\n    error: foldersError,\n  } = useFolders({\n    enabled: canRead && assetsData?.pagination?.page === 1 && !containsAssetFilter(query),\n    query,\n  });\n\n  const {\n    data: currentFolder,\n    isLoading: isCurrentFolderLoading,\n    error: currentFolderError,\n  } = useFolder(query?.folder as number | null | undefined, {\n    enabled: canRead && !!query?.folder,\n  });\n\n  // Folder was not found: redirect to the media library root\n  if (currentFolderError?.name === 'NotFoundError') {\n    navigate(pathname);\n  }\n\n  const folders =\n    foldersData?.map((folder) => ({\n      ...folder,\n      type: 'folder',\n      folderURL: getFolderURL(pathname, query, {\n        folder: folder.id.toString(),\n        folderPath: folder.path,\n      }),\n      isSelectable: canUpdate,\n    })) ?? [];\n  const folderCount = folders?.length || 0;\n  const assets =\n    assetsData?.results?.map((asset) => ({ ...asset, type: 'asset', isSelectable: canUpdate })) ||\n    [];\n  const assetCount = assets?.length ?? 0;\n  const totalAssetCount = assetsData?.pagination?.total;\n\n  const isLoading =\n    isCurrentFolderLoading ||\n    foldersLoading ||\n    permissionsLoading ||\n    assetsLoading ||\n    aiAvailabilityStatus === 'loading';\n  const [showUploadAssetDialog, setShowUploadAssetDialog] = React.useState(false);\n  const [showEditFolderDialog, setShowEditFolderDialog] = React.useState(false);\n  const [assetToEdit, setAssetToEdit] = React.useState<Asset | undefined>(undefined);\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined | null>(undefined);\n  const [selected, { selectOne, selectAll, setSelections }] = useSelectionState<\n    FolderRow | FileRow\n  >(['type', 'id'], []);\n  // reset selection when folder changes to hide bulk actions\n  React.useEffect(() => {\n    setSelections([]);\n  }, [query.folder, setSelections]);\n\n  const indeterminateBulkSelect =\n    selected?.length > 0 && selected?.length !== assetCount + folderCount;\n  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);\n  const toggleEditFolderDialog = ({ created = false } = {}) => {\n    // folders are only displayed on the first page, therefore\n    // we have to navigate the user to that page, in case a folder\n    // was created successfully in order for them to see it\n    if (created && query?.page !== '1') {\n      setQuery({\n        ...query,\n        page: 1,\n      });\n    }\n\n    setShowEditFolderDialog((prev) => !prev);\n  };\n\n  const handleBulkSelect = (\n    checked: boolean | 'indeterminate',\n    elements?: FolderRow[] | FileRow[]\n  ) => {\n    if (checked) {\n      trackUsage('didSelectAllMediaLibraryElements');\n    }\n\n    selectAll(elements as (FolderRow | FileRow)[]);\n  };\n\n  const handleChangeSort = (value: Query['sort'] | string) => {\n    trackUsage('didSortMediaLibraryElements', {\n      location: 'upload',\n      sort: value,\n    });\n    setQuery({ sort: value as Query['sort'] });\n  };\n\n  const handleEditFolder = (folder: FolderRow) => {\n    setFolderToEdit(folder);\n    setShowEditFolderDialog(true);\n  };\n\n  const handleEditFolderClose = (payload?: { created?: boolean | undefined }) => {\n    setFolderToEdit(null);\n    toggleEditFolderDialog(payload);\n\n    if (currentFolderToEditRef.current) {\n      currentFolderToEditRef.current.focus();\n    }\n  };\n\n  const handleAssetDeleted = (numberOfAssets: number) => {\n    if (\n      numberOfAssets === assetCount &&\n      assetsData?.pagination?.page === assetsData?.pagination?.pageCount &&\n      assetsData?.pagination?.page &&\n      assetsData.pagination.page > 1\n    ) {\n      setQuery({\n        ...query,\n        page: assetsData.pagination.page - 1,\n      });\n    }\n  };\n\n  const handleBulkActionSuccess = () => {\n    selectAll();\n\n    handleAssetDeleted(selected.length);\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (assetsError || foldersError || aiAvailabilityStatus === 'error') {\n    return <Page.Error />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Main>\n        <Header\n          breadcrumbs={\n            !isCurrentFolderLoading\n              ? (getBreadcrumbDataML(currentFolder!, {\n                  pathname,\n                  query,\n                }) as HeaderProps['breadcrumbs'])\n              : null\n          }\n          canCreate={canCreate}\n          onToggleEditFolderDialog={toggleEditFolderDialog}\n          onToggleUploadAssetDialog={toggleUploadAssetDialog}\n          folder={currentFolder as HeaderProps['folder']}\n        />\n        <Layouts.Action\n          startActions={\n            <>\n              {canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (\n                <BoxWithHeight\n                  paddingLeft={2}\n                  paddingRight={2}\n                  background=\"neutral0\"\n                  hasRadius\n                  borderColor=\"neutral200\"\n                >\n                  <Checkbox\n                    aria-label={formatMessage({\n                      id: getTrad('bulk.select.label'),\n                      defaultMessage: 'Select all folders & assets',\n                    })}\n                    checked={\n                      indeterminateBulkSelect\n                        ? 'indeterminate'\n                        : (assetCount > 0 || folderCount > 0) &&\n                          selected.length === assetCount + folderCount\n                    }\n                    onCheckedChange={(e) =>\n                      handleBulkSelect(e, [...assets, ...folders] as FolderRow[] | FileRow[])\n                    }\n                  />\n                </BoxWithHeight>\n              )}\n              {canRead && isGridView && (\n                <SortPicker value={query?.sort} onChangeSort={handleChangeSort} />\n              )}\n              {canRead && <Filters />}\n            </>\n          }\n          endActions={\n            <>\n              {canConfigureView ? (\n                <ActionContainer paddingTop={1} paddingBottom={1}>\n                  <IconButton\n                    tag={ReactRouterLink}\n                    to={{\n                      pathname: `${pathname}/configuration`,\n                      search: stringify(query, { encode: false }),\n                    }}\n                    label={formatMessage({\n                      id: 'app.links.configure-view',\n                      defaultMessage: 'Configure the view',\n                    })}\n                  >\n                    <Cog />\n                  </IconButton>\n                </ActionContainer>\n              ) : null}\n              <ActionContainer paddingTop={1} paddingBottom={1}>\n                <IconButton\n                  label={\n                    isGridView\n                      ? formatMessage({\n                          id: getTrad('view-switch.list'),\n                          defaultMessage: 'List View',\n                        })\n                      : formatMessage({\n                          id: getTrad('view-switch.grid'),\n                          defaultMessage: 'Grid View',\n                        })\n                  }\n                  onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\n                >\n                  {isGridView ? <List /> : <GridIcon />}\n                </IconButton>\n              </ActionContainer>\n              <SearchInput\n                label={formatMessage({\n                  id: getTrad('search.label'),\n                  defaultMessage: 'Search for an asset',\n                })}\n                trackedEvent=\"didSearchMediaLibraryElements\"\n                trackedEventDetails={{ location: 'upload' }}\n              />\n            </>\n          }\n        />\n\n        <Layouts.Content>\n          {selected.length > 0 && (\n            <BulkActions\n              currentFolder={currentFolder as BulkActionsProps['currentFolder']}\n              selected={selected as BulkActionsProps['selected']}\n              onSuccess={handleBulkActionSuccess}\n            />\n          )}\n\n          {folderCount === 0 && assetCount === 0 && (\n            <EmptyOrNoPermissions\n              canCreate={canCreate}\n              canRead={canRead}\n              isFiltering={isFiltering}\n              onActionClick={toggleUploadAssetDialog}\n            />\n          )}\n\n          {/* TODO: fix AssetListTable should handle no assets views (loading) */}\n          {canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (\n            <TableList\n              assetCount={assetCount}\n              folderCount={folderCount}\n              indeterminate={indeterminateBulkSelect}\n              onChangeSort={handleChangeSort}\n              onChangeFolder={(folderID, folderPath) =>\n                navigate(getFolderURL(pathname, query, { folder: folderID.toString(), folderPath }))\n              }\n              onEditAsset={setAssetToEdit as TableListProps['onEditAsset']}\n              onEditFolder={handleEditFolder}\n              onSelectOne={selectOne}\n              onSelectAll={handleBulkSelect as TableListProps['onSelectAll']}\n              rows={[...folders, ...assets] as TableListProps['rows']}\n              selected={selected as TableListProps['selected']}\n              shouldDisableBulkSelect={!canUpdate}\n              sortQuery={query?.sort ?? ''}\n            />\n          )}\n\n          {canRead && isGridView && (\n            <>\n              {folderCount > 0 && (\n                <FolderGridList\n                  title={\n                    // Folders title should only appear if:\n                    // user is filtering and there are assets to display, to divide both type of elements\n                    // user is not filtering\n                    (((isFiltering && assetCount > 0) || !isFiltering) &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.folders.title'),\n                          defaultMessage: 'Folders ({count})',\n                        },\n                        { count: folderCount }\n                      )) ||\n                    ''\n                  }\n                >\n                  {folders.map((folder) => {\n                    const selectedFolders = selected.filter(({ type }) => type === 'folder');\n                    const isSelected = !!selectedFolders.find(\n                      (currentFolder) => currentFolder.id === folder.id\n                    );\n\n                    const url = getFolderURL(pathname, query, {\n                      folder: folder?.id.toString(),\n                      folderPath: folder?.path,\n                    });\n\n                    return (\n                      <Grid.Item\n                        col={3}\n                        key={`folder-${folder.id}`}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <FolderCard\n                          ref={\n                            folderToEdit && folder.id === folderToEdit.id\n                              ? currentFolderToEditRef\n                              : undefined\n                          }\n                          ariaLabel={folder.name}\n                          id={`folder-${folder.id}`}\n                          to={url}\n                          startAction={\n                            folder.isSelectable ? (\n                              <FolderCardCheckbox\n                                data-testid={`folder-checkbox-${folder.id}`}\n                                checked={isSelected}\n                                onCheckedChange={() => selectOne(folder)}\n                              />\n                            ) : null\n                          }\n                          cardActions={\n                            <IconButton\n                              label={formatMessage({\n                                id: getTrad('list.folder.edit'),\n                                defaultMessage: 'Edit folder',\n                              })}\n                              onClick={() => handleEditFolder(folder)}\n                            >\n                              <Pencil />\n                            </IconButton>\n                          }\n                        >\n                          <FolderCardBody>\n                            <FolderCardBodyAction to={url}>\n                              <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\n                                <TypographyMaxWidth\n                                  fontWeight=\"semiBold\"\n                                  textColor=\"neutral800\"\n                                  ellipsis\n                                >\n                                  {folder.name}\n                                  <VisuallyHidden>:</VisuallyHidden>\n                                </TypographyMaxWidth>\n\n                                <TypographyMaxWidth\n                                  tag=\"span\"\n                                  textColor=\"neutral600\"\n                                  variant=\"pi\"\n                                  ellipsis\n                                >\n                                  {formatMessage(\n                                    {\n                                      id: getTrad('list.folder.subtitle'),\n                                      defaultMessage:\n                                        '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\n                                    },\n                                    {\n                                      folderCount: (folder as FolderDefinition).children?.count,\n                                      filesCount: (folder as FolderDefinition).files?.count,\n                                    }\n                                  )}\n                                </TypographyMaxWidth>\n                              </Flex>\n                            </FolderCardBodyAction>\n                          </FolderCardBody>\n                        </FolderCard>\n                      </Grid.Item>\n                    );\n                  })}\n                </FolderGridList>\n              )}\n\n              {assetCount > 0 && folderCount > 0 && (\n                <Box paddingTop={6} paddingBottom={4}>\n                  <Divider />\n                </Box>\n              )}\n\n              {assetCount > 0 && (\n                <AssetGridList\n                  assets={assets}\n                  onEditAsset={setAssetToEdit as AssetGridListProps['onEditAsset']}\n                  onSelectAsset={selectOne}\n                  selectedAssets={\n                    selected.filter(\n                      ({ type }) => type === 'asset'\n                    ) as AssetGridListProps['selectedAssets']\n                  }\n                  title={\n                    // Assets title should only appear if:\n                    // - user is not filtering\n                    // - user is filtering and there are folders to display, to separate them\n                    // - user is on page 1 since folders won't appear on any other page than the first one (no need to visually separate them)\n                    ((!isFiltering || (isFiltering && folderCount > 0)) &&\n                      assetsData?.pagination?.page === 1 &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.assets.title'),\n                          defaultMessage: 'Assets ({count})',\n                        },\n                        { count: totalAssetCount }\n                      )) ||\n                    ''\n                  }\n                />\n              )}\n            </>\n          )}\n          <Pagination.Root {...assetsData?.pagination}>\n            <Pagination.PageSize />\n            <Pagination.Links />\n          </Pagination.Root>\n        </Layouts.Content>\n      </Page.Main>\n      {showUploadAssetDialog &&\n        (isAiEnabled ? (\n          <AIUploadModal\n            open={showUploadAssetDialog}\n            onClose={toggleUploadAssetDialog}\n            folderId={query?.folder ? Number(query.folder) : null}\n          />\n        ) : (\n          <UploadAssetDialog\n            open={showUploadAssetDialog}\n            onClose={toggleUploadAssetDialog}\n            trackedLocation=\"upload\"\n            folderId={query?.folder as string | number | null | undefined}\n          />\n        ))}\n      {showEditFolderDialog && (\n        <EditFolderDialog\n          open={showEditFolderDialog}\n          onClose={() => handleEditFolderClose()}\n          folder={folderToEdit as FolderDefinition}\n          parentFolderId={query?.folder as string | number | null | undefined}\n          location=\"upload\"\n        />\n      )}\n      {assetToEdit && (\n        <EditAssetDialog\n          onClose={(editedAsset) => {\n            // The asset has been deleted\n            if (editedAsset === null) {\n              handleAssetDeleted(1);\n            }\n\n            setAssetToEdit(undefined);\n          }}\n          open={!!assetToEdit}\n          asset={assetToEdit}\n          canUpdate={canUpdate}\n          canCopyLink={canCopyLink}\n          canDownload={canDownload}\n          trackedLocation=\"upload\"\n        />\n      )}\n    </Layouts.Root>\n  );\n};\n"],"names":["BoxWithHeight","styled","Box","TypographyMaxWidth","Typography","ActionContainer","theme","colors","neutral500","MediaLibrary","navigate","useNavigate","canRead","canCreate","canUpdate","canCopyLink","canDownload","canConfigureView","isLoading","permissionsLoading","useMediaLibraryPermissions","isEnabled","isAiEnabled","status","aiAvailabilityStatus","useAIAvailability","currentFolderToEditRef","React","useRef","formatMessage","useIntl","pathname","useLocation","trackUsage","useTracking","query","setQuery","useQueryParams","isFiltering","Boolean","_q","filters","view","setView","usePersistentState","localStorageKeys","viewOptions","GRID","isGridView","data","assetsData","assetsLoading","error","assetsError","useAssets","skipWhen","foldersData","foldersLoading","foldersError","useFolders","enabled","pagination","page","containsAssetFilter","currentFolder","isCurrentFolderLoading","currentFolderError","useFolder","folder","name","folders","map","type","folderURL","getFolderURL","id","toString","folderPath","path","isSelectable","folderCount","length","assets","results","asset","assetCount","totalAssetCount","total","showUploadAssetDialog","setShowUploadAssetDialog","useState","showEditFolderDialog","setShowEditFolderDialog","assetToEdit","setAssetToEdit","undefined","folderToEdit","setFolderToEdit","selected","selectOne","selectAll","setSelections","useSelectionState","useEffect","indeterminateBulkSelect","toggleUploadAssetDialog","prev","toggleEditFolderDialog","created","handleBulkSelect","checked","elements","handleChangeSort","value","location","sort","handleEditFolder","handleEditFolderClose","payload","current","focus","handleAssetDeleted","numberOfAssets","pageCount","handleBulkActionSuccess","_jsx","Page","Loading","Error","_jsxs","Layouts","Root","Main","Header","breadcrumbs","getBreadcrumbDataML","onToggleEditFolderDialog","onToggleUploadAssetDialog","Action","startActions","_Fragment","paddingLeft","paddingRight","background","hasRadius","borderColor","Checkbox","aria-label","getTrad","defaultMessage","onCheckedChange","e","SortPicker","onChangeSort","Filters","endActions","paddingTop","paddingBottom","IconButton","tag","ReactRouterLink","to","search","stringify","encode","label","Cog","onClick","LIST","List","GridIcon","SearchInput","trackedEvent","trackedEventDetails","Content","BulkActions","onSuccess","EmptyOrNoPermissions","onActionClick","TableList","indeterminate","onChangeFolder","folderID","onEditAsset","onEditFolder","onSelectOne","onSelectAll","rows","shouldDisableBulkSelect","sortQuery","FolderGridList","title","count","selectedFolders","filter","isSelected","find","url","Grid","Item","col","direction","alignItems","FolderCard","ref","ariaLabel","startAction","FolderCardCheckbox","data-testid","cardActions","Pencil","FolderCardBody","FolderCardBodyAction","Flex","maxWidth","fontWeight","textColor","ellipsis","VisuallyHidden","variant","children","filesCount","files","Divider","AssetGridList","onSelectAsset","selectedAssets","Pagination","PageSize","Links","AIUploadModal","open","onClose","folderId","Number","UploadAssetDialog","trackedLocation","EditFolderDialog","parentFolderId","EditAssetDialog","editedAsset"],"mappings":"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"}