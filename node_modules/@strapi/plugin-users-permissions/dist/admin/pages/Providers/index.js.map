{"version":3,"file":"index.js","sources":["../../../../admin/src/pages/Providers/index.jsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useTracking, Layouts } from '@strapi/admin/strapi-admin';\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  useCollator,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n} from '@strapi/strapi/admin';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport FormModal from '../../components/FormModal';\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport forms from './utils/forms';\n\nexport const ProvidersPage = () => {\n  const { formatMessage, locale } = useIntl();\n  const queryClient = useQueryClient();\n  const { trackUsage } = useTracking();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [providerToEditName, setProviderToEditName] = React.useState(null);\n  const { toggleNotification } = useNotification();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateProviders });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'get-providers'],\n    async () => {\n      const { data } = await get('/users-permissions/providers');\n\n      return data;\n    },\n    {\n      initialData: {},\n    }\n  );\n\n  const submitMutation = useMutation((body) => put('/users-permissions/providers', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'get-providers']);\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: getTrad('notification.success.submit') }),\n      });\n\n      trackUsage('didEditAuthenticationProvider');\n\n      handleToggleModal();\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n    refetchActive: false,\n  });\n\n  const providers = Object.entries(data)\n    .reduce((acc, [name, provider]) => {\n      const { icon, enabled, subdomain } = provider;\n\n      acc.push({\n        name,\n        icon: icon === 'envelope' ? ['fas', 'envelope'] : ['fab', icon],\n        enabled,\n        subdomain,\n      });\n\n      return acc;\n    }, [])\n    .sort((a, b) => formatter.compare(a.name, b.name));\n\n  const isLoading = isLoadingData || isLoadingPermissions;\n\n  const isProviderWithSubdomain = React.useMemo(() => {\n    if (!providerToEditName) {\n      return false;\n    }\n\n    const providerToEdit = providers.find((obj) => obj.name === providerToEditName);\n\n    return !!providerToEdit?.subdomain;\n  }, [providers, providerToEditName]);\n\n  const layoutToRender = React.useMemo(() => {\n    if (providerToEditName === 'email') {\n      return forms.email;\n    }\n\n    if (isProviderWithSubdomain) {\n      return forms.providersWithSubdomain;\n    }\n\n    return forms.providers;\n  }, [providerToEditName, isProviderWithSubdomain]);\n\n  const handleToggleModal = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const handleClickEdit = (provider) => {\n    if (canUpdate) {\n      setProviderToEditName(provider.name);\n      handleToggleModal();\n    }\n  };\n\n  const handleSubmit = async (values) => {\n    trackUsage('willEditAuthenticationProvider');\n\n    submitMutation.mutate({ providers: { ...data, [providerToEditName]: values } });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.providers'),\n              defaultMessage: 'Providers',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: getTrad('HeaderNav.link.providers'),\n          defaultMessage: 'Providers',\n        })}\n      />\n      <Layouts.Content>\n        <Table colCount={3} rowCount={providers.length + 1}>\n          <Thead>\n            <Tr>\n              <Th>\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                </Typography>\n              </Th>\n              <Th>\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage({ id: getTrad('Providers.status'), defaultMessage: 'Status' })}\n                </Typography>\n              </Th>\n              <Th>\n                <Typography variant=\"sigma\">\n                  <VisuallyHidden>\n                    {formatMessage({\n                      id: 'global.settings',\n                      defaultMessage: 'Settings',\n                    })}\n                  </VisuallyHidden>\n                </Typography>\n              </Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {providers.map((provider) => (\n              <Tr\n                key={provider.name}\n                onClick={() => (canUpdate ? handleClickEdit(provider) : undefined)}\n              >\n                <Td width=\"45%\">\n                  <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\n                    {provider.name}\n                  </Typography>\n                </Td>\n                <Td width=\"65%\">\n                  <Typography\n                    textColor={provider.enabled ? 'success600' : 'danger600'}\n                    data-testid={`enable-${provider.name}`}\n                  >\n                    {provider.enabled\n                      ? formatMessage({\n                          id: 'global.enabled',\n                          defaultMessage: 'Enabled',\n                        })\n                      : formatMessage({\n                          id: 'global.disabled',\n                          defaultMessage: 'Disabled',\n                        })}\n                  </Typography>\n                </Td>\n                <Td onClick={(e) => e.stopPropagation()}>\n                  {canUpdate && (\n                    <IconButton\n                      onClick={() => handleClickEdit(provider)}\n                      variant=\"ghost\"\n                      label=\"Edit\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  )}\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </Layouts.Content>\n      <FormModal\n        initialData={data[providerToEditName]}\n        isOpen={isOpen}\n        isSubmiting={submitMutation.isLoading}\n        layout={layoutToRender}\n        headerBreadcrumbs={[\n          formatMessage({\n            id: getTrad('PopUpForm.header.edit.providers'),\n            defaultMessage: 'Edit Provider',\n          }),\n          upperFirst(providerToEditName),\n        ]}\n        onToggle={handleToggleModal}\n        onSubmit={handleSubmit}\n        providerToEditName={providerToEditName}\n      />\n    </Page.Main>\n  );\n};\n\nconst ProtectedProvidersPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readProviders}>\n    <ProvidersPage />\n  </Page.Protect>\n);\n\nexport default ProtectedProvidersPage;\n"],"names":["ProvidersPage","formatMessage","locale","useIntl","queryClient","useQueryClient","trackUsage","useTracking","isOpen","setIsOpen","React","useState","providerToEditName","setProviderToEditName","toggleNotification","useNotification","get","put","useFetchClient","formatAPIError","useAPIErrorHandler","formatter","useCollator","sensitivity","isLoading","isLoadingPermissions","allowedActions","canUpdate","useRBAC","update","PERMISSIONS","updateProviders","isLoadingData","data","useQuery","initialData","submitMutation","useMutation","body","onSuccess","invalidateQueries","type","message","id","getTrad","handleToggleModal","onError","error","refetchActive","providers","Object","entries","reduce","acc","name","provider","icon","enabled","subdomain","push","sort","a","b","compare","isProviderWithSubdomain","useMemo","providerToEdit","find","obj","layoutToRender","forms","email","providersWithSubdomain","prev","handleClickEdit","handleSubmit","values","mutate","_jsx","Page","Loading","_jsxs","Main","Title","defaultMessage","Layouts","Header","title","Content","Table","colCount","rowCount","length","Thead","Tr","Th","Typography","variant","textColor","VisuallyHidden","Tbody","map","onClick","undefined","Td","width","fontWeight","data-testid","e","stopPropagation","IconButton","label","Pencil","FormModal","isSubmiting","layout","headerBreadcrumbs","upperFirst","onToggle","onSubmit","ProtectedProvidersPage","Protect","permissions","readProviders"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCaA,aAAgB,GAAA,IAAA;AAC3B,IAAA,MAAM,EAAEC,aAAa,EAAEC,MAAM,EAAE,GAAGC,iBAAAA,EAAAA;AAClC,IAAA,MAAMC,WAAcC,GAAAA,yBAAAA,EAAAA;IACpB,MAAM,EAAEC,UAAU,EAAE,GAAGC,uBAAAA,EAAAA;AACvB,IAAA,MAAM,CAACC,MAAQC,EAAAA,SAAAA,CAAU,GAAGC,gBAAAA,CAAMC,QAAQ,CAAC,KAAA,CAAA;AAC3C,IAAA,MAAM,CAACC,kBAAoBC,EAAAA,qBAAAA,CAAsB,GAAGH,gBAAAA,CAAMC,QAAQ,CAAC,IAAA,CAAA;IACnE,MAAM,EAAEG,kBAAkB,EAAE,GAAGC,qBAAAA,EAAAA;AAC/B,IAAA,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAE,GAAGC,oBAAAA,EAAAA;IACrB,MAAM,EAAEC,cAAc,EAAE,GAAGC,wBAAAA,EAAAA;IAC3B,MAAMC,SAAAA,GAAYC,yBAAYpB,MAAQ,EAAA;QACpCqB,WAAa,EAAA;AACf,KAAA,CAAA;IAEA,MAAM,EACJC,SAAWC,EAAAA,oBAAoB,EAC/BC,cAAAA,EAAgB,EAAEC,SAAS,EAAE,EAC9B,GAAGC,aAAQ,CAAA;AAAEC,QAAAA,MAAAA,EAAQC,sBAAYC;AAAgB,KAAA,CAAA;AAElD,IAAA,MAAM,EAAEP,SAAWQ,EAAAA,aAAa,EAAEC,IAAI,EAAE,GAAGC,mBACzC,CAAA;AAAC,QAAA,mBAAA;AAAqB,QAAA;KAAgB,EACtC,UAAA;AACE,QAAA,MAAM,EAAED,IAAI,EAAE,GAAG,MAAMjB,GAAI,CAAA,8BAAA,CAAA;QAE3B,OAAOiB,IAAAA;KAET,EAAA;AACEE,QAAAA,WAAAA,EAAa;AACf,KAAA,CAAA;AAGF,IAAA,MAAMC,iBAAiBC,sBAAY,CAAA,CAACC,IAASrB,GAAAA,GAAAA,CAAI,gCAAgCqB,IAAO,CAAA,EAAA;QACtF,MAAMC,SAAAA,CAAAA,GAAAA;YACJ,MAAMnC,WAAAA,CAAYoC,iBAAiB,CAAC;AAAC,gBAAA,mBAAA;AAAqB,gBAAA;AAAgB,aAAA,CAAA;YAE1E1B,kBAAmB,CAAA;gBACjB2B,IAAM,EAAA,SAAA;AACNC,gBAAAA,OAAAA,EAASzC,aAAc,CAAA;AAAE0C,oBAAAA,EAAAA,EAAIC,OAAQ,CAAA,6BAAA;AAA+B,iBAAA;AACtE,aAAA,CAAA;YAEAtC,UAAW,CAAA,+BAAA,CAAA;AAEXuC,YAAAA,iBAAAA,EAAAA;AACF,SAAA;AACAC,QAAAA,OAAAA,CAAAA,CAAQC,KAAK,EAAA;YACXjC,kBAAmB,CAAA;gBACjB2B,IAAM,EAAA,QAAA;AACNC,gBAAAA,OAAAA,EAASvB,cAAe4B,CAAAA,KAAAA;AAC1B,aAAA,CAAA;AACF,SAAA;QACAC,aAAe,EAAA;AACjB,KAAA,CAAA;IAEA,MAAMC,SAAAA,GAAYC,MAAOC,CAAAA,OAAO,CAAClB,IAAAA,CAAAA,CAC9BmB,MAAM,CAAC,CAACC,GAAAA,EAAK,CAACC,IAAAA,EAAMC,QAAS,CAAA,GAAA;AAC5B,QAAA,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAE,GAAGH,QAAAA;AAErCF,QAAAA,GAAAA,CAAIM,IAAI,CAAC;AACPL,YAAAA,IAAAA;AACAE,YAAAA,IAAAA,EAAMA,SAAS,UAAa,GAAA;AAAC,gBAAA,KAAA;AAAO,gBAAA;aAAW,GAAG;AAAC,gBAAA,KAAA;AAAOA,gBAAAA;AAAK,aAAA;AAC/DC,YAAAA,OAAAA;AACAC,YAAAA;AACF,SAAA,CAAA;QAEA,OAAOL,GAAAA;AACT,KAAA,EAAG,EAAE,CAAA,CACJO,IAAI,CAAC,CAACC,CAAGC,EAAAA,CAAAA,GAAMzC,SAAU0C,CAAAA,OAAO,CAACF,CAAAA,CAAEP,IAAI,EAAEQ,EAAER,IAAI,CAAA,CAAA;AAElD,IAAA,MAAM9B,YAAYQ,aAAiBP,IAAAA,oBAAAA;IAEnC,MAAMuC,uBAAAA,GAA0BtD,gBAAMuD,CAAAA,OAAO,CAAC,IAAA;AAC5C,QAAA,IAAI,CAACrD,kBAAoB,EAAA;YACvB,OAAO,KAAA;AACT;QAEA,MAAMsD,cAAAA,GAAiBjB,UAAUkB,IAAI,CAAC,CAACC,GAAQA,GAAAA,GAAAA,CAAId,IAAI,KAAK1C,kBAAAA,CAAAA;QAE5D,OAAO,CAAC,CAACsD,cAAgBR,EAAAA,SAAAA;KACxB,EAAA;AAACT,QAAAA,SAAAA;AAAWrC,QAAAA;AAAmB,KAAA,CAAA;IAElC,MAAMyD,cAAAA,GAAiB3D,gBAAMuD,CAAAA,OAAO,CAAC,IAAA;AACnC,QAAA,IAAIrD,uBAAuB,OAAS,EAAA;AAClC,YAAA,OAAO0D,MAAMC,KAAK;AACpB;AAEA,QAAA,IAAIP,uBAAyB,EAAA;AAC3B,YAAA,OAAOM,MAAME,sBAAsB;AACrC;AAEA,QAAA,OAAOF,MAAMrB,SAAS;KACrB,EAAA;AAACrC,QAAAA,kBAAAA;AAAoBoD,QAAAA;AAAwB,KAAA,CAAA;AAEhD,IAAA,MAAMnB,iBAAoB,GAAA,IAAA;QACxBpC,SAAU,CAAA,CAACgE,OAAS,CAACA,IAAAA,CAAAA;AACvB,KAAA;AAEA,IAAA,MAAMC,kBAAkB,CAACnB,QAAAA,GAAAA;AACvB,QAAA,IAAI5B,SAAW,EAAA;AACbd,YAAAA,qBAAAA,CAAsB0C,SAASD,IAAI,CAAA;AACnCT,YAAAA,iBAAAA,EAAAA;AACF;AACF,KAAA;AAEA,IAAA,MAAM8B,eAAe,OAAOC,MAAAA,GAAAA;QAC1BtE,UAAW,CAAA,gCAAA,CAAA;AAEX8B,QAAAA,cAAAA,CAAeyC,MAAM,CAAC;YAAE5B,SAAW,EAAA;AAAE,gBAAA,GAAGhB,IAAI;AAAE,gBAAA,CAACrB,qBAAqBgE;AAAO;AAAE,SAAA,CAAA;AAC/E,KAAA;AAEA,IAAA,IAAIpD,SAAW,EAAA;QACb,qBAAOsD,cAAA,CAACC,WAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;IAEA,qBACEC,eAAA,CAACF,WAAKG,IAAI,EAAA;;AACR,0BAAAJ,cAAA,CAACC,WAAKI,KAAK,EAAA;0BACRlF,aACC,CAAA;oBAAE0C,EAAI,EAAA,oBAAA;oBAAsByC,cAAgB,EAAA;iBAC5C,EAAA;AACE9B,oBAAAA,IAAAA,EAAMrD,aAAc,CAAA;AAClB0C,wBAAAA,EAAAA,EAAIC,OAAQ,CAAA,0BAAA,CAAA;wBACZwC,cAAgB,EAAA;AAClB,qBAAA;AACF,iBAAA;;AAGJ,0BAAAN,cAAA,CAACO,oBAAQC,MAAM,EAAA;AACbC,gBAAAA,KAAAA,EAAOtF,aAAc,CAAA;AACnB0C,oBAAAA,EAAAA,EAAIC,OAAQ,CAAA,0BAAA,CAAA;oBACZwC,cAAgB,EAAA;AAClB,iBAAA;;AAEF,0BAAAN,cAAA,CAACO,oBAAQG,OAAO,EAAA;AACd,gBAAA,QAAA,gBAAAP,eAACQ,CAAAA,kBAAAA,EAAAA;oBAAMC,QAAU,EAAA,CAAA;oBAAGC,QAAU1C,EAAAA,SAAAA,CAAU2C,MAAM,GAAG,CAAA;;sCAC/Cd,cAACe,CAAAA,kBAAAA,EAAAA;AACC,4BAAA,QAAA,gBAAAZ,eAACa,CAAAA,eAAAA,EAAAA;;kDACChB,cAACiB,CAAAA,eAAAA,EAAAA;AACC,wCAAA,QAAA,gBAAAjB,cAACkB,CAAAA,uBAAAA,EAAAA;4CAAWC,OAAQ,EAAA,OAAA;4CAAQC,SAAU,EAAA,YAAA;sDACnCjG,aAAc,CAAA;gDAAE0C,EAAI,EAAA,aAAA;gDAAeyC,cAAgB,EAAA;AAAO,6CAAA;;;kDAG/DN,cAACiB,CAAAA,eAAAA,EAAAA;AACC,wCAAA,QAAA,gBAAAjB,cAACkB,CAAAA,uBAAAA,EAAAA;4CAAWC,OAAQ,EAAA,OAAA;4CAAQC,SAAU,EAAA,YAAA;sDACnCjG,aAAc,CAAA;AAAE0C,gDAAAA,EAAAA,EAAIC,OAAQ,CAAA,kBAAA,CAAA;gDAAqBwC,cAAgB,EAAA;AAAS,6CAAA;;;kDAG/EN,cAACiB,CAAAA,eAAAA,EAAAA;AACC,wCAAA,QAAA,gBAAAjB,cAACkB,CAAAA,uBAAAA,EAAAA;4CAAWC,OAAQ,EAAA,OAAA;AAClB,4CAAA,QAAA,gBAAAnB,cAACqB,CAAAA,2BAAAA,EAAAA;0DACElG,aAAc,CAAA;oDACb0C,EAAI,EAAA,iBAAA;oDACJyC,cAAgB,EAAA;AAClB,iDAAA;;;;;;;sCAMVN,cAACsB,CAAAA,kBAAAA,EAAAA;AACEnD,4BAAAA,QAAAA,EAAAA,SAAAA,CAAUoD,GAAG,CAAC,CAAC9C,QAAAA,iBACd0B,eAACa,CAAAA,eAAAA,EAAAA;oCAECQ,OAAS,EAAA,IAAO3E,SAAY+C,GAAAA,eAAAA,CAAgBnB,QAAYgD,CAAAA,GAAAA,SAAAA;;sDAExDzB,cAAC0B,CAAAA,eAAAA,EAAAA;4CAAGC,KAAM,EAAA,KAAA;AACR,4CAAA,QAAA,gBAAA3B,cAACkB,CAAAA,uBAAAA,EAAAA;gDAAWU,UAAW,EAAA,UAAA;gDAAWR,SAAU,EAAA,YAAA;AACzC3C,gDAAAA,QAAAA,EAAAA,QAAAA,CAASD;;;sDAGdwB,cAAC0B,CAAAA,eAAAA,EAAAA;4CAAGC,KAAM,EAAA,KAAA;AACR,4CAAA,QAAA,gBAAA3B,cAACkB,CAAAA,uBAAAA,EAAAA;gDACCE,SAAW3C,EAAAA,QAAAA,CAASE,OAAO,GAAG,YAAe,GAAA,WAAA;AAC7CkD,gDAAAA,aAAAA,EAAa,CAAC,OAAO,EAAEpD,QAASD,CAAAA,IAAI,CAAC,CAAC;0DAErCC,QAASE,CAAAA,OAAO,GACbxD,aAAc,CAAA;oDACZ0C,EAAI,EAAA,gBAAA;oDACJyC,cAAgB,EAAA;AAClB,iDAAA,CAAA,GACAnF,aAAc,CAAA;oDACZ0C,EAAI,EAAA,iBAAA;oDACJyC,cAAgB,EAAA;AAClB,iDAAA;;;sDAGRN,cAAC0B,CAAAA,eAAAA,EAAAA;4CAAGF,OAAS,EAAA,CAACM,CAAMA,GAAAA,CAAAA,CAAEC,eAAe,EAAA;AAClClF,4CAAAA,QAAAA,EAAAA,SAAAA,kBACCmD,cAACgC,CAAAA,uBAAAA,EAAAA;AACCR,gDAAAA,OAAAA,EAAS,IAAM5B,eAAgBnB,CAAAA,QAAAA,CAAAA;gDAC/B0C,OAAQ,EAAA,OAAA;gDACRc,KAAM,EAAA,MAAA;AAEN,gDAAA,QAAA,gBAAAjC,cAACkC,CAAAA,YAAAA,EAAAA,EAAAA;;;;AA/BFzD,iCAAAA,EAAAA,QAAAA,CAASD,IAAI,CAAA;;;;;0BAwC5BwB,cAACmC,CAAAA,KAAAA,EAAAA;gBACC9E,WAAaF,EAAAA,IAAI,CAACrB,kBAAmB,CAAA;gBACrCJ,MAAQA,EAAAA,MAAAA;AACR0G,gBAAAA,WAAAA,EAAa9E,eAAeZ,SAAS;gBACrC2F,MAAQ9C,EAAAA,cAAAA;gBACR+C,iBAAmB,EAAA;oBACjBnH,aAAc,CAAA;AACZ0C,wBAAAA,EAAAA,EAAIC,OAAQ,CAAA,iCAAA,CAAA;wBACZwC,cAAgB,EAAA;AAClB,qBAAA,CAAA;oBACAiC,UAAWzG,CAAAA,kBAAAA;AACZ,iBAAA;gBACD0G,QAAUzE,EAAAA,iBAAAA;gBACV0E,QAAU5C,EAAAA,YAAAA;gBACV/D,kBAAoBA,EAAAA;;;;AAI5B;AAEA,MAAM4G,sBAAyB,GAAA,kBAC7B1C,cAACC,CAAAA,UAAAA,CAAK0C,OAAO,EAAA;AAACC,QAAAA,WAAAA,EAAa5F,sBAAY6F,aAAa;AAClD,QAAA,QAAA,gBAAA7C,cAAC9E,CAAAA,aAAAA,EAAAA,EAAAA;;;;;;"}