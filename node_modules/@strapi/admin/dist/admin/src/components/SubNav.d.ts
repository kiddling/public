/// <reference types="react" />
declare const StyledLink: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<Omit<import("react-router-dom").NavLinkProps & import("react").RefAttributes<HTMLAnchorElement>, "ref"> & {
    ref?: ((instance: HTMLAnchorElement | null) => void) | import("react").RefObject<HTMLAnchorElement> | null | undefined;
}, never>> & Omit<import("react").ForwardRefExoticComponent<import("react-router-dom").NavLinkProps & import("react").RefAttributes<HTMLAnchorElement>>, keyof import("react").Component<any, {}, any>>;
export declare const SubNav: {
    Main: ({ children, ...props }: {
        children: React.ReactNode;
        isFullPage?: boolean;
    }) => import("react/jsx-runtime").JSX.Element;
    Content: ({ children }: {
        children: React.ReactNode;
    }) => import("react/jsx-runtime").JSX.Element;
    Header: ({ label }: {
        label: string;
    }) => import("react/jsx-runtime").JSX.Element;
    Link: (props: Omit<React.ComponentProps<typeof StyledLink>, 'label'> & {
        label: React.ReactNode;
        endAction?: React.ReactNode;
        handleClick?: () => void;
    }) => import("react/jsx-runtime").JSX.Element;
    Sections: ({ children, ...props }: {
        children: React.ReactNode[];
        [key: string]: unknown;
    }) => import("react/jsx-runtime").JSX.Element;
    Section: ({ label, children, link, sectionId, badgeLabel, }: {
        label: string;
        children: React.ReactNode[];
        link?: {
            label: string;
            onClick: () => void;
        };
        sectionId?: string;
        badgeLabel?: string;
    }) => import("react/jsx-runtime").JSX.Element;
    SubSection: ({ label, children }: {
        label: string;
        children: React.ReactNode[];
    }) => import("react/jsx-runtime").JSX.Element;
    PageWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<Omit<import("@strapi/design-system").TransientBoxProps & {
        children?: import("react").ReactNode;
    } & import("@strapi/design-system/dist/types").AsProp<import("react").ElementType<any, keyof import("react").JSX.IntrinsicElements>> & Omit<Omit<any, "ref">, "children" | keyof import("@strapi/design-system/dist/types").AsProp<C> | keyof import("@strapi/design-system").TransientBoxProps> & {
        ref?: any;
    }, "ref"> & {
        ref?: any;
    }, never>> & Omit<import("@strapi/design-system").BoxComponent<"div">, keyof import("react").Component<any, {}, any>>;
};
export {};
