{"version":3,"file":"resizeHandlers.js","sources":["../../../../../admin/src/utils/resizeHandlers.ts"],"sourcesContent":["/**\n * These functions handle DOM element positioning, bounding rect calculations, and resize-specific logic.\n */\n\nimport { WIDGET_SIZING } from './widgetLayout';\n\n/**\n * Snaps a width value to the nearest discrete size\n */\nexport const snapToDiscreteSize = (width: number): number => {\n  return WIDGET_SIZING.DISCRETE_SIZES.reduce((prev, curr) =>\n    Math.abs(curr - width) < Math.abs(prev - width) ? curr : prev\n  );\n};\n\n/**\n * Ensures two widths sum to exactly 12 columns by adjusting the right width\n */\nexport const adjustToTotalColumns = (\n  leftWidth: number,\n  rightWidth: number\n): { leftWidth: number; rightWidth: number } => {\n  const totalWidth = leftWidth + rightWidth;\n  if (totalWidth !== WIDGET_SIZING.TOTAL_COLUMNS) {\n    const difference = WIDGET_SIZING.TOTAL_COLUMNS - totalWidth;\n    rightWidth += difference;\n  }\n  return { leftWidth, rightWidth };\n};\n\n/**\n * Validates if two widget widths together are valid (sum to 12 columns)\n */\nexport const isValidResize = (leftWidth: number, rightWidth: number): boolean => {\n  return (\n    leftWidth >= WIDGET_SIZING.MIN_WIDGET_WIDTH &&\n    rightWidth >= WIDGET_SIZING.MIN_WIDGET_WIDTH &&\n    leftWidth + rightWidth === WIDGET_SIZING.TOTAL_COLUMNS\n  );\n};\n\n/**\n * Get bounding rects for all elements\n */\nexport const getElementRects = (\n  leftElement: Element | null,\n  rightElement: Element | null,\n  containerElement: Element | null\n) => {\n  if (!leftElement || !rightElement || !containerElement) {\n    return null;\n  }\n\n  return {\n    leftRect: leftElement.getBoundingClientRect(),\n    rightRect: rightElement.getBoundingClientRect(),\n    containerRect: containerElement.getBoundingClientRect(),\n  };\n};\n\n/**\n * Calculate resize handle position from DOM elements\n */\nexport const calculateResizeHandlePosition = (\n  leftElement: Element | null,\n  rightElement: Element | null,\n  containerElement: Element | null\n) => {\n  const rects = getElementRects(leftElement, rightElement, containerElement);\n  if (!rects) {\n    return { left: 0, top: 0, height: 0 };\n  }\n\n  const { leftRect, rightRect, containerRect } = rects;\n\n  const left = leftRect.right - containerRect.left;\n  const top = leftRect.top - containerRect.top;\n  const height = Math.max(leftRect.height, rightRect.height);\n\n  return { left, top, height };\n};\n\n/**\n * Calculate row bounds for resize indicator from DOM elements\n */\nexport const calculateRowBounds = (\n  leftElement: Element | null,\n  rightElement: Element | null,\n  containerElement: Element | null\n) => {\n  const rects = getElementRects(leftElement, rightElement, containerElement);\n  if (!rects) {\n    return null;\n  }\n\n  const { leftRect, rightRect, containerRect } = rects;\n\n  const rowLeft = Math.min(leftRect.left, rightRect.left) - containerRect.left;\n  const rowTop = leftRect.top - containerRect.top;\n  const rowWidth =\n    Math.max(leftRect.right, rightRect.right) - Math.min(leftRect.left, rightRect.left);\n  const rowHeight = Math.max(leftRect.height, rightRect.height);\n\n  return { left: rowLeft, top: rowTop, width: rowWidth, height: rowHeight };\n};\n\n/**\n * Calculates target widths for a resize operation based on delta movement\n */\nexport const calculateTargetWidths = (\n  deltaColumns: number,\n  startLeftWidth: number,\n  startRightWidth: number\n): { targetLeftWidth: number; targetRightWidth: number } => {\n  let targetLeftWidth = startLeftWidth + deltaColumns;\n  let targetRightWidth = startRightWidth - deltaColumns;\n\n  targetLeftWidth = snapToDiscreteSize(targetLeftWidth);\n  targetRightWidth = snapToDiscreteSize(targetRightWidth);\n\n  // Adjust to maintain total columns constraint\n  const adjusted = adjustToTotalColumns(targetLeftWidth, targetRightWidth);\n  return { targetLeftWidth: adjusted.leftWidth, targetRightWidth: adjusted.rightWidth };\n};\n\n/**\n * Determines if a resize operation should trigger based on value changes\n * Used for performance optimization to prevent unnecessary updates\n */\nexport const shouldTriggerResize = (\n  leftWidth: number,\n  rightWidth: number,\n  lastResizeValues: { leftWidth: number; rightWidth: number }\n): boolean => {\n  return leftWidth !== lastResizeValues.leftWidth || rightWidth !== lastResizeValues.rightWidth;\n};\n"],"names":["snapToDiscreteSize","width","WIDGET_SIZING","DISCRETE_SIZES","reduce","prev","curr","Math","abs","adjustToTotalColumns","leftWidth","rightWidth","totalWidth","TOTAL_COLUMNS","difference","isValidResize","MIN_WIDGET_WIDTH","getElementRects","leftElement","rightElement","containerElement","leftRect","getBoundingClientRect","rightRect","containerRect","calculateResizeHandlePosition","rects","left","top","height","right","max","calculateRowBounds","rowLeft","min","rowTop","rowWidth","rowHeight","calculateTargetWidths","deltaColumns","startLeftWidth","startRightWidth","targetLeftWidth","targetRightWidth","adjusted","shouldTriggerResize","lastResizeValues"],"mappings":"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"}