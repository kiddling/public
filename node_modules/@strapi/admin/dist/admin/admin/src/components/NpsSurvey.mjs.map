{"version":3,"file":"NpsSurvey.mjs","sources":["../../../../../admin/src/components/NpsSurvey.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Button,\n  Typography,\n  Textarea,\n  Portal,\n  Field,\n  VisuallyHidden,\n  SingleSelect,\n  SingleSelectOption,\n} from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { useAppInfo } from '../features/AppInfo';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useIsMobile } from '../hooks/useMediaQuery';\nimport { usePersistentState } from '../hooks/usePersistentState';\n\nconst FieldWrapper = styled(Field.Root)`\n  height: 3.2rem;\n  width: 3.2rem;\n\n  > label,\n  ~ input {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  > label {\n    color: inherit;\n    cursor: pointer;\n    padding: ${({ theme }) => theme.spaces[2]};\n    text-align: center;\n    vertical-align: middle;\n  }\n\n  &:hover,\n  &:focus-within {\n    background-color: ${({ theme }) => theme.colors.neutral0};\n  }\n\n  &:active,\n  &.selected {\n    color: ${({ theme }) => theme.colors.primary700};\n    background-color: ${({ theme }) => theme.colors.neutral0};\n    border-color: ${({ theme }) => theme.colors.primary700};\n  }\n`;\n\nconst delays = {\n  postResponse: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  postFirstDismissal: 14 * 24 * 60 * 60 * 1000, // 14 days in ms\n  postSubsequentDismissal: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\n  display: 30 * 60 * 1000, // 30 minutes in ms\n};\n\nconst ratingArray = [...Array(11).keys()];\n\nconst checkIfShouldShowSurvey = (settings: NpsSurveySettings) => {\n  const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;\n\n  // This function goes through all the cases where we'd want to not show the survey:\n  // 1. If the survey is disabled by strapi, abort mission, don't bother checking the other settings.\n  // 2. If the survey is disabled by user, abort mission, don't bother checking the other settings.\n  // 3. If the user has already responded to the survey, check if enough time has passed since the last response.\n  // 4. If the user has dismissed the survey twice or more before, check if enough time has passed since the last dismissal.\n  // 5. If the user has only dismissed the survey once before, check if enough time has passed since the first dismissal.\n  // If none of these cases check out, then we show the survey.\n  // Note that submitting a response resets the dismissal counts.\n  // Checks 4 and 5 should not be reversed, since the first dismissal will also exist if the user has dismissed the survey twice or more before.\n\n  // For users who had created an account before the NPS feature was introduced,\n  // we assume that they would have enabled the NPS feature if they had the chance.\n\n  // Global strapi disable for NSP.\n  if (window.strapi.flags.nps === false) {\n    return false;\n  }\n\n  // User chose not to enable the NPS feature when signing up\n  if (enabled === false) {\n    return false;\n  }\n\n  // The user has already responded to the survey\n  if (lastResponseDate) {\n    const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();\n\n    if (timeSinceLastResponse >= delays.postResponse) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has dismissed the survey twice or more before\n  if (lastDismissalDate) {\n    const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();\n\n    if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has only dismissed the survey once before\n  if (firstDismissalDate) {\n    const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();\n\n    if (timeSinceFirstDismissal >= delays.postFirstDismissal) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // The user has not interacted with the survey before\n  return true;\n};\n\nconst NpsSurvey = () => {\n  const isMobile = useIsMobile();\n  const { formatMessage } = useIntl();\n  const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();\n  const [isFeedbackResponse, setIsFeedbackResponse] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const currentEnvironment = useAppInfo('NpsSurvey', (state) => state.currentEnvironment);\n  const strapiVersion = useAppInfo('NpsSurvey', (state) => state.strapiVersion);\n\n  interface NpsSurveyMutationBody {\n    email: string;\n    rating: number | null;\n    comment: string;\n    environment?: string;\n    version?: string;\n    license: 'Enterprise' | 'Community';\n  }\n\n  // Only check on first render if the survey should be shown\n  const [surveyIsShown, setSurveyIsShown] = React.useState(\n    checkIfShouldShowSurvey(npsSurveySettings)\n  );\n\n  // Set a cooldown to show the survey when session begins\n  const [displaySurvey, setDisplaySurvey] = React.useState(false);\n\n  React.useEffect(() => {\n    const displayTime = setTimeout(() => {\n      setDisplaySurvey(true);\n    }, delays.display);\n\n    return () => {\n      clearTimeout(displayTime);\n    };\n  }, []);\n\n  const { user } = useAuth('NpsSurvey', (auth) => auth);\n\n  if (!displaySurvey) {\n    return null;\n  }\n\n  if (!surveyIsShown) {\n    return null;\n  }\n\n  const handleSubmitResponse = async ({\n    npsSurveyRating,\n    npsSurveyFeedback,\n  }: {\n    npsSurveyRating: NpsSurveyMutationBody['rating'];\n    npsSurveyFeedback: NpsSurveyMutationBody['comment'];\n  }) => {\n    try {\n      const body = {\n        email: typeof user === 'object' && user.email ? user.email : '',\n        rating: npsSurveyRating,\n        comment: npsSurveyFeedback,\n        environment: currentEnvironment,\n        version: strapiVersion ?? undefined,\n        license: window.strapi.projectType,\n        isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud',\n        aiLicenseKey: process.env.STRAPI_ADMIN_AI_LICENSE,\n      };\n      const res = await fetch(\n        `${process.env.STRAPI_ANALYTICS_URL || 'https://analytics.strapi.io'}/submit-nps`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n        }\n      );\n\n      if (!res.ok) {\n        throw new Error('Failed to submit NPS survey');\n      }\n\n      setNpsSurveySettings((settings) => ({\n        ...settings,\n        lastResponseDate: new Date().toString(),\n        firstDismissalDate: null,\n        lastDismissalDate: null,\n      }));\n      setIsFeedbackResponse(true);\n      // Thank you message displayed in the banner should disappear after few seconds.\n      setTimeout(() => {\n        setSurveyIsShown(false);\n      }, 3000);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDismiss = () => {\n    setNpsSurveySettings((settings) => {\n      const nextSettings = {\n        ...settings,\n        lastResponseDate: null,\n      };\n\n      if (settings.firstDismissalDate) {\n        // If the user dismisses the survey for the second time\n        nextSettings.lastDismissalDate = new Date().toString();\n      } else {\n        // If the user dismisses the survey for the first time\n        nextSettings.firstDismissalDate = new Date().toString();\n      }\n\n      return nextSettings;\n    });\n\n    setSurveyIsShown(false);\n  };\n\n  return (\n    <Portal>\n      <Formik\n        initialValues={{ npsSurveyFeedback: '', npsSurveyRating: null }}\n        onSubmit={handleSubmitResponse}\n        validationSchema={yup.object({\n          npsSurveyFeedback: yup.string(),\n          npsSurveyRating: yup.number().required(),\n        })}\n      >\n        {({ values, handleChange, setFieldValue, isSubmitting }) => (\n          <Form name=\"npsSurveyForm\">\n            <Box\n              padding={4}\n              position=\"fixed\"\n              bottom={0}\n              left=\"50%\"\n              transform=\"translateX(-50%)\"\n              zIndex=\"200\"\n              width=\"50%\"\n            >\n              <Flex\n                hasRadius\n                direction=\"column\"\n                padding={4}\n                borderColor=\"primary200\"\n                background=\"neutral0\"\n                shadow=\"popupShadow\"\n                wrap=\"wrap\"\n              >\n                {isFeedbackResponse ? (\n                  <Typography fontWeight=\"semiBold\">\n                    {formatMessage({\n                      id: 'app.components.NpsSurvey.feedback-response',\n                      defaultMessage: 'Thank you very much for your feedback!',\n                    })}\n                  </Typography>\n                ) : (\n                  <Box tag=\"fieldset\" width=\"100%\" borderWidth={0}>\n                    <Flex justifyContent=\"space-between\" width=\"100%\" gap={2}>\n                      <Box marginLeft=\"auto\" marginRight=\"auto\">\n                        <Typography fontWeight=\"semiBold\" tag=\"legend\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.banner-title',\n                            defaultMessage:\n                              'How likely are you to recommend Strapi to a friend or colleague?',\n                          })}\n                        </Typography>\n                      </Box>\n                      <IconButton\n                        onClick={handleDismiss}\n                        withTooltip={false}\n                        label={formatMessage({\n                          id: 'app.components.NpsSurvey.dismiss-survey-label',\n                          defaultMessage: 'Dismiss survey',\n                        })}\n                        type=\"button\"\n                      >\n                        <Cross />\n                      </IconButton>\n                    </Flex>\n                    {isMobile ? (\n                      <Box marginTop={2}>\n                        <SingleSelect\n                          placeholder={formatMessage({\n                            id: 'app.components.NpsSurvey.select-rating',\n                            defaultMessage: 'Select rating',\n                          })}\n                          onChange={(value) => {\n                            setFieldValue('npsSurveyRating', parseInt(value.toString(), 10));\n                          }}\n                          value={values.npsSurveyRating}\n                        >\n                          {ratingArray\n                            .sort((a, b) => b - a)\n                            .map((number) => {\n                              const suffixMessage =\n                                number === 0\n                                  ? formatMessage({\n                                      id: 'app.components.NpsSurvey.no-recommendation',\n                                      defaultMessage: 'Not at all likely',\n                                    })\n                                  : number === 10\n                                    ? formatMessage({\n                                        id: 'app.components.NpsSurvey.happy-to-recommend',\n                                        defaultMessage: 'Extremely likely',\n                                      })\n                                    : '';\n                              return (\n                                <SingleSelectOption key={number} value={number}>\n                                  {number} {suffixMessage && `(${suffixMessage})`}\n                                </SingleSelectOption>\n                              );\n                            })}\n                        </SingleSelect>\n                      </Box>\n                    ) : (\n                      <Flex gap={2} marginTop={2} marginBottom={2} justifyContent=\"center\">\n                        <Typography variant=\"pi\" textColor=\"neutral600\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.no-recommendation',\n                            defaultMessage: 'Not at all likely',\n                          })}\n                        </Typography>\n                        {ratingArray.map((number) => {\n                          return (\n                            <FieldWrapper\n                              key={number}\n                              name=\"npsSurveyRating\"\n                              className={values.npsSurveyRating === number ? 'selected' : undefined} // \"selected\" class added when child radio button is checked\n                              hasRadius\n                              background=\"primary100\"\n                              borderColor=\"primary200\"\n                              color=\"primary600\"\n                              position=\"relative\"\n                              cursor=\"pointer\"\n                            >\n                              <Field.Label>\n                                <VisuallyHidden>\n                                  <Field.Input\n                                    type=\"radio\"\n                                    checked={values.npsSurveyRating === number}\n                                    onChange={(e) =>\n                                      setFieldValue('npsSurveyRating', parseInt(e.target.value, 10))\n                                    }\n                                    value={number}\n                                  />\n                                </VisuallyHidden>\n                                {number}\n                              </Field.Label>\n                            </FieldWrapper>\n                          );\n                        })}\n                        <Typography variant=\"pi\" textColor=\"neutral600\">\n                          {formatMessage({\n                            id: 'app.components.NpsSurvey.happy-to-recommend',\n                            defaultMessage: 'Extremely likely',\n                          })}\n                        </Typography>\n                      </Flex>\n                    )}\n                    {values.npsSurveyRating !== null && (\n                      <Flex direction=\"column\" alignItems=\"stretch\">\n                        <Box marginTop={2}>\n                          <Field.Label fontWeight=\"semiBold\" fontSize={2}>\n                            {formatMessage({\n                              id: 'app.components.NpsSurvey.feedback-question',\n                              defaultMessage: 'Do you have any suggestion for improvements?',\n                            })}\n                          </Field.Label>\n                        </Box>\n                        <Box marginTop={3} marginBottom={4} width=\"100%\">\n                          <Textarea\n                            id=\"npsSurveyFeedback\" // formik element attribute \"id\" should be same as the values key to work\n                            width=\"100%\"\n                            onChange={handleChange}\n                            value={values.npsSurveyFeedback}\n                          />\n                        </Box>\n                        <Box>\n                          <Button marginBottom={2} type=\"submit\" loading={isSubmitting}>\n                            {formatMessage({\n                              id: 'app.components.NpsSurvey.submit-feedback',\n                              defaultMessage: 'Submit Feedback',\n                            })}\n                          </Button>\n                        </Box>\n                      </Flex>\n                    )}\n                  </Box>\n                )}\n              </Flex>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </Portal>\n  );\n};\n\ninterface NpsSurveySettings {\n  enabled: boolean;\n  lastResponseDate: string | null;\n  firstDismissalDate: string | null;\n  lastDismissalDate: string | null;\n}\n\n/**\n * We exported to make it available during admin user registration.\n * Because we only enable the NPS for users who subscribe to the newsletter when signing up\n */\nfunction useNpsSurveySettings() {\n  const [npsSurveySettings, setNpsSurveySettings] = usePersistentState<NpsSurveySettings>(\n    'STRAPI_NPS_SURVEY_SETTINGS',\n    {\n      enabled: true,\n      lastResponseDate: null,\n      firstDismissalDate: null,\n      lastDismissalDate: null,\n    }\n  );\n\n  /**\n   * TODO: should this just be an array so we can alias the `usePersistentState` hook?\n   */\n  return { npsSurveySettings, setNpsSurveySettings };\n}\n\nexport { NpsSurvey, useNpsSurveySettings };\n"],"names":["FieldWrapper","styled","Field","Root","theme","spaces","colors","neutral0","primary700","delays","postResponse","postFirstDismissal","postSubsequentDismissal","display","ratingArray","Array","keys","checkIfShouldShowSurvey","settings","enabled","lastResponseDate","firstDismissalDate","lastDismissalDate","window","strapi","flags","nps","timeSinceLastResponse","Date","now","getTime","timeSinceLastDismissal","timeSinceFirstDismissal","NpsSurvey","isMobile","useIsMobile","formatMessage","useIntl","npsSurveySettings","setNpsSurveySettings","useNpsSurveySettings","isFeedbackResponse","setIsFeedbackResponse","React","useState","toggleNotification","useNotification","currentEnvironment","useAppInfo","state","strapiVersion","surveyIsShown","setSurveyIsShown","displaySurvey","setDisplaySurvey","useEffect","displayTime","setTimeout","clearTimeout","user","useAuth","auth","handleSubmitResponse","npsSurveyRating","npsSurveyFeedback","body","email","rating","comment","environment","version","undefined","license","projectType","isHostedOnStrapiCloud","process","env","STRAPI_HOSTING","aiLicenseKey","STRAPI_ADMIN_AI_LICENSE","res","fetch","STRAPI_ANALYTICS_URL","method","headers","JSON","stringify","ok","Error","toString","err","type","message","id","defaultMessage","handleDismiss","nextSettings","_jsx","Portal","Formik","initialValues","onSubmit","validationSchema","yup","object","string","number","required","values","handleChange","setFieldValue","isSubmitting","Form","name","Box","padding","position","bottom","left","transform","zIndex","width","Flex","hasRadius","direction","borderColor","background","shadow","wrap","Typography","fontWeight","_jsxs","tag","borderWidth","justifyContent","gap","marginLeft","marginRight","IconButton","onClick","withTooltip","label","Cross","marginTop","SingleSelect","placeholder","onChange","value","parseInt","sort","a","b","map","suffixMessage","SingleSelectOption","marginBottom","variant","textColor","className","color","cursor","Label","VisuallyHidden","Input","checked","e","target","alignItems","fontSize","Textarea","Button","loading","usePersistentState"],"mappings":"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"}