{"version":3,"file":"MainNavLinks.js","sources":["../../../../../../admin/src/components/MainNav/MainNavLinks.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { Lightning } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useIsDesktop } from '../../hooks/useMediaQuery';\nimport { MenuItem } from '../../hooks/useMenu';\nimport { tours } from '../GuidedTour/Tours';\n\nimport { NavLink } from './NavLink';\n\nconst NavLinkBadgeLock = styled(NavLink.Badge)`\n  background-color: transparent;\n`;\n\nconst NavLinkBadgeCounter = styled(NavLink.Badge)`\n  span {\n    color: ${({ theme }) => theme.colors.neutral0};\n  }\n`;\n\n/**\n * Will attach a guided tour tooltip to the right links. (mostly used for the finish step to indicate the next tour)\n * @param to: The target link\n * @param children: The original link to be wrapped in a guided tour tooltip\n * @returns The link wrapped in a guided tour tooltip or the original link if no guided tour needs to be attached\n */\nconst GuidedTourTooltip = ({ to, children }: { to: To; children: React.ReactNode }) => {\n  const normalizedTo = to.toString().replace(/\\//g, '');\n\n  switch (normalizedTo) {\n    // We attach the final step of the content type builder tour on content manager link because it's the next tour (Content Type Builder -> Content Manager).\n    case 'content-manager':\n      return <tours.contentTypeBuilder.Finish>{children}</tours.contentTypeBuilder.Finish>;\n    // We attach the final step of the api tokens tour on the home link because it was the last tour (API Tokens -> Go back to homepage).\n    case '':\n      return <tours.apiTokens.Finish>{children}</tours.apiTokens.Finish>;\n    // We attach the final step of the content manager tour on the settings link because it's the next tour (Content Manager -> API tokens).\n    case 'settings':\n      return <tours.contentManager.Finish>{children}</tours.contentManager.Finish>;\n    // If the link doesn't match any of the above, we return the original link.\n    default:\n      return children;\n  }\n};\n\nconst MainNavIcons = ({\n  listLinks,\n  mobileLinks,\n  handleClickOnLink,\n}: {\n  listLinks: MenuItem[];\n  mobileLinks: MenuItem[];\n  handleClickOnLink: (value: string) => void;\n}) => {\n  const { formatMessage } = useIntl();\n  const isDesktop = useIsDesktop();\n\n  return listLinks.length > 0\n    ? listLinks.map((link) => {\n        const LinkIcon = link.icon;\n        const badgeContentLock = link?.licenseOnly ? <Lightning fill=\"primary600\" /> : undefined;\n\n        const badgeContentNumeric =\n          link.notificationsCount && link.notificationsCount > 0\n            ? link.notificationsCount.toString()\n            : undefined;\n\n        const labelValue = formatMessage(link.intlLabel);\n        const linkMobile = mobileLinks.find((mobileLink) => mobileLink.to === link.to);\n\n        const LinkElement = () => (\n          <NavLink.Link\n            to={link.to}\n            onClick={() => handleClickOnLink(link.to)}\n            aria-label={labelValue}\n          >\n            <NavLink.Icon label={labelValue}>\n              <LinkIcon width=\"20\" height=\"20\" fill=\"neutral500\" />\n            </NavLink.Icon>\n            {badgeContentLock ? (\n              <NavLinkBadgeLock\n                label=\"locked\"\n                textColor=\"neutral500\"\n                paddingLeft={0}\n                paddingRight={0}\n              >\n                {badgeContentLock}\n              </NavLinkBadgeLock>\n            ) : badgeContentNumeric ? (\n              <NavLinkBadgeCounter\n                label={badgeContentNumeric}\n                backgroundColor=\"primary600\"\n                width=\"2.3rem\"\n                color=\"neutral0\"\n              >\n                {badgeContentNumeric}\n              </NavLinkBadgeCounter>\n            ) : null}\n          </NavLink.Link>\n        );\n\n        return isDesktop || (!isDesktop && linkMobile) ? (\n          <Flex tag=\"li\" key={link.to}>\n            <GuidedTourTooltip to={link.to}>\n              {isDesktop ? (\n                <NavLink.Tooltip label={labelValue}>\n                  <LinkElement />\n                </NavLink.Tooltip>\n              ) : (\n                <LinkElement />\n              )}\n            </GuidedTourTooltip>\n          </Flex>\n        ) : null;\n      })\n    : null;\n};\n\nconst IconContainer = styled(Box)`\n  svg {\n    display: block;\n  }\n`;\n\nconst MainNavBurgerMenuLinks = ({\n  listLinks,\n  handleClickOnLink,\n}: {\n  listLinks: MenuItem[];\n  handleClickOnLink: (value: string) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  return listLinks.length > 0\n    ? listLinks.map((link) => {\n        const LinkIcon = link.icon;\n        const badgeContentLock = link?.licenseOnly ? <Lightning fill=\"primary600\" /> : undefined;\n\n        const badgeContentNumeric =\n          link.notificationsCount && link.notificationsCount > 0\n            ? link.notificationsCount.toString()\n            : undefined;\n\n        const labelValue = formatMessage(link.intlLabel);\n        const navigationTarget = link.navigationLink || link.to;\n\n        return (\n          <Flex paddingTop={3} alignItems=\"center\" tag=\"li\" key={navigationTarget}>\n            <NavLink.Link\n              to={navigationTarget}\n              onClick={() => handleClickOnLink(navigationTarget)}\n              aria-label={labelValue}\n            >\n              <IconContainer marginRight=\"0.6rem\">\n                <LinkIcon width=\"20\" height=\"20\" fill=\"neutral500\" />\n              </IconContainer>\n              <Typography marginLeft={3}>{labelValue}</Typography>\n              {badgeContentLock ? (\n                <NavLinkBadgeLock\n                  label=\"locked\"\n                  textColor=\"neutral500\"\n                  paddingLeft={0}\n                  paddingRight={0}\n                >\n                  {badgeContentLock}\n                </NavLinkBadgeLock>\n              ) : badgeContentNumeric ? (\n                <NavLinkBadgeCounter\n                  label={badgeContentNumeric}\n                  backgroundColor=\"primary600\"\n                  width=\"2.3rem\"\n                  color=\"neutral0\"\n                >\n                  {badgeContentNumeric}\n                </NavLinkBadgeCounter>\n              ) : null}\n            </NavLink.Link>\n          </Flex>\n        );\n      })\n    : null;\n};\n\nexport { MainNavIcons, MainNavBurgerMenuLinks };\n"],"names":["NavLinkBadgeLock","styled","NavLink","Badge","NavLinkBadgeCounter","theme","colors","neutral0","GuidedTourTooltip","to","children","normalizedTo","toString","replace","_jsx","tours","contentTypeBuilder","Finish","apiTokens","contentManager","MainNavIcons","listLinks","mobileLinks","handleClickOnLink","formatMessage","useIntl","isDesktop","useIsDesktop","length","map","link","LinkIcon","icon","badgeContentLock","licenseOnly","Lightning","fill","undefined","badgeContentNumeric","notificationsCount","labelValue","intlLabel","linkMobile","find","mobileLink","LinkElement","_jsxs","Link","onClick","aria-label","Icon","label","width","height","textColor","paddingLeft","paddingRight","backgroundColor","color","Flex","tag","Tooltip","IconContainer","Box","MainNavBurgerMenuLinks","navigationTarget","navigationLink","paddingTop","alignItems","marginRight","Typography","marginLeft"],"mappings":"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"}