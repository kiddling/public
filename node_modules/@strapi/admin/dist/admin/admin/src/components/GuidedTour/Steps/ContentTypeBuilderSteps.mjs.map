{"version":3,"file":"ContentTypeBuilderSteps.mjs","sources":["../../../../../../../admin/src/components/GuidedTour/Steps/ContentTypeBuilderSteps.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { UID } from '@strapi/types';\nimport { useParams } from 'react-router-dom';\n\nimport { useAIAvailability } from '../../../hooks/useAIAvailability';\nimport { useGetGuidedTourMetaQuery } from '../../../services/admin';\nimport { CompletedActions, useGuidedTour } from '../Context';\nimport { tours, type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount, DefaultActions, DefaultActionsProps } from './Step';\n\nconst ContentTypeBuilderActions = ({\n  ...props\n}: Omit<DefaultActionsProps, 'tourName'> & { children?: React.ReactNode }) => {\n  const state = useGuidedTour('ContentTypeBuilderActions', (s) => s.state);\n  const dispatch = useGuidedTour('ContentTypeBuilderActions', (s) => s.dispatch);\n\n  const isAIEnabled = useAIAvailability();\n\n  const currentStepOffset = state.tours.contentTypeBuilder.currentStep + 1;\n  const displayedCurrentStep = (() => {\n    if (!isAIEnabled && currentStepOffset > contentTypeBuilderStepsAI.length) {\n      // If AI is not enabled, we remove the AI steps\n      return currentStepOffset - contentTypeBuilderStepsAI.length;\n    } else if (isAIEnabled && currentStepOffset > contentTypeBuilderStepsNoAI.length) {\n      // If AI is enabled, we remove the non-AI steps\n      return currentStepOffset - contentTypeBuilderStepsNoAI.length;\n    }\n\n    return currentStepOffset;\n  })();\n\n  // When AI is enabled, we subtract the no AI steps and vice versa\n  const displayedTourLength = isAIEnabled\n    ? tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsNoAI.length\n    : tours.contentTypeBuilder._meta.displayedStepCount - contentTypeBuilderStepsAI.length;\n\n  const handleNextStep = () => {\n    const currentStep = state.tours.contentTypeBuilder.currentStep;\n\n    if (!isAIEnabled && currentStep === 0) {\n      // If AI is disabled, after Introduction (step 0), skip AI steps and go to first NoAI step\n      const nextStep = 1 + contentTypeBuilderStepsAI.length; // Skip AI steps\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: nextStep },\n      });\n    } else if (isAIEnabled && currentStep === contentTypeBuilderStepsAI.length) {\n      // If AI is enabled, after AI steps, skip NoAI steps and go to Save/Finish\n      const nextStep = 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length;\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: nextStep },\n      });\n    } else {\n      // Normal step progression\n      dispatch({\n        type: 'next_step',\n        payload: 'contentTypeBuilder',\n      });\n    }\n  };\n\n  const handlePreviousStep = () => {\n    const currentStep = state.tours.contentTypeBuilder.currentStep;\n\n    if (!isAIEnabled && currentStep === 1 + contentTypeBuilderStepsAI.length) {\n      // If AI is disabled and we're at the first NoAI step, go back to Introduction (step 0)\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: 0 },\n      });\n    } else if (\n      isAIEnabled &&\n      currentStep === 1 + contentTypeBuilderStepsAI.length + contentTypeBuilderStepsNoAI.length\n    ) {\n      // If AI is enabled and we're at Save/Finish, go back to last AI step\n      dispatch({\n        type: 'go_to_step',\n        payload: { tourName: 'contentTypeBuilder', step: contentTypeBuilderStepsAI.length },\n      });\n    } else {\n      // Normal step progression\n      dispatch({\n        type: 'previous_step',\n        payload: 'contentTypeBuilder',\n      });\n    }\n  };\n\n  return (\n    <>\n      <StepCount\n        tourName=\"contentTypeBuilder\"\n        displayedCurrentStep={displayedCurrentStep}\n        displayedTourLength={displayedTourLength}\n      />\n      {props.children || (\n        <DefaultActions\n          tourName=\"contentTypeBuilder\"\n          onNextStep={handleNextStep}\n          onPreviousStep={handlePreviousStep}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={33} withArrow={false}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.Introduction.title\"\n      defaultMessage=\"Content-Type Builder\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Introduction.content\"\n      defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showSkip />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst AIChat = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"left\">\n    <Step.Title id=\"tours.contentTypeBuilder.AIChat.title\" defaultMessage=\"Time to get started!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AIChat.content\"\n      defaultMessage=\"<p>If you have any questions about the Content-Type Builder or Strapi ask them here.</p><p>Strapi AI can generate schemas tailored to your needs. Ask for exactly what you want, for example:<ul><li>Date picker</li><li>Email and password fields</li><li>Media of any type</li><li>UIDs</li></ul></p><p>Donâ€™t be shy, try it out !</p>\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst CollectionTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n      defaultMessage=\"Collection Types\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n      defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst SingleTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.SingleTypes.title\" defaultMessage=\"Single Types\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.SingleTypes.content\"\n      defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Components = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Components.content\"\n      defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst YourTurn = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.YourTurn.title\" defaultMessage=\"Your turn\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.YourTurn.content\"\n      defaultMessage=\"Create a collection type or single type and configure it.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst AddFields = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\">\n    <Step.Title\n      id=\"tours.contentTypeBuilder.AddFields.title\"\n      defaultMessage=\"Don't forget to add a field to your content type\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AddFields.content\"\n      defaultMessage=\"Add the fields your content needs such as text, media and relations.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious>\n        <GotItAction\n          onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })}\n        />\n      </ContentTypeBuilderActions>\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Save = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title id=\"tours.contentTypeBuilder.Save.title\" defaultMessage=\"Save before you leave!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Save.content\"\n      defaultMessage=\"Save the changes you made here before leaving this page.\"\n    />\n    <Step.Actions>\n      <ContentTypeBuilderActions showPrevious>\n        <GotItAction\n          onClick={() => {\n            // Ensure the completed action is removed\n            // in the event the user already has a schema but is still doing the tour\n            dispatch({\n              type: 'remove_completed_action',\n              payload: GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema,\n            });\n            dispatch({ type: 'next_step', payload: 'contentTypeBuilder' });\n          }}\n        />\n      </ContentTypeBuilderActions>\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n  const { '*': routeParams } = useParams();\n  // Get the uid from the params\n  const uid = routeParams?.split('/').pop();\n  const contentType = uid ? guidedTourMeta?.data?.schemas?.[uid as UID.ContentType] : null;\n  const contentTypeKindDictionary = {\n    collectionType: 'collection-types',\n    singleType: 'single-types',\n  };\n\n  const to = contentType\n    ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}`\n    : '/content-manager';\n\n  return (\n    <Step.Root side=\"right\">\n      <Step.Title\n        id=\"tours.contentTypeBuilder.Finish.title\"\n        defaultMessage=\"First Step: Done! ðŸŽ‰\"\n      />\n      <Step.Content\n        id=\"tours.contentTypeBuilder.Finish.content\"\n        defaultMessage=\"You've built your first content type! Now head over to the Content Manager to start adding entries!\"\n      />\n      <Step.Actions showStepCount={false} showPrevious={false} to={to} />\n    </Step.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\nconst contentTypeBuilderStepsAI = [\n  {\n    name: 'AIChat',\n    content: AIChat,\n  },\n];\n\nconst contentTypeBuilderStepsNoAI = [\n  {\n    name: 'CollectionTypes',\n    content: CollectionTypes,\n  },\n  {\n    name: 'SingleTypes',\n    content: SingleTypes,\n  },\n  {\n    name: 'Components',\n    content: Components,\n  },\n  {\n    name: 'YourTurn',\n    content: YourTurn,\n  },\n  {\n    name: 'AddFields',\n    content: AddFields,\n  },\n];\n\nexport const contentTypeBuilderSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  ...contentTypeBuilderStepsAI,\n  ...contentTypeBuilderStepsNoAI,\n  {\n    name: 'Save',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),\n    content: Save,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n  },\n] as const;\n"],"names":["ContentTypeBuilderActions","props","state","useGuidedTour","s","dispatch","isAIEnabled","useAIAvailability","currentStepOffset","tours","contentTypeBuilder","currentStep","displayedCurrentStep","contentTypeBuilderStepsAI","length","contentTypeBuilderStepsNoAI","displayedTourLength","_meta","displayedStepCount","handleNextStep","nextStep","type","payload","tourName","step","handlePreviousStep","_jsxs","_Fragment","_jsx","StepCount","children","DefaultActions","onNextStep","onPreviousStep","Introduction","Step","Root","sideOffset","withArrow","Title","id","defaultMessage","Content","Actions","showSkip","AIChat","side","showPrevious","CollectionTypes","SingleTypes","Components","YourTurn","AddFields","GotItAction","onClick","Save","GUIDED_TOUR_REQUIRED_ACTIONS","createSchema","Finish","data","guidedTourMeta","useGetGuidedTourMetaQuery","routeParams","useParams","uid","split","pop","contentType","schemas","contentTypeKindDictionary","collectionType","singleType","to","kind","showStepCount","name","content","contentTypeBuilderSteps","when","completedActions","includes","addField","excludeFromStepCount"],"mappings":"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"}