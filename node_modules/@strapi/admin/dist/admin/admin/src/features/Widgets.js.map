{"version":3,"file":"Widgets.js","sources":["../../../../../admin/src/features/Widgets.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useIntl } from 'react-intl';\n\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useUpdateHomepageLayoutMutation } from '../services/homepage';\nimport {\n  calculateWidgetRows,\n  moveWidgetInArray,\n  findRowContainingWidget,\n  resizeRowAfterRemoval,\n  resizeRowAfterAddition,\n  isValidResizeOperation,\n  canResizeBetweenWidgets,\n  WIDGET_SIZING,\n} from '../utils/widgetLayout';\n\nimport { useNotification } from './Notifications';\n\nimport type { WidgetWithUID } from '../core/apis/Widgets';\nimport type { WidgetType } from '@strapi/admin/strapi-admin';\n\nexport interface WidgetInfo {\n  widget: WidgetType | undefined;\n  index: number;\n}\n\nexport type FindWidgetFunction = (id: string) => WidgetInfo;\nexport type WidgetIdFunction = (id: string) => void;\nexport type DragEndFunction = () => void;\n\ninterface BaseWidgetContext {\n  filteredWidgets: WidgetWithUID[];\n  columnWidths: Record<string, number>;\n}\n\ninterface MoveWidgetOptions extends BaseWidgetContext {\n  widgetId: string;\n  insertIndex: number;\n  targetRowIndex?: number;\n  isHorizontalDrop?: boolean;\n}\n\ninterface SaveLayoutOptions {\n  widgets: WidgetWithUID[];\n  widths: Record<string, number>;\n  updateHomepageLayout: (data: {\n    widgets: Array<{ uid: string; width: (typeof WIDGET_SIZING.DISCRETE_SIZES)[number] }>;\n  }) => Promise<any>;\n  toggleNotification: (config: { type: 'danger'; message: string }) => void;\n  formatAPIError: (error: any) => string;\n  formatMessage: (descriptor: { id: string; defaultMessage: string }) => string;\n}\n\ninterface HandleWidgetResizeOptions extends BaseWidgetContext {\n  leftWidgetId: string;\n  rightWidgetId: string;\n  newLeftWidth: number;\n  newRightWidth: number;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Widget Management\n * -----------------------------------------------------------------------------------------------*/\n\nconst findWidget = (filteredWidgets: WidgetWithUID[], widgetId: string): WidgetInfo => {\n  const widget = filteredWidgets.find((c) => `${c.uid}` === widgetId);\n  if (!widget) {\n    return {\n      widget: undefined,\n      index: -1,\n    };\n  }\n  return {\n    widget,\n    index: filteredWidgets.indexOf(widget),\n  };\n};\n\nconst saveLayout = async ({\n  widgets,\n  widths,\n  updateHomepageLayout,\n  toggleNotification,\n  formatAPIError,\n  formatMessage,\n}: SaveLayoutOptions) => {\n  try {\n    const layoutData = {\n      widgets: widgets.map((widget) => ({\n        uid: widget.uid,\n        width: (widths[widget.uid] ||\n          WIDGET_SIZING.TOTAL_COLUMNS) as (typeof WIDGET_SIZING.DISCRETE_SIZES)[number],\n      })),\n    };\n\n    const res = await updateHomepageLayout(layoutData);\n\n    if ('error' in res) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n    }\n  } catch {\n    toggleNotification({\n      type: 'danger',\n      message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n    });\n  }\n};\n\nconst moveWidget = ({\n  filteredWidgets,\n  columnWidths,\n  widgetId,\n  insertIndex,\n  targetRowIndex,\n  isHorizontalDrop,\n}: MoveWidgetOptions) => {\n  const widget = filteredWidgets.find((w) => w.uid === widgetId);\n  if (!widget) return { newWidgets: filteredWidgets, newWidths: columnWidths };\n\n  const widgetRows = calculateWidgetRows(filteredWidgets, columnWidths);\n\n  // Move widget in the array\n  const newWidgets = moveWidgetInArray(filteredWidgets, widgetId, insertIndex);\n\n  // Calculate optimal widths for both source and target rows\n  const newWidths = { ...columnWidths };\n\n  // Find the source row (where the widget was removed from)\n  const sourceRow = findRowContainingWidget(widgetRows, widgetId, filteredWidgets);\n\n  if (isHorizontalDrop) {\n    // This is a horizontal drop zone - widget gets full width in its own row\n    newWidths[widgetId] = WIDGET_SIZING.TOTAL_COLUMNS;\n\n    // Resize source row (after widget removal)\n    const sourceRowResize = resizeRowAfterRemoval(sourceRow, widgetId, newWidths);\n    Object.assign(newWidths, sourceRowResize);\n  } else {\n    // This is a vertical drop zone within a row\n    const targetRow = widgetRows[targetRowIndex!];\n\n    // Check if we're reordering within the same row\n    const isSameRowReorder =\n      sourceRow && targetRow && sourceRow.startIndex === targetRow.startIndex;\n\n    if (isSameRowReorder) {\n      // For same-row reordering, just preserve the existing widths\n      return { newWidgets, newWidths };\n    }\n\n    // Different rows - resize both source and target rows\n    // Resize source row (after widget removal)\n    const sourceRowResize = resizeRowAfterRemoval(sourceRow, widgetId, newWidths);\n    Object.assign(newWidths, sourceRowResize);\n\n    // Resize target row (after widget addition)\n    const targetRowResize = resizeRowAfterAddition(targetRow, widget, insertIndex, newWidths);\n    Object.assign(newWidths, targetRowResize);\n  }\n\n  return { newWidgets, newWidths };\n};\n\nconst deleteWidget = (filteredWidgets: WidgetWithUID[], columnWidths: Record<string, number>) => {\n  const widgetRows = calculateWidgetRows(filteredWidgets, columnWidths);\n\n  return (widgetId: string) => {\n    const { [widgetId]: _removed, ...newWidths } = columnWidths;\n\n    // Find the row containing the deleted widget\n    const deletedWidgetIndex = filteredWidgets.findIndex((w) => w.uid === widgetId);\n    if (deletedWidgetIndex === -1) return { newWidgets: filteredWidgets, newWidths };\n    const affectedRow = widgetRows.find(\n      (row) => deletedWidgetIndex >= row.startIndex && deletedWidgetIndex <= row.endIndex\n    );\n\n    // Use resizeRowAfterRemoval to resize the affected row\n    const finalWidths = resizeRowAfterRemoval(affectedRow, widgetId, newWidths);\n    const newWidgets = filteredWidgets.filter((w) => w.uid !== widgetId);\n\n    return { newWidgets, newWidths: finalWidths };\n  };\n};\n\nconst addWidget = (filteredWidgets: WidgetWithUID[], columnWidths: Record<string, number>) => {\n  return (widget: WidgetWithUID) => {\n    // Check if widget is already added\n    const index = filteredWidgets.findIndex((w) => w.uid === widget.uid);\n    if (index !== -1) return { newWidgets: filteredWidgets, newWidths: columnWidths };\n\n    const newWidgets = [...filteredWidgets, widget];\n    const newWidths = { ...columnWidths };\n    // New widget always takes full width in its own row\n    newWidths[widget.uid] = WIDGET_SIZING.TOTAL_COLUMNS;\n\n    return { newWidgets, newWidths };\n  };\n};\n\nconst handleWidgetResize = ({\n  filteredWidgets,\n  columnWidths,\n  leftWidgetId,\n  rightWidgetId,\n  newLeftWidth,\n  newRightWidth,\n}: HandleWidgetResizeOptions) => {\n  // Check if widgets can be resized (adjacent, same row, valid sizes)\n  if (!canResizeBetweenWidgets(leftWidgetId, rightWidgetId, columnWidths, filteredWidgets)) {\n    return columnWidths;\n  }\n\n  if (!isValidResizeOperation(newLeftWidth, newRightWidth)) {\n    // Resize would violate constraints, don't allow it\n    return columnWidths;\n  }\n\n  return {\n    ...columnWidths,\n    [leftWidgetId]: newLeftWidth,\n    [rightWidgetId]: newRightWidth,\n  };\n};\n\ninterface UseWidgetsOptions {\n  filteredWidgets: WidgetWithUID[];\n  setFilteredWidgets: (\n    widgets: WidgetWithUID[] | ((prev: WidgetWithUID[]) => WidgetWithUID[])\n  ) => void;\n}\n\nexport const useWidgets = ({ filteredWidgets, setFilteredWidgets }: UseWidgetsOptions) => {\n  const [columnWidths, setColumnWidths] = React.useState<Record<string, number>>({});\n  const [isDraggingWidget, setIsDraggingWidget] = React.useState(false);\n  const [draggedWidgetId, setDraggedWidgetId] = React.useState<string | undefined>();\n\n  const [updateHomepageLayout] = useUpdateHomepageLayoutMutation();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { formatMessage } = useIntl();\n\n  const findWidgetFn: FindWidgetFunction = (widgetId: string) =>\n    findWidget(filteredWidgets, widgetId);\n\n  const moveWidgetFn = (\n    widgetId: string,\n    insertIndex: number,\n    targetRowIndex?: number,\n    isHorizontalDrop?: boolean\n  ) => {\n    const result = moveWidget({\n      filteredWidgets,\n      columnWidths,\n      widgetId,\n      insertIndex,\n      targetRowIndex,\n      isHorizontalDrop,\n    });\n\n    setFilteredWidgets(result.newWidgets);\n    setColumnWidths(result.newWidths);\n\n    saveLayout({\n      widgets: result.newWidgets,\n      widths: result.newWidths,\n      updateHomepageLayout,\n      toggleNotification,\n      formatAPIError,\n      formatMessage,\n    });\n  };\n\n  const deleteWidgetFn: WidgetIdFunction = (widgetId: string) => {\n    const deleteWidgetOperation = deleteWidget(filteredWidgets, columnWidths);\n    const result = deleteWidgetOperation(widgetId);\n\n    setFilteredWidgets(result.newWidgets);\n    setColumnWidths(result.newWidths);\n\n    saveLayout({\n      widgets: result.newWidgets,\n      widths: result.newWidths,\n      updateHomepageLayout,\n      toggleNotification,\n      formatAPIError,\n      formatMessage,\n    });\n  };\n\n  const addWidgetFn = (widget: WidgetWithUID) => {\n    const addWidgetOperation = addWidget(filteredWidgets, columnWidths);\n    const result = addWidgetOperation(widget);\n\n    setFilteredWidgets(result.newWidgets);\n    setColumnWidths(result.newWidths);\n\n    saveLayout({\n      widgets: result.newWidgets,\n      widths: result.newWidths,\n      updateHomepageLayout,\n      toggleNotification,\n      formatAPIError,\n      formatMessage,\n    });\n  };\n\n  const handleWidgetResizeFn = (\n    leftWidgetId: string,\n    rightWidgetId: string,\n    newLeftWidth: number,\n    newRightWidth: number\n  ) => {\n    const newWidths = handleWidgetResize({\n      filteredWidgets,\n      columnWidths,\n      leftWidgetId,\n      rightWidgetId,\n      newLeftWidth,\n      newRightWidth,\n    });\n\n    setColumnWidths(newWidths);\n  };\n\n  const handleDragStart: WidgetIdFunction = React.useCallback((widgetId: string) => {\n    setIsDraggingWidget(true);\n    setDraggedWidgetId(widgetId);\n  }, []);\n\n  const handleDragEnd: DragEndFunction = React.useCallback(() => {\n    setIsDraggingWidget(false);\n    setDraggedWidgetId(undefined);\n  }, []);\n\n  const saveLayoutFn = () => {\n    saveLayout({\n      widgets: filteredWidgets,\n      widths: columnWidths,\n      updateHomepageLayout,\n      toggleNotification,\n      formatAPIError,\n      formatMessage,\n    });\n  };\n\n  return {\n    findWidget: findWidgetFn,\n    deleteWidget: deleteWidgetFn,\n    addWidget: addWidgetFn,\n    moveWidget: moveWidgetFn,\n    columnWidths,\n    setColumnWidths,\n    handleWidgetResize: handleWidgetResizeFn,\n    saveLayout: saveLayoutFn,\n    isDraggingWidget,\n    draggedWidgetId,\n    handleDragStart,\n    handleDragEnd,\n  };\n};\n"],"names":["findWidget","filteredWidgets","widgetId","widget","find","c","uid","undefined","index","indexOf","saveLayout","widgets","widths","updateHomepageLayout","toggleNotification","formatAPIError","formatMessage","layoutData","map","width","WIDGET_SIZING","TOTAL_COLUMNS","res","type","message","error","id","defaultMessage","moveWidget","columnWidths","insertIndex","targetRowIndex","isHorizontalDrop","w","newWidgets","newWidths","widgetRows","calculateWidgetRows","moveWidgetInArray","sourceRow","findRowContainingWidget","sourceRowResize","resizeRowAfterRemoval","Object","assign","targetRow","isSameRowReorder","startIndex","targetRowResize","resizeRowAfterAddition","deleteWidget","_removed","deletedWidgetIndex","findIndex","affectedRow","row","endIndex","finalWidths","filter","addWidget","handleWidgetResize","leftWidgetId","rightWidgetId","newLeftWidth","newRightWidth","canResizeBetweenWidgets","isValidResizeOperation","useWidgets","setFilteredWidgets","setColumnWidths","React","useState","isDraggingWidget","setIsDraggingWidget","draggedWidgetId","setDraggedWidgetId","useUpdateHomepageLayoutMutation","useNotification","_unstableFormatAPIError","useAPIErrorHandler","useIntl","findWidgetFn","moveWidgetFn","result","deleteWidgetFn","deleteWidgetOperation","addWidgetFn","addWidgetOperation","handleWidgetResizeFn","handleDragStart","useCallback","handleDragEnd","saveLayoutFn"],"mappings":"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"}