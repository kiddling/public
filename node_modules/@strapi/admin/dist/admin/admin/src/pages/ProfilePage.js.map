{"version":3,"file":"ProfilePage.js","sources":["../../../../../admin/src/pages/ProfilePage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, useNotifyAT, Grid, Typography, FlexProps } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, FormHelpers } from '../components/Form';\nimport { InputRenderer } from '../components/FormInputs/Renderer';\nimport { useGuidedTour } from '../components/GuidedTour/Context';\nimport { Layouts } from '../components/Layouts/Layout';\nimport { Page } from '../components/PageHelpers';\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useTracking } from '../features/Tracking';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useIsDesktop } from '../hooks/useMediaQuery';\nimport { AppState, setAppTheme } from '../reducer';\nimport { useIsSSOLockedQuery, useUpdateMeMutation } from '../services/auth';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { translatedErrors } from '../utils/translatedErrors';\nimport { getDisplayName } from '../utils/users';\n\nimport { COMMON_USER_SCHEMA } from './Settings/pages/Users/utils/validation';\n\nimport type { UpdateMe } from '../../../shared/contracts/users';\n\nconst PROFILE_VALIDTION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  currentPassword: yup\n    .string()\n    // @ts-expect-error â€“ no idea why this is failing.\n    .when(['password', 'confirmPassword'], (password, confirmPassword, passSchema) => {\n      return password || confirmPassword\n        ? passSchema\n            .required({\n              id: translatedErrors.required.id,\n              defaultMessage: 'This field is required',\n            })\n            .nullable()\n        : passSchema;\n    }),\n  preferedLanguage: yup.string().nullable(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ProfilePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panel = ({ children, ...flexProps }: FlexProps) => {\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4} {...flexProps}>\n        {children}\n      </Flex>\n    </Box>\n  );\n};\n\nconst ProfilePage = () => {\n  const isDesktop = useIsDesktop();\n  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const currentTheme = useTypedSelector((state) => state.admin_app.theme.currentTheme);\n  const dispatch = useTypedDispatch();\n  const {\n    _unstableFormatValidationErrors: formatValidationErrors,\n    _unstableFormatAPIError: formatApiError,\n  } = useAPIErrorHandler();\n\n  const user = useAuth('ProfilePage', (state) => state.user);\n\n  React.useEffect(() => {\n    if (user) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.profile.form.notify.data.loaded',\n          defaultMessage: 'Your profile data has been loaded',\n        })\n      );\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n      });\n    }\n  }, [formatMessage, notifyStatus, toggleNotification, user]);\n\n  const [updateMe, { isLoading: isSubmittingForm }] = useUpdateMeMutation();\n\n  const {\n    isLoading,\n    data: dataSSO,\n    error,\n  } = useIsSSOLockedQuery(undefined, {\n    skip: !(window.strapi.isEE && window.strapi.features.isEnabled('sso')),\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'Settings.permissions.users.sso.provider.error' }),\n      });\n    }\n  }, [error, formatMessage, toggleNotification]);\n\n  type UpdateUsersMeBody = UpdateMe.Request['body'] & {\n    confirmPassword: string;\n    currentTheme: AppState['theme']['currentTheme'];\n  };\n\n  const handleSubmit = async (\n    body: UpdateUsersMeBody,\n    { setErrors }: FormHelpers<UpdateUsersMeBody>\n  ) => {\n    const { confirmPassword: _confirmPassword, currentTheme, ...bodyRest } = body;\n    let dataToSend = bodyRest;\n\n    // The password fields are optional. If the user didn't touch them, don't send any password\n    // to the API, because an empty string would throw a validation error\n    if (dataToSend.password === '') {\n      const {\n        password: _password,\n        currentPassword: _currentPassword,\n        ...passwordRequestBodyRest\n      } = dataToSend;\n      dataToSend = passwordRequestBodyRest;\n    }\n\n    const res = await updateMe(dataToSend);\n\n    if ('data' in res) {\n      dispatch(setAppTheme(currentTheme));\n\n      trackUsage('didChangeMode', { newMode: currentTheme });\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n      });\n    }\n\n    if ('error' in res) {\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      } else if (isBaseQueryError(res.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatApiError(res.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const hasLockedRole = dataSSO?.isSSOLocked ?? false;\n  const { email, firstname, lastname, username, preferedLanguage } = user ?? {};\n  const initialData = {\n    email: email ?? '',\n    firstname: firstname ?? '',\n    lastname: lastname ?? '',\n    username: username ?? '',\n    preferedLanguage,\n    currentTheme,\n    confirmPassword: '',\n    password: '',\n  };\n\n  return (\n    <>\n      <Page.Main aria-busy={isSubmittingForm}>\n        <Page.Title>\n          {formatMessage({\n            id: 'Settings.profile.form.section.head.title',\n            defaultMessage: 'User profile',\n          })}\n        </Page.Title>\n        <Form\n          method=\"PUT\"\n          onSubmit={handleSubmit}\n          initialValues={initialData}\n          validationSchema={PROFILE_VALIDTION_SCHEMA}\n        >\n          {({ isSubmitting, modified }) => (\n            <>\n              <Layouts.Header\n                title={getDisplayName(user)}\n                primaryAction={\n                  <Button\n                    startIcon={<Check />}\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!modified}\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Box paddingBottom={6}>\n                <Layouts.Content>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <UserInfoSection />\n                    {!hasLockedRole && <PasswordSection />}\n                    <PreferencesSection localeNames={localeNames} />\n                  </Flex>\n                </Layouts.Content>\n              </Box>\n            </>\n          )}\n        </Form>\n        {isDesktop && (\n          <Box>\n            <Layouts.Content>\n              <GuidedTourSection />\n            </Layouts.Content>\n          </Box>\n        )}\n      </Page.Main>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst PasswordSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Panel>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: 'global.change-password',\n          defaultMessage: 'Change password',\n        })}\n      </Typography>\n      {[\n        [\n          {\n            label: formatMessage({\n              id: 'Auth.form.currentPassword.label',\n              defaultMessage: 'Current Password',\n            }),\n            name: 'currentPassword',\n            size: 6,\n            type: 'password' as const,\n          },\n        ],\n        [\n          {\n            autoComplete: 'new-password',\n            label: formatMessage({\n              id: 'global.password',\n              defaultMessage: 'Password',\n            }),\n            name: 'password',\n            size: 6,\n            type: 'password' as const,\n          },\n          {\n            autoComplete: 'new-password',\n            label: formatMessage({\n              id: 'Auth.form.confirmPassword.label',\n              defaultMessage: 'Confirm Password',\n            }),\n            name: 'confirmPassword',\n            size: 6,\n            type: 'password' as const,\n          },\n        ],\n      ].map((row, index) => (\n        <Grid.Root key={index} gap={5}>\n          {row.map(({ size, ...field }) => (\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n              <InputRenderer {...field} />\n            </Grid.Item>\n          ))}\n        </Grid.Root>\n      ))}\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreferencesSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreferencesSectionProps {\n  localeNames: Record<string, string>;\n}\n\nconst PreferencesSection = ({ localeNames }: PreferencesSectionProps) => {\n  const { formatMessage } = useIntl();\n  const themesToDisplay = useTypedSelector((state) => state.admin_app.theme.availableThemes);\n\n  return (\n    <Panel>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'Settings.profile.form.section.experience.title',\n            defaultMessage: 'Experience',\n          })}\n        </Typography>\n        <Typography>\n          {formatMessage(\n            {\n              id: 'Settings.profile.form.section.experience.interfaceLanguageHelp',\n              defaultMessage:\n                'Preference changes will apply only to you. More information is available {here}.',\n            },\n            {\n              here: (\n                <Box\n                  tag=\"a\"\n                  color=\"primary600\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#locales\"\n                >\n                  {formatMessage({\n                    id: 'Settings.profile.form.section.experience.here',\n                    defaultMessage: 'here',\n                  })}\n                </Box>\n              ),\n            }\n          )}\n        </Typography>\n      </Flex>\n      <Grid.Root gap={5}>\n        {[\n          {\n            hint: formatMessage({\n              id: 'Settings.profile.form.section.experience.interfaceLanguage.hint',\n              defaultMessage: 'This will only display your own interface in the chosen language.',\n            }),\n            label: formatMessage({\n              id: 'Settings.profile.form.section.experience.interfaceLanguage',\n              defaultMessage: 'Interface language',\n            }),\n            name: 'preferedLanguage',\n            options: Object.entries(localeNames).map(([value, label]) => ({\n              label,\n              value,\n            })),\n            placeholder: formatMessage({\n              id: 'global.select',\n              defaultMessage: 'Select',\n            }),\n            size: 6,\n            type: 'enumeration' as const,\n          },\n          {\n            hint: formatMessage({\n              id: 'Settings.profile.form.section.experience.mode.hint',\n              defaultMessage: 'Displays your interface in the chosen mode.',\n            }),\n            label: formatMessage({\n              id: 'Settings.profile.form.section.experience.mode.label',\n              defaultMessage: 'Interface mode',\n            }),\n            name: 'currentTheme',\n            options: [\n              {\n                label: formatMessage({\n                  id: 'Settings.profile.form.section.experience.mode.option-system-label',\n                  defaultMessage: 'Use system settings',\n                }),\n                value: 'system',\n              },\n              ...themesToDisplay.map((theme) => ({\n                label: formatMessage(\n                  {\n                    id: 'Settings.profile.form.section.experience.mode.option-label',\n                    defaultMessage: '{name} mode',\n                  },\n                  {\n                    name: formatMessage({\n                      id: theme,\n                      defaultMessage: upperFirst(theme),\n                    }),\n                  }\n                ),\n                value: theme,\n              })),\n            ],\n            placeholder: formatMessage({\n              id: 'components.Select.placeholder',\n              defaultMessage: 'Select',\n            }),\n            size: 6,\n            type: 'enumeration' as const,\n          },\n        ].map(({ size, ...field }) => (\n          <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n            <InputRenderer {...field} />\n          </Grid.Item>\n        ))}\n      </Grid.Root>\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UserInfoSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst UserInfoSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Panel>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: 'global.profile',\n          defaultMessage: 'Profile',\n        })}\n      </Typography>\n      <Grid.Root gap={5}>\n        {[\n          {\n            label: formatMessage({\n              id: 'Auth.form.firstname.label',\n              defaultMessage: 'First name',\n            }),\n            name: 'firstname',\n            required: true,\n            size: 6,\n            type: 'string' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.lastname.label',\n              defaultMessage: 'Last name',\n            }),\n            name: 'lastname',\n            size: 6,\n            type: 'string' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.email.label',\n              defaultMessage: 'Email',\n            }),\n            name: 'email',\n            required: true,\n            size: 6,\n            type: 'email' as const,\n          },\n          {\n            label: formatMessage({\n              id: 'Auth.form.username.label',\n              defaultMessage: 'Username',\n            }),\n            name: 'username',\n            size: 6,\n            type: 'string' as const,\n          },\n        ].map(({ size, ...field }) => (\n          <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n            <InputRenderer {...field} />\n          </Grid.Item>\n        ))}\n      </Grid.Root>\n    </Panel>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst GuidedTourSection = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const dispatch = useGuidedTour('ProfilePage', (s) => s.dispatch);\n\n  const onClickReset = () => {\n    dispatch({ type: 'reset_all_tours' });\n    toggleNotification({\n      type: 'success',\n      message: formatMessage({\n        id: 'tours.profile.notification.success.reset',\n        defaultMessage: 'Guided tour reset',\n      }),\n    });\n  };\n\n  return (\n    <Panel alignItems=\"start\">\n      <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'tours.profile.title',\n            defaultMessage: 'Guided tour',\n          })}\n        </Typography>\n        <Typography variant=\"pi\">\n          {formatMessage({\n            id: 'tours.profile.description',\n            defaultMessage: 'You can reset the guided tour at any time.',\n          })}\n        </Typography>\n      </Flex>\n      <Button variant=\"tertiary\" onClick={onClickReset}>\n        {formatMessage({\n          id: 'tours.profile.reset',\n          defaultMessage: 'Reset guided tour',\n        })}\n      </Button>\n    </Panel>\n  );\n};\n\nexport { ProfilePage };\n"],"names":["PROFILE_VALIDTION_SCHEMA","yup","object","shape","COMMON_USER_SCHEMA","currentPassword","string","when","password","confirmPassword","passSchema","required","id","translatedErrors","defaultMessage","nullable","preferedLanguage","Panel","children","flexProps","_jsx","Box","background","hasRadius","shadow","paddingTop","paddingBottom","paddingLeft","paddingRight","Flex","direction","alignItems","gap","ProfilePage","isDesktop","useIsDesktop","localeNames","useTypedSelector","state","admin_app","language","formatMessage","useIntl","trackUsage","useTracking","toggleNotification","useNotification","notifyStatus","useNotifyAT","currentTheme","theme","dispatch","useTypedDispatch","_unstableFormatValidationErrors","formatValidationErrors","_unstableFormatAPIError","formatApiError","useAPIErrorHandler","user","useAuth","React","useEffect","type","message","updateMe","isLoading","isSubmittingForm","useUpdateMeMutation","data","dataSSO","error","useIsSSOLockedQuery","undefined","skip","window","strapi","isEE","features","isEnabled","handleSubmit","body","setErrors","_confirmPassword","bodyRest","dataToSend","_password","_currentPassword","passwordRequestBodyRest","res","setAppTheme","newMode","isBaseQueryError","name","Page","Loading","hasLockedRole","isSSOLocked","email","firstname","lastname","username","initialData","_Fragment","_jsxs","Main","aria-busy","Title","Form","method","onSubmit","initialValues","validationSchema","isSubmitting","modified","Layouts","Header","title","getDisplayName","primaryAction","Button","startIcon","Check","loading","disabled","Content","UserInfoSection","PasswordSection","PreferencesSection","GuidedTourSection","Typography","variant","tag","label","size","autoComplete","map","row","index","Grid","Root","field","Item","col","InputRenderer","themesToDisplay","availableThemes","here","color","target","rel","href","hint","options","Object","entries","value","placeholder","upperFirst","useGuidedTour","s","onClickReset","onClick"],"mappings":"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"}