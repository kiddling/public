{"version":3,"file":"ai.js","sources":["../../../../../../../ee/server/src/ai/controllers/ai.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport path from 'path';\nimport fs from 'fs';\nimport crypto from 'crypto';\nimport type { AdminUser } from '../../../../../shared/contracts/shared';\nimport { GetAiToken } from '../../../../../shared/contracts/ai';\n\nexport default {\n  async getAiToken(ctx: Context) {\n    const ERROR_PREFIX = 'AI token request failed:';\n    const USER_ERROR_MESSAGE = 'AI token request failed. Check server logs for details.';\n\n    try {\n      // Security check: Ensure user is authenticated and has proper permissions\n      if (!ctx.state.user) {\n        return ctx.unauthorized('Authentication required');\n      }\n\n      // Check if EE features are enabled first\n      if (!strapi.ee?.isEE) {\n        strapi.log.error(`${ERROR_PREFIX} Enterprise Edition features are not enabled`);\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      // Get the EE license\n      // First try environment variable, then try reading from file\n      let eeLicense = process.env.STRAPI_LICENSE;\n\n      if (!eeLicense) {\n        try {\n          const licensePath = path.join(strapi.dirs.app.root, 'license.txt');\n          eeLicense = fs.readFileSync(licensePath).toString();\n        } catch (error) {\n          // License file doesn't exist or can't be read\n        }\n      }\n\n      if (!eeLicense) {\n        strapi.log.error(\n          `${ERROR_PREFIX} No EE license found. Please ensure STRAPI_LICENSE environment variable is set or license.txt file exists.`\n        );\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      const aiServerUrl = process.env.STRAPI_AI_URL || 'https://strapi-ai.apps.strapi.io';\n\n      if (!aiServerUrl) {\n        strapi.log.error(\n          `${ERROR_PREFIX} AI server URL not configured. Please set STRAPI_AI_URL environment variable.`\n        );\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      // Get the current user\n      const user = ctx.state.user as AdminUser;\n\n      // Create a secure user identifier using only user ID\n      const userIdentifier = user.id.toString();\n\n      // Get project ID\n      const projectId = strapi.config.get('uuid');\n      if (!projectId) {\n        strapi.log.error(`${ERROR_PREFIX} Project ID not configured`);\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      strapi.log.http('Contacting AI Server for token generation');\n\n      try {\n        // Call the AI server's getAiJWT endpoint\n        const response = await fetch(`${aiServerUrl}/auth/getAiJWT`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            // No authorization header needed for public endpoint\n            // Add request ID for tracing\n            'X-Request-Id': crypto.randomUUID(),\n          },\n          body: JSON.stringify({\n            eeLicense,\n            userIdentifier,\n            projectId,\n          }),\n        });\n\n        if (!response.ok) {\n          let errorData;\n          let errorText;\n          try {\n            errorText = await response.text();\n            errorData = JSON.parse(errorText);\n          } catch {\n            errorData = { error: errorText || 'Failed to parse error response' };\n          }\n\n          strapi.log.error(`${ERROR_PREFIX} ${errorData?.error || 'Unknown error'}`, {\n            status: response.status,\n            statusText: response.statusText,\n            error: errorData,\n            errorText,\n            projectId,\n          });\n\n          return ctx.internalServerError(USER_ERROR_MESSAGE);\n        }\n\n        let data;\n        try {\n          data = (await response.json()) as {\n            jwt: string;\n            expiresAt?: string;\n          };\n        } catch (parseError) {\n          strapi.log.error(`${ERROR_PREFIX} Failed to parse AI server response`, parseError);\n          return ctx.internalServerError(USER_ERROR_MESSAGE);\n        }\n\n        if (!data.jwt) {\n          strapi.log.error(`${ERROR_PREFIX} Invalid response: missing JWT token`);\n          return ctx.internalServerError(USER_ERROR_MESSAGE);\n        }\n\n        strapi.log.info('AI token generated successfully', {\n          userId: user.id,\n          expiresAt: data.expiresAt,\n        });\n\n        // Return the AI JWT with metadata\n        // Note: Token expires in 1 hour, client should handle refresh\n        ctx.body = {\n          data: {\n            token: data.jwt,\n            expiresAt: data.expiresAt, // 1 hour from generation\n          },\n        } satisfies GetAiToken.Response;\n      } catch (fetchError) {\n        if (fetchError instanceof Error && fetchError.name === 'AbortError') {\n          strapi.log.error(`${ERROR_PREFIX} Request to AI server timed out`);\n          return ctx.internalServerError(USER_ERROR_MESSAGE);\n        }\n\n        throw fetchError;\n      }\n    } catch (error) {\n      strapi.log.error(\n        `${ERROR_PREFIX} ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error\n      );\n      return ctx.internalServerError(USER_ERROR_MESSAGE);\n    }\n  },\n  async getAiUsage(ctx: Context) {\n    const ERROR_PREFIX = 'AI usage data request failed:';\n    const USER_ERROR_MESSAGE = 'AI usage data request failed. Check server logs for details.';\n    // Security check: Ensure user is authenticated and has proper permissions\n    if (!ctx.state.user) {\n      return ctx.unauthorized('Authentication required');\n    }\n\n    // Check if EE features are enabled first\n    if (!strapi.ee?.isEE) {\n      strapi.log.error(`${ERROR_PREFIX} Enterprise Edition features are not enabled`);\n      return ctx.internalServerError(USER_ERROR_MESSAGE);\n    }\n\n    // Get the EE license\n    // First try environment variable, then try reading from file\n    let eeLicense = process.env.STRAPI_LICENSE;\n\n    if (!eeLicense) {\n      try {\n        const licensePath = path.join(strapi.dirs.app.root, 'license.txt');\n        eeLicense = fs.readFileSync(licensePath).toString();\n      } catch (error) {\n        // License file doesn't exist or can't be read\n      }\n    }\n\n    if (!eeLicense) {\n      strapi.log.error(\n        `${ERROR_PREFIX} No EE license found. Please ensure STRAPI_LICENSE environment variable is set or license.txt file exists.`\n      );\n      return ctx.internalServerError(USER_ERROR_MESSAGE);\n    }\n\n    const aiServerUrl = process.env.STRAPI_AI_URL || 'https://strapi-ai.apps.strapi.io';\n\n    if (!aiServerUrl) {\n      strapi.log.error(\n        `${ERROR_PREFIX} AI server URL not configured. Please set STRAPI_AI_URL or STRAPI_AI_URL environment variable.`\n      );\n      return ctx.internalServerError(USER_ERROR_MESSAGE);\n    }\n\n    // Get project ID\n    const projectId = strapi.config.get('uuid');\n    if (!projectId) {\n      strapi.log.error(`${ERROR_PREFIX} Project ID not configured`);\n      return ctx.internalServerError(USER_ERROR_MESSAGE);\n    }\n\n    try {\n      // Call the AI server's getAiJWT endpoint\n      const response = await fetch(`${aiServerUrl}/cms/ai-data`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // No authorization header needed for public endpoint\n          // Add request ID for tracing\n          'X-Request-Id': crypto.randomUUID(),\n        },\n        body: JSON.stringify({\n          eeKey: eeLicense,\n          projectId,\n        }),\n      });\n\n      if (!response.ok) {\n        let errorData;\n        let errorText;\n        try {\n          errorText = await response.text();\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText || 'Failed to parse error response' };\n        }\n\n        strapi.log.error(`${ERROR_PREFIX} ${errorData?.error || 'Unknown error'}`, {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData,\n          errorText,\n          projectId,\n        });\n\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      let data;\n      try {\n        data = (await response.json()) as {\n          data: {\n            cmsAiCreditsUsed: number;\n          };\n          subscription: {\n            subscriptionId: string;\n            planPriceId: string;\n            subscriptionStatus: string;\n            isActiveSubscription: boolean;\n            cmsAiEnabled: boolean;\n            cmsAiCreditsBase: number;\n            cmsAiCreditsMaxUsage: number;\n            currentTermStart: string;\n            currentTermEnd: string;\n          };\n        };\n      } catch (parseError) {\n        strapi.log.error(`${ERROR_PREFIX} Failed to parse AI server response`, parseError);\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      ctx.body = {\n        ...data.data,\n        subscription: data.subscription,\n      };\n    } catch (fetchError) {\n      if (fetchError instanceof Error && fetchError.name === 'AbortError') {\n        strapi.log.error(`${ERROR_PREFIX} Request to AI server timed out`);\n        return ctx.internalServerError(USER_ERROR_MESSAGE);\n      }\n\n      throw fetchError;\n    }\n  },\n};\n"],"names":["getAiToken","ctx","ERROR_PREFIX","USER_ERROR_MESSAGE","state","user","unauthorized","strapi","ee","isEE","log","error","internalServerError","eeLicense","process","env","STRAPI_LICENSE","licensePath","path","join","dirs","app","root","fs","readFileSync","toString","aiServerUrl","STRAPI_AI_URL","userIdentifier","id","projectId","config","get","http","response","fetch","method","headers","crypto","randomUUID","body","JSON","stringify","ok","errorData","errorText","text","parse","status","statusText","data","json","parseError","jwt","info","userId","expiresAt","token","fetchError","Error","name","message","getAiUsage","eeKey","subscription"],"mappings":"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"}