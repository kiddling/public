version: '3.8'

services:
  strapi:
    container_name: strapi-cms
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NPM_REGISTRY: ${NPM_REGISTRY:-https://registry.npmjs.org}
    image: strapi-cms:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT:-postgres}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-strapi}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      NODE_ENV: ${NODE_ENV:-production}
      TZ: ${TZ:-Asia/Shanghai}
    volumes:
      # Only mount uploads and database for persistence in production
      - strapi-uploads:/app/public/uploads
      - strapi-tmp:/app/.tmp
    ports:
      - '1337:1337'
    networks:
      - strapi
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:1337/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  postgres:
    container_name: strapi-postgres
    platform: linux/amd64
    restart: unless-stopped
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      POSTGRES_DB: ${DATABASE_NAME:-strapi}
    volumes:
      - strapi-data:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    networks:
      - strapi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-strapi}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  strapi-data:
  strapi-uploads:
  strapi-tmp:

networks:
  strapi:
    name: strapi
    driver: bridge
