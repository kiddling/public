services:
  postgres:
    image: postgres:16-alpine
    container_name: nuxt-strapi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-strapi}
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-strapi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-strapi} -d ${DATABASE_NAME:-strapi}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "${DATABASE_PORT:-5432}:5432"

  cms:
    build:
      context: ./apps/cms
      dockerfile: Dockerfile
    container_name: nuxt-strapi-cms
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-strapi}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      DATABASE_SSL: "false"
      
      # Strapi configuration
      HOST: 0.0.0.0
      PORT: ${STRAPI_PORT:-1337}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      NODE_ENV: ${NODE_ENV:-production}
      
      # Baidu API (if applicable)
      BAIDU_API_KEY: ${BAIDU_API_KEY:-}
      BAIDU_SECRET_KEY: ${BAIDU_SECRET_KEY:-}
    volumes:
      - strapi_uploads:/opt/app/public/uploads
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    ports:
      - "${STRAPI_PORT:-1337}:1337"

  cms-worker:
    build:
      context: ./apps/cms
      dockerfile: Dockerfile
    container_name: nuxt-strapi-cms-worker
    restart: unless-stopped
    command: ["node", "/opt/app/node_modules/.bin/strapi", "console"]
    environment:
      # Same as cms service
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-strapi}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      DATABASE_SSL: "false"
      
      # Strapi configuration
      HOST: 0.0.0.0
      PORT: ${STRAPI_PORT:-1337}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      NODE_ENV: ${NODE_ENV:-production}
      
      # Baidu API
      BAIDU_API_KEY: ${BAIDU_API_KEY:-}
      BAIDU_SECRET_KEY: ${BAIDU_SECRET_KEY:-}
    volumes:
      - strapi_uploads:/opt/app/public/uploads
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - worker

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: nuxt-strapi-frontend
    restart: unless-stopped
    environment:
      # API Configuration (internal network)
      NUXT_PUBLIC_API_BASE_URL: ${NUXT_PUBLIC_API_BASE_URL:-http://cms:1337}
      NUXT_PUBLIC_STRAPI_URL: ${NUXT_PUBLIC_STRAPI_URL:-http://cms:1337}
      NUXT_STRAPI_API_TOKEN: ${NUXT_STRAPI_API_TOKEN}
      
      # CDN Configuration
      NUXT_PUBLIC_CDN_URL: ${NUXT_PUBLIC_CDN_URL:-}
      
      # App Configuration
      HOST: 0.0.0.0
      PORT: ${FRONTEND_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
    networks:
      - app_network
    depends_on:
      cms:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    ports:
      - "${FRONTEND_PORT:-3000}:3000"

  nginx:
    image: nginx:alpine
    container_name: nuxt-strapi-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - app_network
    depends_on:
      frontend:
        condition: service_healthy
      cms:
        condition: service_healthy
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  strapi_uploads:
    driver: local

networks:
  app_network:
    driver: bridge
